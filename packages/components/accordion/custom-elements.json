{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/accordion.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/accordion-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-accordion",
          "declaration": {
            "name": "Accordion",
            "module": "/src/accordion.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-accordion-item",
          "declaration": {
            "name": "AccordionItem",
            "module": "/src/accordion-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/accordion-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An accordion item component.",
          "name": "AccordionItem",
          "cssParts": [
            {
              "description": "Header element of the accordion-item",
              "name": "summary"
            },
            {
              "description": "The body of the accordion-item",
              "name": "panel"
            }
          ],
          "slots": [
            {
              "description": "Body content for the accordion",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the element is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "This is a workaround for `delegatesFocus` not allowing you to select\nany text in the content of the accordion item.\nSee https://issues.chromium.org/issues/40622041"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the details element is opened.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "summary",
              "type": {
                "text": "string | undefined"
              },
              "description": "A text shown in the header - as a title of the accordion item.",
              "attribute": "summary"
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "force",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The state to forcibly set the component to"
                }
              ],
              "description": "Toggles the component state between open or closed. If the `force` parameter is\nprovided, the state will be set to the value of the parameter."
            },
            {
              "kind": "field",
              "name": "toggleEvent",
              "type": {
                "text": "EventEmitter<SlToggleEvent<boolean>>"
              },
              "description": "Emits when the accordion item has been toggled."
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the element is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the details element is opened.",
              "fieldName": "open"
            },
            {
              "name": "summary",
              "type": {
                "text": "string | undefined"
              },
              "description": "A text shown in the header - as a title of the accordion item.",
              "fieldName": "summary"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-accordion-item",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "This is a workaround for `delegatesFocus` not allowing you to select\nany text in the content of the accordion item.\nSee https://issues.chromium.org/issues/40622041"
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "force",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The state to forcibly set the component to"
                }
              ],
              "description": "Toggles the component state between open or closed. If the `force` parameter is\nprovided, the state will be set to the value of the parameter."
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onToggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ToggleEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#animateState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "'opening' | 'closing'"
                  },
                  "description": "The state which we should animate to"
                }
              ],
              "description": "Animate the details opening or closing. This process is done in steps.\n\nOpening:\n1. Add the `open` attribute to the details element, so the wrapper is visible\n2. Add an `animationend` listener that will remove the `opening` class\n3. Add the `opening` class to the details in the next frame (for browser compatibility)\n\nClosing:\n1. Add an `animationend` listener that will remove the `closing` class and `open` attribute\n2. Add the `closing` class to the details in the next frame (for browser compatibility)\n\nThe specific order of adding/removing the `open` attribute is necessary for the animation\nto work. This will also trigger the `toggle` event, which in turn will trigger our own\n`sl-toggle` event."
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#shouldAnimate",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether we should actually animate opening/closing the wrapper."
            },
            {
              "kind": "field",
              "name": "toggleEvent",
              "type": {
                "text": "EventEmitter<SlToggleEvent<boolean>>"
              },
              "description": "Emits when the accordion item has been toggled."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionItem",
          "declaration": {
            "name": "AccordionItem",
            "module": "src/accordion-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/accordion.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An accordion component that can contain accordion-items\n\n```html\n  <sl-accordion>...</sl-accordion>\n```",
          "name": "Accordion",
          "slots": [
            {
              "description": "The place for multiple `<sl-accordion-item>`",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "AccordionItem[] | undefined"
              },
              "description": "The slotted accordion items."
            },
            {
              "kind": "field",
              "name": "single",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether only one accordion item can be opened at once. By default, multiple accordion items can be opened.",
              "attribute": "single",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "single",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether only one accordion item can be opened at once. By default, multiple accordion items can be opened.",
              "fieldName": "single"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-accordion",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onToggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SlToggleEvent<boolean>"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#focusGroupController",
              "privacy": "private",
              "default": "new FocusGroupController<AccordionItem>(this, {\n    elements: () => this.items || [],\n    focusInIndex: (elements: AccordionItem[]) => elements.findIndex(el => !el.disabled),\n    isFocusableElement: (el: AccordionItem) => !el.disabled\n  })",
              "description": "Manage the keyboard navigation."
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "AccordionItem[] | undefined"
              },
              "description": "The slotted accordion items."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Accordion",
          "declaration": {
            "name": "Accordion",
            "module": "src/accordion.ts"
          }
        }
      ]
    }
  ]
}
