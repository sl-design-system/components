:host {
  --_transition-duration: 0.3s; // This is used in JavaScript as well

  display: flex;
  outline: 0;
}

:host([disabled]) {
  pointer-events: none;

  summary {
    color: var(--sl-color-foreground-disabled);
  }
}

details {
  border-block-end: var(--sl-size-borderWidth-subtle) solid var(--sl-color-border-plain);
  flex: 1;

  &[open] summary::after {
    background: var(--sl-color-border-plain);
    block-size: var(--sl-size-borderWidth-subtle);
    content: '';
    inline-size: calc(100% - 2 * var(--sl-size-500));
    inset-block-end: 0;
    inset-inline-start: 0;
    margin-inline: var(--sl-size-500);
    position: absolute;
  }

  &[open],
  &.opening {
    .horizontal-line {
      transform: rotate(270deg);
    }

    .vertical-line {
      transform: rotate(90deg);
    }
  }

  &.opening .wrapper {
    animation-name: content-expand;
  }

  &.closing {
    .horizontal-line {
      transform: rotate(90deg);
    }

    .vertical-line {
      transform: rotate(0deg);
    }

    .wrapper {
      animation-direction: reverse;
      animation-name: content-expand;
    }
  }
}

summary {
  --_bg-opacity: var(--sl-opacity-interactive-bold-idle);

  background: color-mix(
    in srgb,
    transparent,
    var(--sl-color-background-primary-interactive-plain) calc(100% * var(--_bg-opacity))
  );
  color: var(--sl-color-foreground-plain);
  cursor: pointer;
  display: flex;
  font-size: 1.3em; // 14px * 1.3 ~= 18px
  gap: var(--sl-size-100);
  line-height: var(--sl-size-350);
  outline: transparent solid var(--sl-size-borderWidth-focusRing);
  outline-offset: var(--sl-size-outlineOffset-default);
  padding: var(--sl-size-200) var(--sl-size-100);
  position: relative;
  z-index: 1; /* To work properly with sticky */

  &::-webkit-details-marker {
    display: none; /* Hides the default arrow in Safari */
  }

  &:hover {
    --_bg-opacity: var(--sl-opacity-interactive-bold-hover);

    color: var(--sl-color-foreground-primary-bold);
  }

  &:active {
    --_bg-opacity: var(--sl-opacity-interactive-bold-active);

    color: var(--sl-color-foreground-primary-bold);
  }

  &:focus-visible {
    border-radius: var(--sl-size-borderRadius-default);
    outline-color: var(--sl-color-border-focused);
    position: relative;
    z-index: 2; // Make sure the outline is not clipped by the next accordion item
  }

  @media (prefers-reduced-motion: no-preference) {
    transition-duration: var(--_transition-duration);
    transition-property: background, outline-color;
  }
}

svg {
  block-size: var(--sl-size-350);
  flex-shrink: 0;
}

g {
  transform-origin: 0 0;

  &.horizontal-line {
    transform: rotate(90deg);
  }

  @media (prefers-reduced-motion: no-preference) {
    transition: transform var(--_transition-duration) cubic-bezier(0.6, 2, 0.6, 1);
  }
}

.wrapper {
  animation-duration: 1ms; // Make sure it works when prefers-reduced-motion is on
  animation-fill-mode: both;
  animation-iteration-count: 1;
  animation-timing-function: linear;
  background: var(--sl-elevation-surface-base-default);
  display: grid;
  overflow: hidden;

  @media (prefers-reduced-motion: no-preference) {
    animation-duration: var(--_transition-duration);
    transition: all var(--_transition-duration) cubic-bezier(0.7, -0.4, 0.4, 1.4);
  }
}

.body {
  min-block-size: 0;
}

[part='panel'] {
  color: var(--sl-color-foreground-plain);
  padding: var(--sl-size-200) var(--sl-size-500);
  position: relative;
}

@keyframes content-expand {
  0% {
    grid-template-rows: 0fr;
  }

  100% {
    grid-template-rows: 1fr;
  }
}
