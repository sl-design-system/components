:host {
  border-radius: var(--sl-size-borderRadius-default);
  inline-size: 100%;
  position: relative;
}

@layer grid-areas {
  :host {
    --_media-size: var(--sl-card-media-size, auto);

    display: grid;
    grid-template:
      'media' var(--_media-size)
      'header' max-content
      'article' 1fr
      'actions' max-content;
  }

  :host(:not(.sl-has-media)) {
    grid-template:
      'header' max-content
      'article' 1fr
      'actions' max-content;

    figure {
      display: none;
      grid-area: unset;
    }
  }

  :host(:where(.sl-horizontal.sl-has-media)) {
    --_media-size: var(--sl-card-media-size, 50%);

    grid-template-areas:
      'media header'
      'media article';
  }

  :host(:where(.sl-horizontal.sl-has-actions.sl-has-media)) {
    grid-template-areas:
      'media header'
      'media article'
      'media actions';
  }

  :host(:where(.sl-horizontal.sl-has-media):not([subgrid])) {
    grid-template-columns: var(--_media-size) 1fr;
    grid-template-rows: max-content 1fr max-content;
  }

  :host(:where(.sl-horizontal.sl-has-media):not(.sl-has-actions, [subgrid])) {
    grid-template:
      'media header' max-content
      'media article' 1fr / var(--_media-size) 1fr;
  }

  :host(:where([subgrid])) {
    gap: 0;
    grid-column: span var(--_horizontal-elements, 1);
    grid-row: span var(--_vertical-elements, 3);
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
  }

  .content {
    display: grid;
    gap: var(--sl-size-200) 0;
    grid-row: span var(--_vertical-elements, 3);
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
    padding: var(--sl-size-300);
    position: relative;
  }

  :host(.sl-has-media:not(.sl-horizontal)) .content {
    grid-row: span calc(var(--_vertical-elements, 3) - 1);
  }
}

@layer media {
  figure {
    grid-area: media;
    margin: 0;
    overflow: hidden;
    position: relative;
  }

  :host(:where([media-margin])) figure {
    margin: var(--sl-size-050);
  }

  slot[name='media'] {
    display: grid;
    inset: 0;
    overflow: hidden;
    position: relative;
  }

  :host(:where(.sl-media-explicit-size)) slot[name='media'] {
    position: absolute;
  }

  slot[name='media']::slotted(*) {
    block-size: 100%;
    inline-size: 100%;
    object-fit: cover;
    overflow: hidden;
  }

  :host([fit-image]) {
    slot[name='media'] {
      background: var(--sl-card-image-backdrop, var(--sl-color-background-accent-grey-subtle));
    }

    slot[name='media']::slotted(*) {
      --_margin: var(--sl-size-200);

      block-size: calc(100% - 2 * var(--_margin));
      inline-size: calc(100% - 2 * var(--_margin));
      margin: var(--_margin);
      object-fit: contain;
    }
  }

  :host([fit-image][image-backdrop]) {
    slot[name='media'] {
      background: transparent;
      z-index: 1; // Ensure backdrop is below the image
    }

    figure .backdrop {
      --_blur: var(--sl-size-200);

      block-size: calc(100% + 2 * var(--_blur));
      display: block;
      filter: blur(var(--_blur));
      inline-size: calc(100% + 2 * var(--_blur));
      inset-block-start: calc(-1 * var(--_blur));
      inset-inline-start: calc(-1 * var(--_blur));
      opacity: var(--sl-opacity-700);
      position: absolute;
    }
  }
}

@layer main-content {
  :host {
    --_bg-color: var(--sl-elevation-surface-raised-default);
    --_bg-mix-color: var(--sl-color-background-neutral-interactive-plain);
    --_bg-opacity: var(--sl-opacity-interactive-plain-idle);

    background: color-mix(in srgb, var(--_bg-color), var(--_bg-mix-color) calc(100% * var(--_bg-opacity)));
    border: var(--sl-size-borderWidth-default) solid var(--sl-color-border-plain);
  }

  slot[name='body'] {
    /* stylelint-disable-next-line property-no-vendor-prefix */
    -webkit-box-orient: vertical;
    clip-path: fill-box;
    /* stylelint-disable-next-line value-no-vendor-prefix */
    display: -webkit-box;
    grid-area: article;
    /* stylelint-disable-next-line property-no-vendor-prefix */
    -webkit-line-clamp: var(--_line-clamp, 9999);
    overflow: hidden;
  }

  slot.title::slotted(*),
  slot[name='body']::slotted(*) {
    margin-block: 0;
  }

  :host(.sl-has-actions) {
    slot[name='actions'] {
      align-content: end;
      display: inline-block;
      grid-area: actions;
    }
  }

  .header {
    display: flex;
    flex-direction: column;
    gap: var(--sl-size-050);
    grid-area: header;
  }

  slot.title::slotted(*) {
    font: var(--sl-text-new-typeset-fontWeight-semiBold) var(--sl-size-text-new-heading-md)
      var(--sl-text-new-typeset-fontFamily-heading);
  }

  slot.title::slotted(a[href]) {
    color: var(
      --sl-color-foreground-plain
    ) !important; // There is now way to do this with a selector that has more weight than what is set in the global styles

    text-decoration: none;
  }

  slot.title::slotted(a[href]:focus-visible) {
    outline: none;
  }

  :host(.sl-has-link):has(slot.title:focus-within),
  :host(.sl-has-link:hover) {
    border-color: var(--sl-color-border-input);
    box-shadow: var(--sl-elevation-shadow-overflow);
    cursor: pointer;

    --_bg-opacity: var(--sl-opacity-interactive-plain-hover);
  }

  :host(.sl-has-link:active) {
    --_bg-opacity: var(--sl-opacity-interactive-plain-active);
  }

  :host(.sl-has-menu-button) {
    .header {
      padding-inline-end: calc(
        2 * var(--sl-size-100) + calc(1lh + (var(--sl-size-100) - var(--sl-size-borderWidth-action)) * 2)
      );
      position: relative;
    }

    slot[name='menu-button'] {
      display: block;
      inset-block-start: var(--sl-size-100);
      inset-inline-end: var(--sl-size-100);
      position: absolute;
    }
  }
}
