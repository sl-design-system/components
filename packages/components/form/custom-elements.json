{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "register.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/abstract-control.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AbstractControl",
          "members": [
            {
              "kind": "method",
              "name": "_find",
              "return": {
                "type": {
                  "text": "AbstractControl | null"
                }
              },
              "parameters": [
                {
                  "name": "_name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "bind",
              "return": {
                "type": {
                  "text": "DirectiveResult"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string | string[]"
                  },
                  "description": "The path (property name) of the child control's name to retrieve."
                }
              ],
              "description": "Retrieves a child control given the control's name or path."
            },
            {
              "kind": "method",
              "name": "getRawValue",
              "return": {
                "type": {
                  "text": "TValue"
                }
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "patchValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "TValue"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "TRawValue"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "ValidatorFn[]"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "TValue"
              },
              "privacy": "protected"
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "bind",
              "return": {
                "type": {
                  "text": "DirectiveResult"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getRawValue",
              "return": {
                "type": {
                  "text": "TValue"
                }
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "TRawValue"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "patchValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "TValue"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_find",
              "return": {
                "type": {
                  "text": "AbstractControl | null"
                }
              },
              "parameters": [
                {
                  "name": "_name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string | string[]"
                  },
                  "description": "The path (property name) of the child control's name to retrieve."
                }
              ],
              "description": "Retrieves a child control given the control's name or path."
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "TValue"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "ValidatorFn[]"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "TValue"
              },
              "privacy": "protected"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AbstractControl",
          "declaration": {
            "name": "AbstractControl",
            "module": "src/abstract-control.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/accessors.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "accessors",
          "return": {
            "type": {
              "text": "Accessor | undefined"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "accessors",
          "declaration": {
            "name": "accessors",
            "module": "src/accessors.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/bind-directive.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BindDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "AbstractControl | null"
              },
              "default": "null"
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "package": "lit/async-directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "AbstractControl | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "bind"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BindDirective",
          "declaration": {
            "name": "BindDirective",
            "module": "src/bind-directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "bind",
          "declaration": {
            "name": "bind",
            "module": "src/bind-directive.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/form-builder.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormBuilder",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormBuilder",
          "declaration": {
            "name": "FormBuilder",
            "module": "src/form-builder.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/form-control.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormControl",
          "members": [
            {
              "kind": "method",
              "name": "_find",
              "return": {
                "type": {
                  "text": "AbstractControl | null"
                }
              },
              "parameters": [
                {
                  "name": "_name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "bind",
              "return": {
                "type": {
                  "text": "DirectiveResult"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "T"
              },
              "readonly": true,
              "default": "value"
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string | string[]"
                  },
                  "description": "The path (property name) of the child control's name to retrieve."
                }
              ],
              "description": "Retrieves a child control given the control's name or path.",
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRawValue",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "patchValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "ValidatorFn[]"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "TValue"
              },
              "privacy": "protected",
              "default": "value",
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            }
          ],
          "superclass": {
            "name": "AbstractControl",
            "module": "/src/abstract-control.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "bind",
              "return": {
                "type": {
                  "text": "DirectiveResult"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRawValue",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "patchValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "_find",
              "return": {
                "type": {
                  "text": "AbstractControl | null"
                }
              },
              "parameters": [
                {
                  "name": "_name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string | string[]"
                  },
                  "description": "The path (property name) of the child control's name to retrieve."
                }
              ],
              "description": "Retrieves a child control given the control's name or path.",
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "T"
              },
              "readonly": true,
              "default": "value"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "TValue"
              },
              "privacy": "protected",
              "default": "value",
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "TValue"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "ValidatorFn[]"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControl",
          "declaration": {
            "name": "FormControl",
            "module": "src/form-control.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/form-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormGroup",
          "members": [
            {
              "kind": "method",
              "name": "_find",
              "return": {
                "type": {
                  "text": "AbstractControl | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "bind",
              "return": {
                "type": {
                  "text": "DirectiveResult"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string | string[]"
                  },
                  "description": "The path (property name) of the child control's name to retrieve."
                }
              ],
              "description": "Retrieves a child control given the control's name or path.",
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRawValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "patchValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "ValidatorFn[]"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "TValue"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            }
          ],
          "superclass": {
            "name": "AbstractControl",
            "module": "/src/abstract-control.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "bind",
              "return": {
                "type": {
                  "text": "DirectiveResult"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRawValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "patchValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "_find",
              "return": {
                "type": {
                  "text": "AbstractControl | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string | string[]"
                  },
                  "description": "The path (property name) of the child control's name to retrieve."
                }
              ],
              "description": "Retrieves a child control given the control's name or path.",
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "TValue"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "ValidatorFn[]"
              },
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "TValue"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AbstractControl",
                "module": "src/abstract-control.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormGroup",
          "declaration": {
            "name": "FormGroup",
            "module": "src/form-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/validators.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Validators",
          "members": [
            {
              "kind": "method",
              "name": "maxLength",
              "static": true,
              "return": {
                "type": {
                  "text": "ValidatorFn"
                }
              },
              "parameters": [
                {
                  "name": "maxLength",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "minLength",
              "static": true,
              "return": {
                "type": {
                  "text": "ValidatorFn"
                }
              },
              "parameters": [
                {
                  "name": "minLength",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "required",
              "static": true,
              "return": {
                "type": {
                  "text": "ValidatorFn"
                }
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "required",
              "static": true,
              "return": {
                "type": {
                  "text": "ValidatorFn"
                }
              }
            },
            {
              "kind": "method",
              "name": "minLength",
              "static": true,
              "return": {
                "type": {
                  "text": "ValidatorFn"
                }
              },
              "parameters": [
                {
                  "name": "minLength",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "maxLength",
              "static": true,
              "return": {
                "type": {
                  "text": "ValidatorFn"
                }
              },
              "parameters": [
                {
                  "name": "maxLength",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Validators",
          "declaration": {
            "name": "Validators",
            "module": "src/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/async-directive.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/async-directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-elements.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directive-helpers.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directive-helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directive.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/experimental-hydrate-support.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-element/experimental-hydrate-support.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/experimental-hydrate.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/experimental-hydrate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/html.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-element/lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/is-server.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/static-html.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/static.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-elements.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/experimental-hydrate-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/lit-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "UpdatingElement",
          "type": {
            "text": "typeof ReactiveElement"
          }
        },
        {
          "kind": "class",
          "description": "Base element class that manages element properties and attributes, and\nrenders a lit-html template.\n\nTo define a component, subclass `LitElement` and implement a\n`render` method to provide the component's template. Define properties\nusing the {@linkcode LitElement.properties properties} property or the\n{@linkcode property} decorator.",
          "name": "LitElement",
          "members": [
            {
              "kind": "field",
              "name": "['_$litElement$']",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "['finalized']",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Ensure this class is marked as `finalized` as an optimization ensuring\nit will not needlessly try to `finalize`.\n\nNote this property name is a string to prevent breaking Closure JS Compiler\noptimizations. See @lit/reactive-element for more information."
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "ReactiveElement",
            "package": "@lit/reactive-element"
          },
          "methods": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "['finalized']",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Ensure this class is marked as `finalized` as an optimization ensuring\nit will not needlessly try to `finalize`.\n\nNote this property name is a string to prevent breaking Closure JS Compiler\noptimizations. See @lit/reactive-element for more information."
            },
            {
              "kind": "field",
              "name": "['_$litElement$']",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "__childPart",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__attributeToPropertyMap",
              "privacy": "private",
              "static": true,
              "description": "Maps attribute names to properties; for example `foobar` attribute to\n`fooBar` property. Created lazily on user subclasses when finalizing the\nclass.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__reactivePropertyKeys",
              "privacy": "private",
              "static": true,
              "description": "The set of properties defined by this class that caused an accessor to be\nadded during `createProperty`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__attributeNameForProperty",
              "privacy": "private",
              "static": true,
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__updatePromise",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperties",
              "privacy": "private",
              "description": "Map with keys of properties that should be reflected when updated.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "privacy": "private",
              "description": "Name of currently reflecting property",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__controllers",
              "privacy": "private",
              "description": "Set of controllers.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__initialize",
              "privacy": "private",
              "description": "Internal only override point for customizing work done when elements\nare constructed.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__saveInstanceProperties",
              "privacy": "private",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__propertyToAttribute",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__enqueueUpdate",
              "privacy": "private",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__markUpdated",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "{\n    _$attributeToProperty: (el: LitElement, name: string, value: string | null) => void;\n    _$changedProperties: (el: LitElement) => any;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-html, since this module re-exports all of lit-html.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "UpdatingElement",
          "declaration": {
            "name": "UpdatingElement",
            "module": "node_modules/lit-element/lit-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "LitElement",
          "declaration": {
            "name": "LitElement",
            "module": "node_modules/lit-element/lit-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "node_modules/lit-element/lit-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/private-ssr-support.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "{\n    attributeToProperty: (el: import(\"./lit-element.js\").LitElement, name: string, value: string | null) => void;\n    changedProperties: (el: import(\"./lit-element.js\").LitElement) => any;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "node_modules/lit-element/private-ssr-support.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/async-directive.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An abstract `Directive` base class whose `disconnected` method will be\ncalled when the part containing the directive is cleared as a result of\nre-rendering, or when the user calls `part.setConnected(false)` on\na part that was previously rendered containing the directive (as happens\nwhen e.g. a LitElement disconnects from the DOM).\n\nIf `part.setConnected(true)` is subsequently called on a\ncontaining part, the directive's `reconnected` method will be called prior\nto its next `update`/`render` callbacks. When implementing `disconnected`,\n`reconnected` should also be implemented to be compatible with reconnection.\n\nNote that updates may occur while the directive is disconnected. As such,\ndirectives should generally check the `this.isConnected` flag during\nrender/update to determine whether it is safe to subscribe to resources\nthat may prevent garbage collection.",
          "name": "AsyncDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render."
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive."
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`."
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields"
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`."
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render."
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive."
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directive.js"
          }
        },
        {
          "kind": "js",
          "name": "AsyncDirective",
          "declaration": {
            "name": "AsyncDirective",
            "module": "node_modules/lit-html/async-directive.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directive-helpers.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isPrimitive",
          "type": {
            "text": "(value: unknown) => value is Primitive"
          },
          "description": "Tests if a value is a primitive value.\n\nSee https://tc39.github.io/ecma262/#sec-typeof-operator"
        },
        {
          "kind": "variable",
          "name": "TemplateResultType",
          "type": {
            "text": "{\n    readonly HTML: 1;\n    readonly SVG: 2;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "isTemplateResult",
          "type": {
            "text": "IsTemplateResult"
          },
          "description": "Tests if a value is a TemplateResult or a CompiledTemplateResult."
        },
        {
          "kind": "variable",
          "name": "isCompiledTemplateResult",
          "type": {
            "text": "(value: unknown) => value is CompiledTemplateResult"
          },
          "description": "Tests if a value is a CompiledTemplateResult."
        },
        {
          "kind": "variable",
          "name": "isDirectiveResult",
          "type": {
            "text": "(value: unknown) => value is DirectiveResult<DirectiveClass>"
          },
          "description": "Tests if a value is a DirectiveResult."
        },
        {
          "kind": "variable",
          "name": "getDirectiveClass",
          "type": {
            "text": "(value: unknown) => DirectiveClass | undefined"
          },
          "description": "Retrieves the Directive class for a DirectiveResult"
        },
        {
          "kind": "variable",
          "name": "isSingleExpression",
          "type": {
            "text": "(part: PartInfo) => boolean"
          },
          "description": "Tests whether a part has only a single-expression with no strings to\ninterpolate between.\n\nOnly AttributePart and PropertyPart can have multiple expressions.\nMulti-expression parts have a `strings` property and single-expression\nparts do not."
        },
        {
          "kind": "variable",
          "name": "insertPart",
          "type": {
            "text": "(containerPart: import(\"./lit-html.js\").ChildPart, refPart?: import(\"./lit-html.js\").ChildPart | undefined, part?: import(\"./lit-html.js\").ChildPart | undefined) => import(\"./lit-html.js\").ChildPart"
          },
          "description": "Inserts a ChildPart into the given container ChildPart's DOM, either at the\nend of the container ChildPart, or before the optional `refPart`.\n\nThis does not add the part to the containerPart's committed value. That must\nbe done by callers.",
          "parameters": [
            {
              "description": "Part within which to add the new ChildPart",
              "name": "containerPart"
            },
            {
              "description": "Part before which to add the new ChildPart; when omitted the\npart added to the end of the `containerPart`",
              "name": "refPart"
            },
            {
              "description": "Part to insert, or undefined to create a new part",
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "setChildPartValue",
          "type": {
            "text": "<T extends import(\"./lit-html.js\").ChildPart>(part: T, value: unknown, directiveParent?: DirectiveParent) => T"
          },
          "description": "Sets the value of a Part.\n\nNote that this should only be used to set/update the value of user-created\nparts (i.e. those created using `insertPart`); it should not be used\nby directives to set the value of the directive's container part. Directives\nshould return a value from `update`/`render` to update their part state.\n\nFor directives that require setting their part value asynchronously, they\nshould extend `AsyncDirective` and call `this.setValue()`.",
          "parameters": [
            {
              "description": "Part to set",
              "name": "part"
            },
            {
              "description": "Value to set",
              "name": "value"
            },
            {
              "description": "For `AttributePart`s, the index to set",
              "name": "index"
            },
            {
              "description": "Used internally; should not be set by user",
              "name": "directiveParent"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "setCommittedValue",
          "type": {
            "text": "(part: Part, value?: unknown) => unknown"
          },
          "description": "Sets the committed value of a ChildPart directly without triggering the\ncommit stage of the part.\n\nThis is useful in cases where a directive needs to update the part such\nthat the next update detects a value change or not. When value is omitted,\nthe next update will be guaranteed to be detected as a change.",
          "parameters": [
            {
              "name": "part"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "getCommittedValue",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => unknown"
          },
          "description": "Returns the committed value of a ChildPart.\n\nThe committed value is used for change detection and efficient updates of\nthe part. It can differ from the value set by the template or directive in\ncases where the template value is transformed before being committed.\n\n- `TemplateResult`s are committed as a `TemplateInstance`\n- Iterables are committed as `Array<ChildPart>`\n- All other types are committed as the template value or value returned or\n  set by a directive.",
          "parameters": [
            {
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "removePart",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => void"
          },
          "description": "Removes a ChildPart from the DOM, including any of its content.",
          "parameters": [
            {
              "description": "The Part to remove",
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "clearPart",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => void"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isPrimitive",
          "declaration": {
            "name": "isPrimitive",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateResultType",
          "declaration": {
            "name": "TemplateResultType",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isTemplateResult",
          "declaration": {
            "name": "isTemplateResult",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isCompiledTemplateResult",
          "declaration": {
            "name": "isCompiledTemplateResult",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDirectiveResult",
          "declaration": {
            "name": "isDirectiveResult",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDirectiveClass",
          "declaration": {
            "name": "getDirectiveClass",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSingleExpression",
          "declaration": {
            "name": "isSingleExpression",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "insertPart",
          "declaration": {
            "name": "insertPart",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "setChildPartValue",
          "declaration": {
            "name": "setChildPartValue",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "setCommittedValue",
          "declaration": {
            "name": "setCommittedValue",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCommittedValue",
          "declaration": {
            "name": "getCommittedValue",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "removePart",
          "declaration": {
            "name": "removePart",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "clearPart",
          "declaration": {
            "name": "clearPart",
            "module": "node_modules/lit-html/directive-helpers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directive.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "PartType",
          "type": {
            "text": "{\n    readonly ATTRIBUTE: 1;\n    readonly CHILD: 2;\n    readonly PROPERTY: 3;\n    readonly BOOLEAN_ATTRIBUTE: 4;\n    readonly EVENT: 5;\n    readonly ELEMENT: 6;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "directive",
          "type": {
            "text": "<C extends DirectiveClass>(c: C) => (...values: Parameters<InstanceType<C>[\"render\"]>) => DirectiveResult<C>"
          },
          "description": "Creates a user-facing directive function from a Directive class. This\nfunction has the same parameters as the directive's render() method."
        },
        {
          "kind": "class",
          "description": "Base class for creating custom directives. Users should extend this class,\nimplement `render` and/or `update`, and then pass their subclass to\n`directive`.",
          "name": "Directive",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ],
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AttributePart",
          "declaration": {
            "name": "AttributePart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "BooleanAttributePart",
          "declaration": {
            "name": "BooleanAttributePart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "ChildPart",
          "declaration": {
            "name": "ChildPart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "ElementPart",
          "declaration": {
            "name": "ElementPart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "EventPart",
          "declaration": {
            "name": "EventPart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "Part",
          "declaration": {
            "name": "Part",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "PropertyPart",
          "declaration": {
            "name": "PropertyPart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "PartType",
          "declaration": {
            "name": "PartType",
            "module": "node_modules/lit-html/directive.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "module": "node_modules/lit-html/directive.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Directive",
          "declaration": {
            "name": "Directive",
            "module": "node_modules/lit-html/directive.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/experimental-hydrate.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "hydrate",
          "type": {
            "text": "(rootValue: unknown, container: Element | DocumentFragment, options?: Partial<RenderOptions>) => void"
          },
          "description": "hydrate() operates on a container with server-side rendered content and\nrestores the client side data structures needed for lit-html updates such as\nTemplateInstances and Parts. After calling `hydrate`, lit-html will behave as\nif it initially rendered the DOM, and any subsequent updates will update\nefficiently, the same as if lit-html had rendered the DOM on the client.\n\nhydrate() must be called on DOM that adheres the to lit-ssr structure for\nparts. ChildParts must be represented with both a start and end comment\nmarker, and ChildParts that contain a TemplateInstance must have the template\ndigest written into the comment data.\n\nSince render() encloses its output in a ChildPart, there must always be a root\nChildPart.\n\nExample (using for # ... for annotations in HTML)\n\nGiven this input:\n\n  html`<div class=${x}>${y}</div>`\n\nThe SSR DOM is:\n\n  <!--lit-part AEmR7W+R0Ak=-->  # Start marker for the root ChildPart created\n                                # by render(). Includes the digest of the\n                                # template\n  <div class=\"TEST_X\">\n    <!--lit-node 0--> # Indicates there are attribute bindings here\n                          # The number is the depth-first index of the parent\n                          # node in the template.\n    <!--lit-part-->  # Start marker for the ${x} expression\n    TEST_Y\n    <!--/lit-part-->  # End marker for the ${x} expression\n  </div>\n\n  <!--/lit-part-->  # End marker for the root ChildPart",
          "parameters": [
            {
              "name": "rootValue"
            },
            {
              "name": "container"
            },
            {
              "name": "userOptions"
            }
          ],
          "deprecated": "This has been moved to `@lit-labs/ssr-client` and will be removed\nin a future release."
        },
        {
          "kind": "variable",
          "name": "digestForTemplateResult",
          "type": {
            "text": "(templateResult: TemplateResult) => string"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hydrate",
          "declaration": {
            "name": "hydrate",
            "module": "node_modules/lit-html/experimental-hydrate.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "digestForTemplateResult",
          "declaration": {
            "name": "digestForTemplateResult",
            "module": "node_modules/lit-html/experimental-hydrate.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/is-server.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isServer",
          "type": {
            "text": "boolean"
          },
          "default": "false",
          "description": "A boolean that will be `true` in server environments like Node, and `false`\nin browser environments. Note that your server environment or toolchain must\nsupport the `\"node\"` export condition for this to be `true`.\n\nThis can be used when authoring components to change behavior based on\nwhether or not the component is executing in an SSR context."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isServer",
          "declaration": {
            "name": "isServer",
            "module": "node_modules/lit-html/is-server.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/lit-html.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "html",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<1>"
          },
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\n```ts\nconst header = (title: string) => html`<h1>${title}</h1>`;\n```\n\nThe `html` tag returns a description of the DOM to render as a value. It is\nlazy, meaning no work is done until the template is rendered. When rendering,\nif a template comes from the same expression as a previously rendered result,\nit's efficiently updated instead of replaced."
        },
        {
          "kind": "variable",
          "name": "svg",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<2>"
          },
          "description": "Interprets a template literal as an SVG fragment that can efficiently\nrender to and update a container.\n\n```ts\nconst rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n\nconst myImage = html`\n  <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n    ${rect}\n  </svg>`;\n```\n\nThe `svg` *tag function* should only be used for SVG fragments, or elements\nthat would be contained **inside** an `<svg>` HTML element. A common error is\nplacing an `<svg>` *element* in a template tagged with the `svg` tag\nfunction. The `<svg>` element is an HTML element and should be used within a\ntemplate tagged with the {@linkcode html} tag function.\n\nIn LitElement usage, it's invalid to return an SVG fragment from the\n`render()` method, as the SVG fragment will be contained within the element's\nshadow root and thus cannot be used within an `<svg>` HTML element."
        },
        {
          "kind": "variable",
          "name": "noChange",
          "type": {
            "text": "unique symbol"
          },
          "description": "A sentinel value that signals that a value was handled by a directive and\nshould not be written to the DOM."
        },
        {
          "kind": "variable",
          "name": "nothing",
          "type": {
            "text": "unique symbol"
          },
          "description": "A sentinel value that signals a ChildPart to fully clear its content.\n\n```ts\nconst button = html`${\n user.isAdmin\n   ? html`<button>DELETE</button>`\n   : nothing\n}`;\n```\n\nPrefer using `nothing` over other falsy values as it provides a consistent\nbehavior between various expression binding contexts.\n\nIn child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\nsame and render no nodes. In attribute expressions, `nothing` _removes_ the\nattribute, while `undefined` and `null` will render an empty string. In\nproperty expressions `nothing` becomes `undefined`."
        },
        {
          "kind": "class",
          "description": "An updateable instance of a Template. Holds references to the Parts used to\nupdate the template instance.",
          "name": "TemplateInstance",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ChildPart",
          "members": [
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "AttributePart",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "PropertyPart",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "node_modules/lit-html/lit-html.d.ts"
          },
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "BooleanAttributePart",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "node_modules/lit-html/lit-html.d.ts"
          },
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "EventPart",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "node_modules/lit-html/lit-html.d.ts"
          },
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ElementPart",
          "members": [
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "{\n    _boundAttributeSuffix: string;\n    _marker: string;\n    _markerMatch: string;\n    _HTML_RESULT: number;\n    _getTemplateHtml: (strings: TemplateStringsArray, type: ResultType) => [TrustedHTML, Array<string | undefined>];\n    _TemplateInstance: typeof TemplateInstance;\n    _isIterable: (value: unknown) => value is Iterable<unknown>;\n    _resolveDirective: typeof resolveDirective;\n    _ChildPart: typeof ChildPart;\n    _AttributePart: typeof AttributePart;\n    _BooleanAttributePart: typeof BooleanAttributePart;\n    _EventPart: typeof EventPart;\n    _PropertyPart: typeof PropertyPart;\n    _ElementPart: typeof ElementPart;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-element, which re-exports all of lit-html.",
          "privacy": "private"
        },
        {
          "kind": "variable",
          "name": "render",
          "type": {
            "text": "{\n    (value: unknown, container: HTMLElement | DocumentFragment, options?: RenderOptions): RootPart;\n    setSanitizer: (newSanitizer: SanitizerFactory) => void;\n    createSanitizer: SanitizerFactory;\n    _testOnlyClearSanitizerFactoryDoNotCallOrElse: () => void;\n}"
          },
          "description": "Renders a value, usually a lit-html TemplateResult, to the container.\n\nThis example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\nit to the container `document.body`.\n\n```js\nimport {html, render} from 'lit';\n\nconst name = \"Zoe\";\nrender(html`<p>Hello, ${name}!</p>`, document.body);\n```",
          "parameters": [
            {
              "description": "Any [renderable\nvalue](https://lit.dev/docs/templates/expressions/#child-expressions),\ntypically a {@linkcode TemplateResult} created by evaluating a template tag\nlike {@linkcode html} or {@linkcode svg}.",
              "name": "value"
            },
            {
              "description": "A DOM container to render to. The first render will append\nthe rendered value to the container, and subsequent renders will\nefficiently update the rendered value if the same result type was\npreviously rendered there.",
              "name": "container"
            },
            {
              "description": "See {@linkcode RenderOptions} for options documentation.",
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "noChange",
          "declaration": {
            "name": "noChange",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "nothing",
          "declaration": {
            "name": "nothing",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateInstance",
          "declaration": {
            "name": "TemplateInstance",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ChildPart",
          "declaration": {
            "name": "ChildPart",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AttributePart",
          "declaration": {
            "name": "AttributePart",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PropertyPart",
          "declaration": {
            "name": "PropertyPart",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "BooleanAttributePart",
          "declaration": {
            "name": "BooleanAttributePart",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventPart",
          "declaration": {
            "name": "EventPart",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ElementPart",
          "declaration": {
            "name": "ElementPart",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "render",
          "declaration": {
            "name": "render",
            "module": "node_modules/lit-html/lit-html.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/private-ssr-support.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "{\n    boundAttributeSuffix: string;\n    marker: string;\n    markerMatch: string;\n    HTML_RESULT: number;\n    getTemplateHtml: (strings: TemplateStringsArray, type: 1 | 2) => [import(\"trusted-types/lib/index.js\").TrustedHTML, (string | undefined)[]];\n    overrideDirectiveResolve: (directiveClass: new (part: PartInfo) => Directive & {\n        render(): unknown;\n    }, resolveOverrideFn: (directive: Directive, values: unknown[]) => unknown) => {\n        new (part: PartInfo): {\n            _$resolve(this: Directive, _part: Part, values: unknown[]): unknown;\n            __part: Part;\n            __attributeIndex: number | undefined;\n            __directive?: Directive | undefined;\n            _$parent: Disconnectable;\n            _$disconnectableChildren?: Set<Disconnectable> | undefined;\n            _$notifyDirectiveConnectionChanged?(isConnected: boolean): void;\n            readonly _$isConnected: boolean;\n            _$initialize(part: Part, parent: Disconnectable, attributeIndex: number | undefined): void;\n            render: ((...props: unknown[]) => unknown) & (() => unknown);\n            update(_part: Part, props: unknown[]): unknown;\n        };\n    };\n    setDirectiveClass(value: DirectiveResult, directiveClass: DirectiveClass): void;\n    getAttributePartCommittedValue: (part: AttributePart, value: unknown, index: number | undefined) => unknown;\n    connectedDisconnectable: (props?: object) => Disconnectable;\n    resolveDirective: (part: ChildPart | AttributePart | ElementPart, value: unknown, parent?: import(\"./lit-html.js\").DirectiveParent, attributeIndex?: number | undefined) => unknown;\n    AttributePart: typeof AttributePart;\n    PropertyPart: typeof PropertyPart;\n    BooleanAttributePart: typeof BooleanAttributePart;\n    EventPart: typeof EventPart;\n    ElementPart: typeof ElementPart;\n    TemplateInstance: typeof TemplateInstance;\n    isIterable: (value: unknown) => value is Iterable<unknown>;\n    ChildPart: typeof ChildPart;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "node_modules/lit-html/private-ssr-support.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/static.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "unsafeStatic",
          "type": {
            "text": "(value: string) => StaticValue"
          },
          "description": "Wraps a string so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nNote that this function is unsafe to use on untrusted content, as it will be\ndirectly parsed into HTML. Do not pass user input to this function\nwithout sanitizing it.\n\nStatic values can be changed, but they will cause a complete re-render\nsince they effectively create a new template."
        },
        {
          "kind": "variable",
          "name": "literal",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => StaticValue"
          },
          "description": "Tags a string literal so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nThe only values that may be used in template expressions are other tagged\n`literal` results or `unsafeStatic` values (note that untrusted content\nshould never be passed to `unsafeStatic`).\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nStatic values can be changed, but they will cause a complete re-render since\nthey effectively create a new template."
        },
        {
          "kind": "variable",
          "name": "withStatic",
          "type": {
            "text": "(coreTag: typeof coreHtml | typeof coreSvg) => (strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Wraps a lit-html template tag (`html` or `svg`) to add static value support."
        },
        {
          "kind": "variable",
          "name": "html",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        },
        {
          "kind": "variable",
          "name": "svg",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Interprets a template literal as an SVG template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeStatic",
          "declaration": {
            "name": "unsafeStatic",
            "module": "node_modules/lit-html/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "literal",
          "declaration": {
            "name": "literal",
            "module": "node_modules/lit-html/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "withStatic",
          "declaration": {
            "name": "withStatic",
            "module": "node_modules/lit-html/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "node_modules/lit-html/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "node_modules/lit-html/static.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/stories/control.stories.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ControlForm",
          "members": [
            {
              "kind": "field",
              "name": "['_$litElement$']",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "inheritedFrom": {
                "name": "LitElement",
                "module": "node_modules/lit-element/development/lit-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "['finalized']",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Ensure this class is marked as `finalized` as an optimization ensuring\nit will not needlessly try to `finalize`.\n\nNote this property name is a string to prevent breaking Closure JS Compiler\noptimizations. See @lit/reactive-element for more information.",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "node_modules/lit-element/development/lit-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "default": "new FormControl(this, '')"
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "LitElement",
                "module": "node_modules/lit-element/development/lit-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "control-form",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "name",
              "default": "new FormControl(this, '')"
            },
            {
              "kind": "field",
              "name": "['finalized']",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Ensure this class is marked as `finalized` as an optimization ensuring\nit will not needlessly try to `finalize`.\n\nNote this property name is a string to prevent breaking Closure JS Compiler\noptimizations. See @lit/reactive-element for more information.",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "node_modules/lit-element/development/lit-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "['_$litElement$']",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "inheritedFrom": {
                "name": "LitElement",
                "module": "node_modules/lit-element/development/lit-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "LitElement",
                "module": "node_modules/lit-element/development/lit-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__childPart",
              "privacy": "private",
              "inheritedFrom": {
                "name": "LitElement",
                "module": "node_modules/lit-element/development/lit-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__attributeToPropertyMap",
              "privacy": "private",
              "static": true,
              "description": "Maps attribute names to properties; for example `foobar` attribute to\n`fooBar` property. Created lazily on user subclasses when finalizing the\nclass.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__reactivePropertyKeys",
              "privacy": "private",
              "static": true,
              "description": "The set of properties defined by this class that caused an accessor to be\nadded during `createProperty`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__attributeNameForProperty",
              "privacy": "private",
              "static": true,
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__updatePromise",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperties",
              "privacy": "private",
              "description": "Map with keys of properties that should be reflected when updated.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "privacy": "private",
              "description": "Name of currently reflecting property",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__controllers",
              "privacy": "private",
              "description": "Set of controllers.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__initialize",
              "privacy": "private",
              "description": "Internal only override point for customizing work done when elements\nare constructed.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__saveInstanceProperties",
              "privacy": "private",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__propertyToAttribute",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__enqueueUpdate",
              "privacy": "private",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__markUpdated",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "Blank",
          "type": {
            "text": "Story"
          },
          "default": "{}"
        },
        {
          "kind": "variable",
          "name": "InitialValue",
          "type": {
            "text": "Story"
          },
          "default": "{\n  args: {\n    value: 'Hello, world!'\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "control-form",
          "declaration": {
            "name": "ControlForm",
            "module": "src/stories/control.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/stories/control.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Blank",
          "declaration": {
            "name": "Blank",
            "module": "src/stories/control.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InitialValue",
          "declaration": {
            "name": "InitialValue",
            "module": "src/stories/control.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/stories/group.stories.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/stories/group.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/controllers/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/data-source/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/decorators/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/directives/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/mixins/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/css.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/path.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/popover.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/string.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/types.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/validators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/css-tag.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "supportsAdoptingStyleSheets",
          "type": {
            "text": "boolean"
          },
          "description": "Whether the current browser supports `adoptedStyleSheets`."
        },
        {
          "kind": "class",
          "description": "A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n\nCSSResult is the return value of `css`-tagged template literals and\n`unsafeCSS()`. In order to ensure that CSSResults are only created via the\n`css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.",
          "name": "CSSResult",
          "members": [
            {
              "kind": "field",
              "name": "['_$cssResult$']",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "cssText",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styleSheet",
              "type": {
                "text": "CSSStyleSheet | undefined"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "['_$cssResult$']",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "cssText",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_styleSheet",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_strings",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "styleSheet",
              "type": {
                "text": "CSSStyleSheet | undefined"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "variable",
          "name": "unsafeCSS",
          "type": {
            "text": "(value: unknown) => CSSResult"
          },
          "description": "Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n\nThis is unsafe because untrusted CSS text can be used to phone home\nor exfiltrate data to an attacker controlled site. Take care to only use\nthis with trusted input."
        },
        {
          "kind": "variable",
          "name": "css",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: (CSSResultGroup | number)[]) => CSSResult"
          },
          "description": "A template literal tag which can be used with LitElement's\n{@linkcode LitElement.styles} property to set element styles.\n\nFor security reasons, only literal string values and number may be used in\nembedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\nmay be used inside an expression."
        },
        {
          "kind": "variable",
          "name": "adoptStyles",
          "type": {
            "text": "(renderRoot: ShadowRoot, styles: Array<CSSResultOrNative>) => void"
          },
          "description": "Applies the given styles to a `shadowRoot`. When Shadow DOM is\navailable but `adoptedStyleSheets` is not, styles are appended to the\n`shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\nNote, when shimming is used, any styles that are subsequently placed into\nthe shadowRoot should be placed *before* any shimmed adopted styles. This\nwill match spec behavior that gives adopted sheets precedence over styles in\nshadowRoot."
        },
        {
          "kind": "variable",
          "name": "getCompatibleStyle",
          "type": {
            "text": "(s: CSSResultOrNative) => CSSResultOrNative"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "supportsAdoptingStyleSheets",
          "declaration": {
            "name": "supportsAdoptingStyleSheets",
            "module": "node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CSSResult",
          "declaration": {
            "name": "CSSResult",
            "module": "node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unsafeCSS",
          "declaration": {
            "name": "unsafeCSS",
            "module": "node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "css",
          "declaration": {
            "name": "css",
            "module": "node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "adoptStyles",
          "declaration": {
            "name": "adoptStyles",
            "module": "node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCompatibleStyle",
          "declaration": {
            "name": "getCompatibleStyle",
            "module": "node_modules/@lit/reactive-element/css-tag.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-assigned-elements.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/reactive-controller.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/reactive-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultConverter",
          "type": {
            "text": "ComplexAttributeConverter"
          }
        },
        {
          "kind": "variable",
          "name": "notEqual",
          "type": {
            "text": "HasChanged"
          },
          "description": "Change function that returns true if `value` is different from `oldValue`.\nThis method is used as the default for a property's `hasChanged` function."
        },
        {
          "kind": "class",
          "description": "Base element class which manages element properties and attributes. When\nproperties change, the `update` method is asynchronously called. This method\nshould be supplied by subclassers to render updates as desired.",
          "name": "ReactiveElement",
          "members": [
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties."
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called."
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {"
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`."
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```"
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate."
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```"
            },
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds."
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized."
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles."
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}."
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```"
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`."
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read."
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element."
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot."
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible."
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {"
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}."
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized."
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles."
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called."
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element."
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`."
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate."
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```"
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```"
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds."
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```"
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```"
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "__attributeToPropertyMap",
              "privacy": "private",
              "static": true,
              "description": "Maps attribute names to properties; for example `foobar` attribute to\n`fooBar` property. Created lazily on user subclasses when finalizing the\nclass."
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties."
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "field",
              "name": "__reactivePropertyKeys",
              "privacy": "private",
              "static": true,
              "description": "The set of properties defined by this class that caused an accessor to be\nadded during `createProperty`."
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible."
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot."
            },
            {
              "kind": "field",
              "name": "__attributeNameForProperty",
              "privacy": "private",
              "static": true,
              "description": "Returns the property name for the given attribute `name`."
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__updatePromise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read."
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`."
            },
            {
              "kind": "field",
              "name": "__reflectingProperties",
              "privacy": "private",
              "description": "Map with keys of properties that should be reflected when updated."
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "privacy": "private",
              "description": "Name of currently reflecting property"
            },
            {
              "kind": "field",
              "name": "__controllers",
              "privacy": "private",
              "description": "Set of controllers."
            },
            {
              "kind": "field",
              "name": "__initialize",
              "privacy": "private",
              "description": "Internal only override point for customizing work done when elements\nare constructed."
            },
            {
              "kind": "field",
              "name": "__saveInstanceProperties",
              "privacy": "private",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default)."
            },
            {
              "kind": "field",
              "name": "__propertyToAttribute",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__enqueueUpdate",
              "privacy": "private",
              "description": "Sets up the element to asynchronously update."
            },
            {
              "kind": "field",
              "name": "__markUpdated",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveController",
          "declaration": {
            "name": "ReactiveController",
            "module": "./reactive-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveControllerHost",
          "declaration": {
            "name": "ReactiveControllerHost",
            "module": "./reactive-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "defaultConverter",
          "declaration": {
            "name": "defaultConverter",
            "module": "node_modules/@lit/reactive-element/reactive-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "notEqual",
          "declaration": {
            "name": "notEqual",
            "module": "node_modules/@lit/reactive-element/reactive-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveElement",
          "declaration": {
            "name": "ReactiveElement",
            "module": "node_modules/@lit/reactive-element/reactive-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/async-directive.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/async-directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-elements.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directive-helpers.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directive-helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directive.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/experimental-hydrate-support.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-element/experimental-hydrate-support.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/experimental-hydrate.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/experimental-hydrate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/html.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/index.all.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./async-directive.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directive-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directive.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/async-append.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/async-replace.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/cache.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/choose.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/class-map.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/guard.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/if-defined.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/join.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/keyed.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/live.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/map.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/range.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/ref.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/repeat.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/style-map.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/template-content.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/unsafe-html.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/unsafe-svg.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/until.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directives/when.js"
          }
        },
        {
          "kind": "js",
          "name": "staticHtml",
          "declaration": {
            "name": "html",
            "module": "./static-html.js"
          }
        },
        {
          "kind": "js",
          "name": "literal",
          "declaration": {
            "name": "literal",
            "module": "./static-html.js"
          }
        },
        {
          "kind": "js",
          "name": "staticSvg",
          "declaration": {
            "name": "svg",
            "module": "./static-html.js"
          }
        },
        {
          "kind": "js",
          "name": "unsafeStatic",
          "declaration": {
            "name": "unsafeStatic",
            "module": "./static-html.js"
          }
        },
        {
          "kind": "js",
          "name": "withStatic",
          "declaration": {
            "name": "withStatic",
            "module": "./static-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-element/lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/is-server.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/static-html.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/static.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators/custom-element.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators/event-options.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators/property.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators/query-all.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators/query-assigned-elements.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators/query-assigned-nodes.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators/query-async.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators/query.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/decorators/state.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/async-append.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/async-append.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/async-replace.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/async-replace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/cache.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/cache.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/choose.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/choose.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/class-map.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/class-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/guard.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/guard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/if-defined.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/if-defined.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/join.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/join.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/keyed.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/keyed.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/live.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/live.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/map.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/range.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/range.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/ref.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/ref.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/repeat.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/repeat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/style-map.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/style-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/template-content.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/template-content.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/unsafe-html.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/unsafe-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/unsafe-svg.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/unsafe-svg.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/until.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/until.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/directives/when.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/when.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-elements.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/experimental-hydrate-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./lit-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/lit-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "UpdatingElement",
          "type": {
            "text": "typeof ReactiveElement"
          }
        },
        {
          "kind": "class",
          "description": "Base element class that manages element properties and attributes, and\nrenders a lit-html template.\n\nTo define a component, subclass `LitElement` and implement a\n`render` method to provide the component's template. Define properties\nusing the {@linkcode LitElement.properties properties} property or the\n{@linkcode property} decorator.",
          "name": "LitElement",
          "members": [
            {
              "kind": "field",
              "name": "['_$litElement$']",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "['finalized']",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Ensure this class is marked as `finalized` as an optimization ensuring\nit will not needlessly try to `finalize`.\n\nNote this property name is a string to prevent breaking Closure JS Compiler\noptimizations. See @lit/reactive-element for more information."
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "ReactiveElement",
            "package": "@lit/reactive-element"
          },
          "methods": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "['finalized']",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Ensure this class is marked as `finalized` as an optimization ensuring\nit will not needlessly try to `finalize`.\n\nNote this property name is a string to prevent breaking Closure JS Compiler\noptimizations. See @lit/reactive-element for more information."
            },
            {
              "kind": "field",
              "name": "['_$litElement$']",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "renderOptions",
              "type": {
                "text": "RenderOptions"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "__childPart",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__attributeToPropertyMap",
              "privacy": "private",
              "static": true,
              "description": "Maps attribute names to properties; for example `foobar` attribute to\n`fooBar` property. Created lazily on user subclasses when finalizing the\nclass.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__reactivePropertyKeys",
              "privacy": "private",
              "static": true,
              "description": "The set of properties defined by this class that caused an accessor to be\nadded during `createProperty`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__attributeNameForProperty",
              "privacy": "private",
              "static": true,
              "description": "Returns the property name for the given attribute `name`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__updatePromise",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperties",
              "privacy": "private",
              "description": "Map with keys of properties that should be reflected when updated.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "privacy": "private",
              "description": "Name of currently reflecting property",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__controllers",
              "privacy": "private",
              "description": "Set of controllers.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__initialize",
              "privacy": "private",
              "description": "Internal only override point for customizing work done when elements\nare constructed.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__saveInstanceProperties",
              "privacy": "private",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__propertyToAttribute",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__enqueueUpdate",
              "privacy": "private",
              "description": "Sets up the element to asynchronously update.",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__markUpdated",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "ReactiveElement",
                "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "{\n    _$attributeToProperty: (el: LitElement, name: string, value: string | null) => void;\n    _$changedProperties: (el: LitElement) => any;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-html, since this module re-exports all of lit-html.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html"
          }
        },
        {
          "kind": "js",
          "name": "UpdatingElement",
          "declaration": {
            "name": "UpdatingElement",
            "module": "node_modules/lit-element/development/lit-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "LitElement",
          "declaration": {
            "name": "LitElement",
            "module": "node_modules/lit-element/development/lit-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "node_modules/lit-element/development/lit-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/private-ssr-support.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LE",
          "type": {
            "text": "{\n    attributeToProperty: (el: import(\"./lit-element.js\").LitElement, name: string, value: string | null) => void;\n    changedProperties: (el: import(\"./lit-element.js\").LitElement) => any;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LE object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LE",
          "declaration": {
            "name": "_$LE",
            "module": "node_modules/lit-element/development/private-ssr-support.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators/custom-element.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators/event-options.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators/property.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators/query-all.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators/query-assigned-elements.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators/query-assigned-nodes.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators/query-async.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators/query.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/decorators/state.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/async-directive.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An abstract `Directive` base class whose `disconnected` method will be\ncalled when the part containing the directive is cleared as a result of\nre-rendering, or when the user calls `part.setConnected(false)` on\na part that was previously rendered containing the directive (as happens\nwhen e.g. a LitElement disconnects from the DOM).\n\nIf `part.setConnected(true)` is subsequently called on a\ncontaining part, the directive's `reconnected` method will be called prior\nto its next `update`/`render` callbacks. When implementing `disconnected`,\n`reconnected` should also be implemented to be compatible with reconnection.\n\nNote that updates may occur while the directive is disconnected. As such,\ndirectives should generally check the `this.isConnected` flag during\nrender/update to determine whether it is safe to subscribe to resources\nthat may prevent garbage collection.",
          "name": "AsyncDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render."
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive."
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`."
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields"
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`."
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render."
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive."
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./directive.js"
          }
        },
        {
          "kind": "js",
          "name": "AsyncDirective",
          "declaration": {
            "name": "AsyncDirective",
            "module": "node_modules/lit-html/development/async-directive.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directive-helpers.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isPrimitive",
          "type": {
            "text": "(value: unknown) => value is Primitive"
          },
          "description": "Tests if a value is a primitive value.\n\nSee https://tc39.github.io/ecma262/#sec-typeof-operator"
        },
        {
          "kind": "variable",
          "name": "TemplateResultType",
          "type": {
            "text": "{\n    readonly HTML: 1;\n    readonly SVG: 2;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "isTemplateResult",
          "type": {
            "text": "IsTemplateResult"
          },
          "description": "Tests if a value is a TemplateResult or a CompiledTemplateResult."
        },
        {
          "kind": "variable",
          "name": "isCompiledTemplateResult",
          "type": {
            "text": "(value: unknown) => value is CompiledTemplateResult"
          },
          "description": "Tests if a value is a CompiledTemplateResult."
        },
        {
          "kind": "variable",
          "name": "isDirectiveResult",
          "type": {
            "text": "(value: unknown) => value is DirectiveResult<DirectiveClass>"
          },
          "description": "Tests if a value is a DirectiveResult."
        },
        {
          "kind": "variable",
          "name": "getDirectiveClass",
          "type": {
            "text": "(value: unknown) => DirectiveClass | undefined"
          },
          "description": "Retrieves the Directive class for a DirectiveResult"
        },
        {
          "kind": "variable",
          "name": "isSingleExpression",
          "type": {
            "text": "(part: PartInfo) => boolean"
          },
          "description": "Tests whether a part has only a single-expression with no strings to\ninterpolate between.\n\nOnly AttributePart and PropertyPart can have multiple expressions.\nMulti-expression parts have a `strings` property and single-expression\nparts do not."
        },
        {
          "kind": "variable",
          "name": "insertPart",
          "type": {
            "text": "(containerPart: import(\"./lit-html.js\").ChildPart, refPart?: import(\"./lit-html.js\").ChildPart | undefined, part?: import(\"./lit-html.js\").ChildPart | undefined) => import(\"./lit-html.js\").ChildPart"
          },
          "description": "Inserts a ChildPart into the given container ChildPart's DOM, either at the\nend of the container ChildPart, or before the optional `refPart`.\n\nThis does not add the part to the containerPart's committed value. That must\nbe done by callers.",
          "parameters": [
            {
              "description": "Part within which to add the new ChildPart",
              "name": "containerPart"
            },
            {
              "description": "Part before which to add the new ChildPart; when omitted the\npart added to the end of the `containerPart`",
              "name": "refPart"
            },
            {
              "description": "Part to insert, or undefined to create a new part",
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "setChildPartValue",
          "type": {
            "text": "<T extends import(\"./lit-html.js\").ChildPart>(part: T, value: unknown, directiveParent?: DirectiveParent) => T"
          },
          "description": "Sets the value of a Part.\n\nNote that this should only be used to set/update the value of user-created\nparts (i.e. those created using `insertPart`); it should not be used\nby directives to set the value of the directive's container part. Directives\nshould return a value from `update`/`render` to update their part state.\n\nFor directives that require setting their part value asynchronously, they\nshould extend `AsyncDirective` and call `this.setValue()`.",
          "parameters": [
            {
              "description": "Part to set",
              "name": "part"
            },
            {
              "description": "Value to set",
              "name": "value"
            },
            {
              "description": "For `AttributePart`s, the index to set",
              "name": "index"
            },
            {
              "description": "Used internally; should not be set by user",
              "name": "directiveParent"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "setCommittedValue",
          "type": {
            "text": "(part: Part, value?: unknown) => unknown"
          },
          "description": "Sets the committed value of a ChildPart directly without triggering the\ncommit stage of the part.\n\nThis is useful in cases where a directive needs to update the part such\nthat the next update detects a value change or not. When value is omitted,\nthe next update will be guaranteed to be detected as a change.",
          "parameters": [
            {
              "name": "part"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "getCommittedValue",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => unknown"
          },
          "description": "Returns the committed value of a ChildPart.\n\nThe committed value is used for change detection and efficient updates of\nthe part. It can differ from the value set by the template or directive in\ncases where the template value is transformed before being committed.\n\n- `TemplateResult`s are committed as a `TemplateInstance`\n- Iterables are committed as `Array<ChildPart>`\n- All other types are committed as the template value or value returned or\n  set by a directive.",
          "parameters": [
            {
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "removePart",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => void"
          },
          "description": "Removes a ChildPart from the DOM, including any of its content.",
          "parameters": [
            {
              "description": "The Part to remove",
              "name": "part"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "clearPart",
          "type": {
            "text": "(part: import(\"./lit-html.js\").ChildPart) => void"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isPrimitive",
          "declaration": {
            "name": "isPrimitive",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateResultType",
          "declaration": {
            "name": "TemplateResultType",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isTemplateResult",
          "declaration": {
            "name": "isTemplateResult",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isCompiledTemplateResult",
          "declaration": {
            "name": "isCompiledTemplateResult",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDirectiveResult",
          "declaration": {
            "name": "isDirectiveResult",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDirectiveClass",
          "declaration": {
            "name": "getDirectiveClass",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSingleExpression",
          "declaration": {
            "name": "isSingleExpression",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "insertPart",
          "declaration": {
            "name": "insertPart",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "setChildPartValue",
          "declaration": {
            "name": "setChildPartValue",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "setCommittedValue",
          "declaration": {
            "name": "setCommittedValue",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCommittedValue",
          "declaration": {
            "name": "getCommittedValue",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "removePart",
          "declaration": {
            "name": "removePart",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "clearPart",
          "declaration": {
            "name": "clearPart",
            "module": "node_modules/lit-html/development/directive-helpers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directive.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "PartType",
          "type": {
            "text": "{\n    readonly ATTRIBUTE: 1;\n    readonly CHILD: 2;\n    readonly PROPERTY: 3;\n    readonly BOOLEAN_ATTRIBUTE: 4;\n    readonly EVENT: 5;\n    readonly ELEMENT: 6;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "directive",
          "type": {
            "text": "<C extends DirectiveClass>(c: C) => (...values: Parameters<InstanceType<C>[\"render\"]>) => DirectiveResult<C>"
          },
          "description": "Creates a user-facing directive function from a Directive class. This\nfunction has the same parameters as the directive's render() method."
        },
        {
          "kind": "class",
          "description": "Base class for creating custom directives. Users should extend this class,\nimplement `render` and/or `update`, and then pass their subclass to\n`directive`.",
          "name": "Directive",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ],
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AttributePart",
          "declaration": {
            "name": "AttributePart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "BooleanAttributePart",
          "declaration": {
            "name": "BooleanAttributePart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "ChildPart",
          "declaration": {
            "name": "ChildPart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "ElementPart",
          "declaration": {
            "name": "ElementPart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "EventPart",
          "declaration": {
            "name": "EventPart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "Part",
          "declaration": {
            "name": "Part",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "PropertyPart",
          "declaration": {
            "name": "PropertyPart",
            "module": "./lit-html.js"
          }
        },
        {
          "kind": "js",
          "name": "PartType",
          "declaration": {
            "name": "PartType",
            "module": "node_modules/lit-html/development/directive.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "directive",
          "declaration": {
            "name": "directive",
            "module": "node_modules/lit-html/development/directive.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Directive",
          "declaration": {
            "name": "Directive",
            "module": "node_modules/lit-html/development/directive.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/experimental-hydrate.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "hydrate",
          "type": {
            "text": "(rootValue: unknown, container: Element | DocumentFragment, options?: Partial<RenderOptions>) => void"
          },
          "description": "hydrate() operates on a container with server-side rendered content and\nrestores the client side data structures needed for lit-html updates such as\nTemplateInstances and Parts. After calling `hydrate`, lit-html will behave as\nif it initially rendered the DOM, and any subsequent updates will update\nefficiently, the same as if lit-html had rendered the DOM on the client.\n\nhydrate() must be called on DOM that adheres the to lit-ssr structure for\nparts. ChildParts must be represented with both a start and end comment\nmarker, and ChildParts that contain a TemplateInstance must have the template\ndigest written into the comment data.\n\nSince render() encloses its output in a ChildPart, there must always be a root\nChildPart.\n\nExample (using for # ... for annotations in HTML)\n\nGiven this input:\n\n  html`<div class=${x}>${y}</div>`\n\nThe SSR DOM is:\n\n  <!--lit-part AEmR7W+R0Ak=-->  # Start marker for the root ChildPart created\n                                # by render(). Includes the digest of the\n                                # template\n  <div class=\"TEST_X\">\n    <!--lit-node 0--> # Indicates there are attribute bindings here\n                          # The number is the depth-first index of the parent\n                          # node in the template.\n    <!--lit-part-->  # Start marker for the ${x} expression\n    TEST_Y\n    <!--/lit-part-->  # End marker for the ${x} expression\n  </div>\n\n  <!--/lit-part-->  # End marker for the root ChildPart",
          "parameters": [
            {
              "name": "rootValue"
            },
            {
              "name": "container"
            },
            {
              "name": "userOptions"
            }
          ],
          "deprecated": "This has been moved to `@lit-labs/ssr-client` and will be removed\nin a future release."
        },
        {
          "kind": "variable",
          "name": "digestForTemplateResult",
          "type": {
            "text": "(templateResult: TemplateResult) => string"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hydrate",
          "declaration": {
            "name": "hydrate",
            "module": "node_modules/lit-html/development/experimental-hydrate.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "digestForTemplateResult",
          "declaration": {
            "name": "digestForTemplateResult",
            "module": "node_modules/lit-html/development/experimental-hydrate.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/is-server.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isServer",
          "type": {
            "text": "boolean"
          },
          "default": "false",
          "description": "A boolean that will be `true` in server environments like Node, and `false`\nin browser environments. Note that your server environment or toolchain must\nsupport the `\"node\"` export condition for this to be `true`.\n\nThis can be used when authoring components to change behavior based on\nwhether or not the component is executing in an SSR context."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isServer",
          "declaration": {
            "name": "isServer",
            "module": "node_modules/lit-html/development/is-server.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/lit-html.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "html",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<1>"
          },
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\n```ts\nconst header = (title: string) => html`<h1>${title}</h1>`;\n```\n\nThe `html` tag returns a description of the DOM to render as a value. It is\nlazy, meaning no work is done until the template is rendered. When rendering,\nif a template comes from the same expression as a previously rendered result,\nit's efficiently updated instead of replaced."
        },
        {
          "kind": "variable",
          "name": "svg",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<2>"
          },
          "description": "Interprets a template literal as an SVG fragment that can efficiently\nrender to and update a container.\n\n```ts\nconst rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n\nconst myImage = html`\n  <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n    ${rect}\n  </svg>`;\n```\n\nThe `svg` *tag function* should only be used for SVG fragments, or elements\nthat would be contained **inside** an `<svg>` HTML element. A common error is\nplacing an `<svg>` *element* in a template tagged with the `svg` tag\nfunction. The `<svg>` element is an HTML element and should be used within a\ntemplate tagged with the {@linkcode html} tag function.\n\nIn LitElement usage, it's invalid to return an SVG fragment from the\n`render()` method, as the SVG fragment will be contained within the element's\nshadow root and thus cannot be used within an `<svg>` HTML element."
        },
        {
          "kind": "variable",
          "name": "noChange",
          "type": {
            "text": "unique symbol"
          },
          "description": "A sentinel value that signals that a value was handled by a directive and\nshould not be written to the DOM."
        },
        {
          "kind": "variable",
          "name": "nothing",
          "type": {
            "text": "unique symbol"
          },
          "description": "A sentinel value that signals a ChildPart to fully clear its content.\n\n```ts\nconst button = html`${\n user.isAdmin\n   ? html`<button>DELETE</button>`\n   : nothing\n}`;\n```\n\nPrefer using `nothing` over other falsy values as it provides a consistent\nbehavior between various expression binding contexts.\n\nIn child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\nsame and render no nodes. In attribute expressions, `nothing` _removes_ the\nattribute, while `undefined` and `null` will render an empty string. In\nproperty expressions `nothing` becomes `undefined`."
        },
        {
          "kind": "class",
          "description": "An updateable instance of a Template. Holds references to the Parts used to\nupdate the template instance.",
          "name": "TemplateInstance",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ChildPart",
          "members": [
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "AttributePart",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "PropertyPart",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          },
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "BooleanAttributePart",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          },
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "EventPart",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AttributePart",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          },
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ElementPart",
          "members": [
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "_clone",
              "return": {
                "type": {
                  "text": "Node"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "RenderOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_update",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "directiveParent",
                  "optional": true,
                  "type": {
                    "text": "DirectiveParent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_$setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_$template",
              "type": {
                "text": "Template"
              }
            },
            {
              "kind": "field",
              "name": "_$parts",
              "type": {
                "text": "Array<Part | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_textSanitizer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parentNode",
              "type": {
                "text": "Node"
              },
              "description": "The parent node into which the part renders its content.\n\nA ChildPart's content consists of a range of adjacent child nodes of\n`.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n`.endNode`).\n\n- If both `.startNode` and `.endNode` are non-null, then the part's content\nconsists of all siblings between `.startNode` and `.endNode`, exclusively.\n\n- If `.startNode` is non-null but `.endNode` is null, then the part's\ncontent consists of all siblings following `.startNode`, up to and\nincluding the last child of `.parentNode`. If `.endNode` is non-null, then\n`.startNode` will always be non-null.\n\n- If both `.endNode` and `.startNode` are null, then the part's content\nconsists of all child nodes of `.parentNode`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's leading marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endNode",
              "type": {
                "text": "Node | null"
              },
              "description": "The part's trailing marker node, if any. See `.parentNode` for more\ninformation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_insert",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitNode",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitTemplateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_commitIterable",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined."
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "3",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "4",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "1 | 3 | 4 | 5"
              },
              "readonly": true,
              "default": "5",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "strings",
              "type": {
                "text": "ReadonlyArray<string> | undefined"
              },
              "readonly": true,
              "description": "If this attribute part represents an interpolation, this contains the\nstatic strings of the interpolation. For single-value, complete bindings,\nthis is undefined.",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_sanitizer",
              "type": {
                "text": "ValueSanitizer | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "AttributePart",
                "module": "node_modules/lit-html/development/lit-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "6"
            },
            {
              "kind": "field",
              "name": "_$committedValue",
              "type": {
                "text": "undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "RenderOptions | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "{\n    _boundAttributeSuffix: string;\n    _marker: string;\n    _markerMatch: string;\n    _HTML_RESULT: number;\n    _getTemplateHtml: (strings: TemplateStringsArray, type: ResultType) => [TrustedHTML, Array<string | undefined>];\n    _TemplateInstance: typeof TemplateInstance;\n    _isIterable: (value: unknown) => value is Iterable<unknown>;\n    _resolveDirective: typeof resolveDirective;\n    _ChildPart: typeof ChildPart;\n    _AttributePart: typeof AttributePart;\n    _BooleanAttributePart: typeof BooleanAttributePart;\n    _EventPart: typeof EventPart;\n    _PropertyPart: typeof PropertyPart;\n    _ElementPart: typeof ElementPart;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nPrivate exports for use by other Lit packages, not intended for use by\nexternal users.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports  mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.\n\nThis has a unique name, to disambiguate it from private exports in\nlit-element, which re-exports all of lit-html.",
          "privacy": "private"
        },
        {
          "kind": "variable",
          "name": "render",
          "type": {
            "text": "{\n    (value: unknown, container: HTMLElement | DocumentFragment, options?: RenderOptions): RootPart;\n    setSanitizer: (newSanitizer: SanitizerFactory) => void;\n    createSanitizer: SanitizerFactory;\n    _testOnlyClearSanitizerFactoryDoNotCallOrElse: () => void;\n}"
          },
          "description": "Renders a value, usually a lit-html TemplateResult, to the container.\n\nThis example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\nit to the container `document.body`.\n\n```js\nimport {html, render} from 'lit';\n\nconst name = \"Zoe\";\nrender(html`<p>Hello, ${name}!</p>`, document.body);\n```",
          "parameters": [
            {
              "description": "Any [renderable\nvalue](https://lit.dev/docs/templates/expressions/#child-expressions),\ntypically a {@linkcode TemplateResult} created by evaluating a template tag\nlike {@linkcode html} or {@linkcode svg}.",
              "name": "value"
            },
            {
              "description": "A DOM container to render to. The first render will append\nthe rendered value to the container, and subsequent renders will\nefficiently update the rendered value if the same result type was\npreviously rendered there.",
              "name": "container"
            },
            {
              "description": "See {@linkcode RenderOptions} for options documentation.",
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "noChange",
          "declaration": {
            "name": "noChange",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "nothing",
          "declaration": {
            "name": "nothing",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateInstance",
          "declaration": {
            "name": "TemplateInstance",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ChildPart",
          "declaration": {
            "name": "ChildPart",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AttributePart",
          "declaration": {
            "name": "AttributePart",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PropertyPart",
          "declaration": {
            "name": "PropertyPart",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "BooleanAttributePart",
          "declaration": {
            "name": "BooleanAttributePart",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventPart",
          "declaration": {
            "name": "EventPart",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ElementPart",
          "declaration": {
            "name": "ElementPart",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "render",
          "declaration": {
            "name": "render",
            "module": "node_modules/lit-html/development/lit-html.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/private-ssr-support.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_$LH",
          "type": {
            "text": "{\n    boundAttributeSuffix: string;\n    marker: string;\n    markerMatch: string;\n    HTML_RESULT: number;\n    getTemplateHtml: (strings: TemplateStringsArray, type: 1 | 2) => [import(\"trusted-types/lib/index.js\").TrustedHTML, (string | undefined)[]];\n    overrideDirectiveResolve: (directiveClass: new (part: PartInfo) => Directive & {\n        render(): unknown;\n    }, resolveOverrideFn: (directive: Directive, values: unknown[]) => unknown) => {\n        new (part: PartInfo): {\n            _$resolve(this: Directive, _part: Part, values: unknown[]): unknown;\n            __part: Part;\n            __attributeIndex: number | undefined;\n            __directive?: Directive | undefined;\n            _$parent: Disconnectable;\n            _$disconnectableChildren?: Set<Disconnectable> | undefined;\n            _$notifyDirectiveConnectionChanged?(isConnected: boolean): void;\n            readonly _$isConnected: boolean;\n            _$initialize(part: Part, parent: Disconnectable, attributeIndex: number | undefined): void;\n            render: ((...props: unknown[]) => unknown) & (() => unknown);\n            update(_part: Part, props: unknown[]): unknown;\n        };\n    };\n    setDirectiveClass(value: DirectiveResult, directiveClass: DirectiveClass): void;\n    getAttributePartCommittedValue: (part: AttributePart, value: unknown, index: number | undefined) => unknown;\n    connectedDisconnectable: (props?: object) => Disconnectable;\n    resolveDirective: (part: ChildPart | AttributePart | ElementPart, value: unknown, parent?: import(\"./lit-html.js\").DirectiveParent, attributeIndex?: number | undefined) => unknown;\n    AttributePart: typeof AttributePart;\n    PropertyPart: typeof PropertyPart;\n    BooleanAttributePart: typeof BooleanAttributePart;\n    EventPart: typeof EventPart;\n    ElementPart: typeof ElementPart;\n    TemplateInstance: typeof TemplateInstance;\n    isIterable: (value: unknown) => value is Iterable<unknown>;\n    ChildPart: typeof ChildPart;\n}"
          },
          "description": "END USERS SHOULD NOT RELY ON THIS OBJECT.\n\nWe currently do not make a mangled rollup build of the lit-ssr code. In order\nto keep a number of (otherwise private) top-level exports mangled in the\nclient side code, we export a _$LH object containing those members (or\nhelper methods for accessing private fields of those members), and then\nre-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\nclient-side code is being used in `dev` mode or `prod` mode.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_$LH",
          "declaration": {
            "name": "_$LH",
            "module": "node_modules/lit-html/development/private-ssr-support.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/static.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "unsafeStatic",
          "type": {
            "text": "(value: string) => StaticValue"
          },
          "description": "Wraps a string so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nNote that this function is unsafe to use on untrusted content, as it will be\ndirectly parsed into HTML. Do not pass user input to this function\nwithout sanitizing it.\n\nStatic values can be changed, but they will cause a complete re-render\nsince they effectively create a new template."
        },
        {
          "kind": "variable",
          "name": "literal",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => StaticValue"
          },
          "description": "Tags a string literal so that it behaves like part of the static template\nstrings instead of a dynamic value.\n\nThe only values that may be used in template expressions are other tagged\n`literal` results or `unsafeStatic` values (note that untrusted content\nshould never be passed to `unsafeStatic`).\n\nUsers must take care to ensure that adding the static string to the template\nresults in well-formed HTML, or else templates may break unexpectedly.\n\nStatic values can be changed, but they will cause a complete re-render since\nthey effectively create a new template."
        },
        {
          "kind": "variable",
          "name": "withStatic",
          "type": {
            "text": "(coreTag: typeof coreHtml | typeof coreSvg) => (strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Wraps a lit-html template tag (`html` or `svg`) to add static value support."
        },
        {
          "kind": "variable",
          "name": "html",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Interprets a template literal as an HTML template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        },
        {
          "kind": "variable",
          "name": "svg",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
          },
          "description": "Interprets a template literal as an SVG template that can efficiently\nrender to and update a container.\n\nIncludes static value support from `lit-html/static.js`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeStatic",
          "declaration": {
            "name": "unsafeStatic",
            "module": "node_modules/lit-html/development/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "literal",
          "declaration": {
            "name": "literal",
            "module": "node_modules/lit-html/development/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "withStatic",
          "declaration": {
            "name": "withStatic",
            "module": "node_modules/lit-html/development/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "module": "node_modules/lit-html/development/static.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "svg",
          "declaration": {
            "name": "svg",
            "module": "node_modules/lit-html/development/static.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/async-append.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncAppendDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AsyncReplaceDirective",
            "module": "/node_modules/lit-html/directives/async-replace.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "__childPart",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__value",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "asyncAppend",
          "type": {
            "text": "(value: AsyncIterable<unknown>, _mapper?: ((v: unknown, index?: number | undefined) => unknown) | undefined) => import(\"../directive.js\").DirectiveResult<typeof AsyncAppendDirective>"
          },
          "description": "A directive that renders the items of an async iterable[1], appending new\nvalues after previous values, similar to the built-in support for iterables.\nThis directive is usable only in child expressions.\n\nAsync iterables are objects with a [Symbol.asyncIterator] method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is appended to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asyncAppend",
          "declaration": {
            "name": "asyncAppend",
            "module": "node_modules/lit-html/directives/async-append.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncAppendDirective",
          "declaration": {
            "name": "AsyncAppendDirective",
            "module": "node_modules/lit-html/directives/async-append.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/async-replace.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncReplaceDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "_index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/node_modules/lit-html/async-directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "_index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "__value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "asyncReplace",
          "type": {
            "text": "(value: AsyncIterable<unknown>, _mapper?: Mapper<unknown> | undefined) => import(\"../directive.js\").DirectiveResult<typeof AsyncReplaceDirective>"
          },
          "description": "A directive that renders the items of an async iterable[1], replacing\nprevious values with new values, so that only one value is ever rendered\nat a time. This directive may be used in any expression type.\n\nAsync iterables are objects with a `[Symbol.asyncIterator]` method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is rendered to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncReplaceDirective",
          "declaration": {
            "name": "AsyncReplaceDirective",
            "module": "node_modules/lit-html/directives/async-replace.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "asyncReplace",
          "declaration": {
            "name": "asyncReplace",
            "module": "node_modules/lit-html/directives/async-replace.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/cache.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CacheDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_templateCache",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "cache",
          "type": {
            "text": "(v: unknown) => import(\"../directive.js\").DirectiveResult<typeof CacheDirective>"
          },
          "description": "Enables fast switching between multiple templates by caching the DOM nodes\nand TemplateInstances produced by the templates.\n\nExample:\n\n```js\nlet checked = false;\n\nhtml`\n  ${cache(checked ? html`input is checked` : html`input is not checked`)}\n`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cache",
          "declaration": {
            "name": "cache",
            "module": "node_modules/lit-html/directives/cache.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CacheDirective",
          "declaration": {
            "name": "CacheDirective",
            "module": "node_modules/lit-html/directives/cache.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/choose.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "choose",
          "type": {
            "text": "<T, V>(value: T, cases: [T, () => V][], defaultCase?: (() => V) | undefined) => V | undefined"
          },
          "description": "Chooses and evaluates a template function from a list based on matching\nthe given `value` to a case.\n\nCases are structured as `[caseValue, func]`. `value` is matched to\n`caseValue` by strict equality. The first match is selected. Case values\ncan be of any type including primitives, objects, and symbols.\n\nThis is similar to a switch statement, but as an expression and without\nfallthrough."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "choose",
          "declaration": {
            "name": "choose",
            "module": "node_modules/lit-html/directives/choose.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/class-map.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ClassMapDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_previousClasses",
              "privacy": "private",
              "description": "Stores the ClassInfo object applied to a given AttributePart.\nUsed to unset existing values when a new ClassInfo object is applied."
            },
            {
              "kind": "field",
              "name": "_staticClasses",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "classMap",
          "type": {
            "text": "(classInfo: ClassInfo) => import(\"../directive.js\").DirectiveResult<typeof ClassMapDirective>"
          },
          "description": "A directive that applies dynamic CSS classes.\n\nThis must be used in the `class` attribute and must be the only part used in\nthe attribute. It takes each property in the `classInfo` argument and adds\nthe property name to the element's `classList` if the property value is\ntruthy; if the property value is falsey, the property name is removed from\nthe element's `class`.\n\nFor example `{foo: bar}` applies the class `foo` if the value of `bar` is\ntruthy.",
          "parameters": [
            {
              "name": "classInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "classMap",
          "declaration": {
            "name": "classMap",
            "module": "node_modules/lit-html/directives/class-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ClassMapDirective",
          "declaration": {
            "name": "ClassMapDirective",
            "module": "node_modules/lit-html/directives/class-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/guard.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GuardDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_previousValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "guard",
          "type": {
            "text": "(_value: unknown, f: () => unknown) => import(\"../directive.js\").DirectiveResult<typeof GuardDirective>"
          },
          "description": "Prevents re-render of a template function until a single value or an array of\nvalues changes.\n\nValues are checked against previous values with strict equality (`===`), and\nso the check won't detect nested property changes inside objects or arrays.\nArrays values have each item checked against the previous value at the same\nindex with strict equality. Nested arrays are also checked only by strict\nequality.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([user.id, company.id], () => html`...`)}\n  </div>\n`\n```\n\nIn this case, the template only rerenders if either `user.id` or `company.id`\nchanges.\n\nguard() is useful with immutable data patterns, by preventing expensive work\nuntil data updates.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n  </div>\n`\n```\n\nIn this case, items are mapped over only when the array reference changes.",
          "parameters": [
            {
              "description": "the value to check before re-rendering",
              "name": "value"
            },
            {
              "description": "the template function",
              "name": "f"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "guard",
          "declaration": {
            "name": "guard",
            "module": "node_modules/lit-html/directives/guard.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "GuardDirective",
          "declaration": {
            "name": "GuardDirective",
            "module": "node_modules/lit-html/directives/guard.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/if-defined.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ifDefined",
          "type": {
            "text": "<T>(value: T) => typeof nothing | NonNullable<T>"
          },
          "description": "For AttributeParts, sets the attribute if the value is defined and removes\nthe attribute if the value is undefined.\n\nFor other part types, this directive is a no-op."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "ifDefined",
            "module": "node_modules/lit-html/directives/if-defined.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/join.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "join",
          "return": {
            "type": {
              "text": "Iterable<I | J>"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "Iterable<I> | undefined"
              }
            },
            {
              "name": "joiner",
              "type": {
                "text": "(index: number) => J"
              }
            }
          ],
          "description": "Returns an iterable containing the values in `items` interleaved with the\n`joiner` value."
        },
        {
          "kind": "function",
          "name": "join",
          "return": {
            "type": {
              "text": "Iterable<I | J>"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "Iterable<I> | undefined"
              }
            },
            {
              "name": "joiner",
              "type": {
                "text": "J"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "join",
          "declaration": {
            "name": "join",
            "module": "node_modules/lit-html/directives/join.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "join",
          "declaration": {
            "name": "join",
            "module": "node_modules/lit-html/directives/join.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/keyed.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Keyed",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "unknown"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "keyed",
          "type": {
            "text": "(k: unknown, v: unknown) => import(\"../directive.js\").DirectiveResult<typeof Keyed>"
          },
          "description": "Associates a renderable value with a unique key. When the key changes, the\nprevious DOM is removed and disposed before rendering the next value, even\nif the value - such as a template - is the same.\n\nThis is useful for forcing re-renders of stateful components, or working\nwith code that expects new data to generate new HTML elements, such as some\nanimation techniques."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "keyed",
          "declaration": {
            "name": "keyed",
            "module": "node_modules/lit-html/directives/keyed.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Keyed",
          "declaration": {
            "name": "Keyed",
            "module": "node_modules/lit-html/directives/keyed.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/live.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LiveDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "live",
          "type": {
            "text": "(value: unknown) => import(\"../directive.js\").DirectiveResult<typeof LiveDirective>"
          },
          "description": "Checks binding values against live DOM values, instead of previously bound\nvalues, when determining whether to update the value.\n\nThis is useful for cases where the DOM value may change from outside of\nlit-html, such as with a binding to an `<input>` element's `value` property,\na content editable elements text, or to a custom element that changes it's\nown properties or attributes.\n\nIn these cases if the DOM value changes, but the value set through lit-html\nbindings hasn't, lit-html won't know to update the DOM value and will leave\nit alone. If this is not what you want--if you want to overwrite the DOM\nvalue with the bound value no matter what--use the `live()` directive:\n\n```js\nhtml`<input .value=${live(x)}>`\n```\n\n`live()` performs a strict equality check against the live DOM value, and if\nthe new value is equal to the live value, does nothing. This means that\n`live()` should not be used when the binding will cause a type conversion. If\nyou use `live()` with an attribute binding, make sure that only strings are\npassed in, or the binding will update every render."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "live",
          "declaration": {
            "name": "live",
            "module": "node_modules/lit-html/directives/live.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "LiveDirective",
          "declaration": {
            "name": "LiveDirective",
            "module": "node_modules/lit-html/directives/live.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/map.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "map",
          "return": {
            "type": {
              "text": "Generator<unknown, void, unknown>"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "Iterable<T> | undefined"
              }
            },
            {
              "name": "f",
              "type": {
                "text": "(value: T, index: number) => unknown"
              }
            }
          ],
          "description": "Returns an iterable containing the result of calling `f(value)` on each\nvalue in `items`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "map",
          "declaration": {
            "name": "map",
            "module": "node_modules/lit-html/directives/map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/private-async-helpers.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "forAwaitOf",
          "type": {
            "text": "<T>(iterable: AsyncIterable<T>, callback: (value: T) => Promise<boolean>) => Promise<void>"
          },
          "description": "Helper to iterate an AsyncIterable in its own closure.",
          "parameters": [
            {
              "description": "The iterable to iterate",
              "name": "iterable"
            },
            {
              "description": "The callback to call for each value. If the callback returns\n`false`, the loop will be broken.",
              "name": "callback"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Holds a reference to an instance that can be disconnected and reconnected,\nso that a closure over the ref (e.g. in a then function to a promise) does\nnot strongly hold a ref to the instance. Approximates a WeakRef but must\nbe manually connected & disconnected to the backing instance.",
          "name": "PseudoWeakRef",
          "members": [
            {
              "kind": "method",
              "name": "deref",
              "return": {
                "type": {
                  "text": "T | undefined"
                }
              },
              "description": "Retrieves the backing instance (will be undefined when disconnected)"
            },
            {
              "kind": "method",
              "name": "disconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "reconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "description": "Reassociates the ref with the backing instance."
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "disconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "reconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "description": "Reassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "deref",
              "return": {
                "type": {
                  "text": "T | undefined"
                }
              },
              "description": "Retrieves the backing instance (will be undefined when disconnected)"
            },
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "When paused, returns a promise to be awaited; when unpaused, returns\nundefined. Note that in the microtask between the pauser being resumed\nan an await of this promise resolving, the pauser could be paused again,\nhence callers should check the promise in a loop when awaiting."
            },
            {
              "kind": "method",
              "name": "pause",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Creates a promise to be awaited"
            },
            {
              "kind": "method",
              "name": "resume",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resolves the promise which may be awaited"
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_promise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resolve",
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "class",
          "description": "A helper to pause and resume waiting on a condition in an async function",
          "name": "Pauser",
          "members": [
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "When paused, returns a promise to be awaited; when unpaused, returns\nundefined. Note that in the microtask between the pauser being resumed\nan an await of this promise resolving, the pauser could be paused again,\nhence callers should check the promise in a loop when awaiting."
            },
            {
              "kind": "method",
              "name": "pause",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Creates a promise to be awaited"
            },
            {
              "kind": "method",
              "name": "resume",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resolves the promise which may be awaited"
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "disconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "reconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "description": "Reassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "deref",
              "return": {
                "type": {
                  "text": "T | undefined"
                }
              },
              "description": "Retrieves the backing instance (will be undefined when disconnected)"
            },
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "When paused, returns a promise to be awaited; when unpaused, returns\nundefined. Note that in the microtask between the pauser being resumed\nan an await of this promise resolving, the pauser could be paused again,\nhence callers should check the promise in a loop when awaiting."
            },
            {
              "kind": "method",
              "name": "pause",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Creates a promise to be awaited"
            },
            {
              "kind": "method",
              "name": "resume",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resolves the promise which may be awaited"
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_promise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resolve",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forAwaitOf",
          "declaration": {
            "name": "forAwaitOf",
            "module": "node_modules/lit-html/directives/private-async-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PseudoWeakRef",
          "declaration": {
            "name": "PseudoWeakRef",
            "module": "node_modules/lit-html/directives/private-async-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Pauser",
          "declaration": {
            "name": "Pauser",
            "module": "node_modules/lit-html/directives/private-async-helpers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/range.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "range",
          "return": {
            "type": {
              "text": "Iterable<number>"
            }
          },
          "parameters": [
            {
              "name": "end",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Returns an iterable of integers from `start` to `end` (exclusive)\nincrementing by `step`.\n\nIf `start` is omitted, the range starts at `0`. `step` defaults to `1`."
        },
        {
          "kind": "function",
          "name": "range",
          "return": {
            "type": {
              "text": "Iterable<number>"
            }
          },
          "parameters": [
            {
              "name": "start",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "end",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "step",
              "optional": true,
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "range",
          "declaration": {
            "name": "range",
            "module": "node_modules/lit-html/directives/range.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "range",
          "declaration": {
            "name": "range",
            "module": "node_modules/lit-html/directives/range.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/ref.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "createRef",
          "type": {
            "text": "<T = Element>() => Ref<T>"
          },
          "description": "Creates a new Ref object, which is container for a reference to an element."
        },
        {
          "kind": "class",
          "description": "An object that holds a ref value.",
          "name": "Ref",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "readonly": true,
              "description": "The current Element value of the ref, or else `undefined` if the ref is no\nlonger rendered."
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "readonly": true,
              "description": "The current Element value of the ref, or else `undefined` if the ref is no\nlonger rendered."
            },
            {
              "kind": "field",
              "name": "_element",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_context",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_updateRefValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lastElementForRef",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "RefDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/node_modules/lit-html/async-directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "readonly": true,
              "description": "The current Element value of the ref, or else `undefined` if the ref is no\nlonger rendered."
            },
            {
              "kind": "field",
              "name": "_element",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_context",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_updateRefValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lastElementForRef",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "ref",
          "type": {
            "text": "(_ref?: RefOrCallback<Element> | undefined) => import(\"../directive.js\").DirectiveResult<typeof RefDirective>"
          },
          "description": "Sets the value of a Ref object or calls a ref callback with the element it's\nbound to.\n\nA Ref object acts as a container for a reference to an element. A ref\ncallback is a function that takes an element as its only argument.\n\nThe ref directive sets the value of the Ref object or calls the ref callback\nduring rendering, if the referenced element changed.\n\nNote: If a ref callback is rendered to a different element position or is\nremoved in a subsequent render, it will first be called with `undefined`,\nfollowed by another call with the new element it was rendered to (if any).\n\n```js\n// Using Ref object\nconst inputRef = createRef();\nrender(html`<input ${ref(inputRef)}>`, container);\ninputRef.value.focus();\n\n// Using callback\nconst callback = (inputElement) => inputElement.focus();\nrender(html`<input ${ref(callback)}>`, container);\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createRef",
          "declaration": {
            "name": "createRef",
            "module": "node_modules/lit-html/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Ref",
          "declaration": {
            "name": "Ref",
            "module": "node_modules/lit-html/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ref",
          "declaration": {
            "name": "ref",
            "module": "node_modules/lit-html/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "RefDirective",
          "declaration": {
            "name": "RefDirective",
            "module": "node_modules/lit-html/directives/ref.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/repeat.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RepeatDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_itemKeys",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getValuesAndKeys",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "repeat",
          "type": {
            "text": "RepeatDirectiveFn"
          },
          "description": "A directive that repeats a series of values (usually `TemplateResults`)\ngenerated from an iterable, and updates those items efficiently when the\niterable changes based on user-provided `keys` associated with each item.\n\nNote that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\nmeaning previous DOM for a given key is moved into the new position if\nneeded, and DOM will never be reused with values for different keys (new DOM\nwill always be created for new keys). This is generally the most efficient\nway to use `repeat` since it performs minimum unnecessary work for insertions\nand removals.\n\nThe `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n\n```js\nhtml`\n  <ol>\n    ${repeat(this.items, (item) => item.id, (item, index) => {\n      return html`<li>${index}: ${item.name}</li>`;\n    })}\n  </ol>\n`\n```\n\n**Important**: If providing a `keyFn`, keys *must* be unique for all items in a\ngiven call to `repeat`. The behavior when two or more items have the same key\nis undefined.\n\nIf no `keyFn` is provided, this directive will perform similar to mapping\nitems to values, and DOM will be reused against potentially different items."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "repeat",
          "declaration": {
            "name": "repeat",
            "module": "node_modules/lit-html/directives/repeat.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "RepeatDirective",
          "declaration": {
            "name": "RepeatDirective",
            "module": "node_modules/lit-html/directives/repeat.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/style-map.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StyleMapDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousStyleProperties",
              "type": {
                "text": "Set<string> | undefined"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_previousStyleProperties",
              "type": {
                "text": "Set<string> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "styleMap",
          "type": {
            "text": "(styleInfo: Readonly<StyleInfo>) => import(\"../directive.js\").DirectiveResult<typeof StyleMapDirective>"
          },
          "description": "A directive that applies CSS properties to an element.\n\n`styleMap` can only be used in the `style` attribute and must be the only\nexpression in the attribute. It takes the property names in the\nStyleInfostyleInfo object and adds the properties to the inline\nstyle of the element.\n\nProperty names with dashes (`-`) are assumed to be valid CSS\nproperty names and set on the element's style object using `setProperty()`.\nNames without dashes are assumed to be camelCased JavaScript property names\nand set on the element's style object using property assignment, allowing the\nstyle object to translate JavaScript-style names to CSS property names.\n\nFor example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n'0'})` sets the `background-color`, `border-top` and `--size` properties.",
          "parameters": [
            {
              "name": "styleInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styleMap",
          "declaration": {
            "name": "styleMap",
            "module": "node_modules/lit-html/directives/style-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "StyleMapDirective",
          "declaration": {
            "name": "StyleMapDirective",
            "module": "node_modules/lit-html/directives/style-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/template-content.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TemplateContentDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_previousTemplate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "templateContent",
          "type": {
            "text": "(template: HTMLTemplateElement) => import(\"../directive.js\").DirectiveResult<typeof TemplateContentDirective>"
          },
          "description": "Renders the content of a template element as HTML.\n\nNote, the template should be developer controlled and not user controlled.\nRendering a user-controlled template with this directive\ncould lead to cross-site-scripting vulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "templateContent",
          "declaration": {
            "name": "templateContent",
            "module": "node_modules/lit-html/directives/template-content.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateContentDirective",
          "declaration": {
            "name": "TemplateContentDirective",
            "module": "node_modules/lit-html/directives/template-content.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/unsafe-html.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UnsafeHTMLDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_templateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "unsafeHTML",
          "type": {
            "text": "(value: string | typeof noChange | typeof nothing | null | undefined) => import(\"../directive.js\").DirectiveResult<typeof UnsafeHTMLDirective>"
          },
          "description": "Renders the result as HTML, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UnsafeHTMLDirective",
          "declaration": {
            "name": "UnsafeHTMLDirective",
            "module": "node_modules/lit-html/directives/unsafe-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unsafeHTML",
          "declaration": {
            "name": "unsafeHTML",
            "module": "node_modules/lit-html/directives/unsafe-html.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/unsafe-svg.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UnsafeSVGDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true,
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true,
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "UnsafeHTMLDirective",
            "module": "/node_modules/lit-html/directives/unsafe-html.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true,
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true,
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private",
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_templateResult",
              "privacy": "private",
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "unsafeSVG",
          "type": {
            "text": "(value: string | typeof import(\"../lit-html.js\").noChange | typeof import(\"../lit-html.js\").nothing | null | undefined) => import(\"../directive.js\").DirectiveResult<typeof UnsafeSVGDirective>"
          },
          "description": "Renders the result as SVG, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeSVG",
          "declaration": {
            "name": "unsafeSVG",
            "module": "node_modules/lit-html/directives/unsafe-svg.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "UnsafeSVGDirective",
          "declaration": {
            "name": "UnsafeSVGDirective",
            "module": "node_modules/lit-html/directives/unsafe-svg.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/until.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UntilDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/node_modules/lit-html/async-directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "__lastRenderedIndex",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__values",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "until",
          "type": {
            "text": "(...values: unknown[]) => import(\"../directive.js\").DirectiveResult<typeof UntilDirective>"
          },
          "description": "Renders one of a series of values, including Promises, to a Part.\n\nValues are rendered in priority order, with the first argument having the\nhighest priority and the last argument having the lowest priority. If a\nvalue is a Promise, low-priority values will be rendered until it resolves.\n\nThe priority of values can be used to create placeholder content for async\ndata. For example, a Promise with pending content can be the first,\nhighest-priority, argument, and a non_promise loading indicator template can\nbe used as the second, lower-priority, argument. The loading indicator will\nrender immediately, and the primary content will render when the Promise\nresolves.\n\nExample:\n\n```js\nconst content = fetch('./content.txt').then(r => r.text());\nhtml`${until(content, html`<span>Loading...</span>`)}`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UntilDirective",
          "declaration": {
            "name": "UntilDirective",
            "module": "node_modules/lit-html/directives/until.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "until",
          "declaration": {
            "name": "until",
            "module": "node_modules/lit-html/directives/until.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/directives/when.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "when",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "condition",
              "type": {
                "text": "true"
              }
            },
            {
              "name": "trueCase",
              "type": {
                "text": "() => T"
              }
            },
            {
              "name": "falseCase",
              "optional": true,
              "type": {
                "text": "() => F"
              }
            }
          ],
          "description": "When `condition` is true, returns the result of calling `trueCase()`, else\nreturns the result of calling `falseCase()` if `falseCase` is defined.\n\nThis is a convenience wrapper around a ternary expression that makes it a\nlittle nicer to write an inline conditional without an else."
        },
        {
          "kind": "function",
          "name": "when",
          "return": {
            "type": {
              "text": "F"
            }
          },
          "parameters": [
            {
              "name": "condition",
              "type": {
                "text": "false"
              }
            },
            {
              "name": "trueCase",
              "type": {
                "text": "() => T"
              }
            },
            {
              "name": "falseCase",
              "optional": true,
              "type": {
                "text": "() => F"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "when",
          "return": {
            "type": {
              "text": "T | F"
            }
          },
          "parameters": [
            {
              "name": "condition",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "trueCase",
              "type": {
                "text": "() => T"
              }
            },
            {
              "name": "falseCase",
              "optional": true,
              "type": {
                "text": "() => F"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "when",
          "declaration": {
            "name": "when",
            "module": "node_modules/lit-html/directives/when.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "when",
          "declaration": {
            "name": "when",
            "module": "node_modules/lit-html/directives/when.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "when",
          "declaration": {
            "name": "when",
            "module": "node_modules/lit-html/directives/when.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/css.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "firstFocusableSelector",
          "type": {
            "text": "string"
          },
          "default": "\"button:not([tabindex=\\\"-1\\\"]), [href]:not([tabindex=\\\"-1\\\"]), input:not([tabindex=\\\"-1\\\"]), select:not([tabindex=\\\"-1\\\"]), textarea:not([tabindex=\\\"-1\\\"]), [tabindex]:not([tabindex=\\\"-1\\\"]), [focusable]:not([tabindex=\\\"-1\\\"])\""
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "firstFocusableSelector",
          "declaration": {
            "name": "firstFocusableSelector",
            "module": "node_modules/@sl-design-system/shared/src/css.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/path.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "getNameByPath",
          "type": {
            "text": "(path?: string) => string"
          }
        },
        {
          "kind": "variable",
          "name": "getStringByPath",
          "type": {
            "text": "(object: unknown, path?: string) => string"
          }
        },
        {
          "kind": "variable",
          "name": "getValueByPath",
          "type": {
            "text": "(object: unknown, path?: string) => unknown"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getNameByPath",
          "declaration": {
            "name": "getNameByPath",
            "module": "node_modules/@sl-design-system/shared/src/path.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getStringByPath",
          "declaration": {
            "name": "getStringByPath",
            "module": "node_modules/@sl-design-system/shared/src/path.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getValueByPath",
          "declaration": {
            "name": "getValueByPath",
            "module": "node_modules/@sl-design-system/shared/src/path.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/path.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/popover.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isPopoverOpen",
          "type": {
            "text": "(element?: HTMLElement) => boolean"
          }
        },
        {
          "kind": "variable",
          "name": "positionPopover",
          "type": {
            "text": "(element: HTMLElement, anchor: Element, options: PositionPopoverOptions) => (() => void)"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "popoverPolyfillStyles",
          "declaration": {
            "name": "popoverPolyfillStyles",
            "module": "node_modules/@sl-design-system/shared/src/popover.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "isPopoverOpen",
          "declaration": {
            "name": "isPopoverOpen",
            "module": "node_modules/@sl-design-system/shared/src/popover.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "positionPopover",
          "declaration": {
            "name": "positionPopover",
            "module": "node_modules/@sl-design-system/shared/src/popover.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/popover.scss.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_default",
          "type": {
            "text": "import(\"lit\").CSSResult"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "_default",
            "module": "node_modules/@sl-design-system/shared/src/popover.scss.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/string.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "camelize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to camelize."
            }
          ],
          "description": "Returns the lowerCamelCase form of a string.\n\n```javascript\ncamelize('innerHTML')          // 'innerHTML'\ncamelize('action_name')        // 'actionName'\ncamelize('css-class-name')     // 'cssClassName'\ncamelize('object.path.name')   // 'objectPathName'\ncamelize('my favorite items')  // 'myFavoriteItems'\ncamelize('My Favorite Items')  // 'myFavoriteItems'\n```"
        },
        {
          "kind": "function",
          "name": "capitalize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to capitalize."
            }
          ],
          "description": "Returns the Capitalized form of a string\n\n```javascript\ncapitalize('innerHTML')         // 'InnerHTML'\ncapitalize('action_name')       // 'Action_name'\ncapitalize('css-class-name')    // 'Css-class-name'\ncapitalize('my favorite items') // 'My favorite items'\n```"
        },
        {
          "kind": "function",
          "name": "classify",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "the string to classify"
            }
          ],
          "description": "Returns the UpperCamelCase form of a string.\n\n```javascript\nclassify('innerHTML')          // 'InnerHTML'\nclassify('action_name')        // 'ActionName'\nclassify('css-class-name')     // 'CssClassName'\nclassify('my favorite items')  // 'MyFavoriteItems'\n```"
        },
        {
          "kind": "function",
          "name": "dasherize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to dasherize."
            }
          ],
          "description": "Replaces underscores, spaces, or camelCase with dashes.\n\n```javascript\ndasherize('innerHTML')         // 'inner-html'\ndasherize('action_name')       // 'action-name'\ndasherize('css-class-name')    // 'css-class-name'\ndasherize('my favorite items') // 'my-favorite-items'\n```"
        },
        {
          "kind": "function",
          "name": "decamelize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to decamelize."
            }
          ],
          "description": "Converts a camelized string into all lower case separated by underscores.\n\n```javascript\ndecamelize('innerHTML')         // 'inner_html'\ndecamelize('action_name')       // 'action_name'\ndecamelize('css-class-name')    // 'css-class-name'\ndecamelize('my favorite items') // 'my favorite items'\n```"
        },
        {
          "kind": "function",
          "name": "humanize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to humanize."
            }
          ],
          "description": "Returns the Humanized form of a string\n\n```javascript\nhumanize('innerHTML')         // 'Inner html'\nhumanize('action_name')       // 'Action name'\nhumanize('css-class-name')    // 'Css class name'\nhumanize('my favorite items') // 'My favorite items'\n```"
        },
        {
          "kind": "function",
          "name": "underscore",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to underscore."
            }
          ],
          "description": "More general than decamelize. Returns the lower\\_case\\_and\\_underscored\nform of a string.\n\n```javascript\nunderscore('innerHTML')          // 'inner_html'\nunderscore('action_name')        // 'action_name'\nunderscore('css-class-name')     // 'css_class_name'\nunderscore('my favorite items')  // 'my_favorite_items'\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "camelize",
          "declaration": {
            "name": "camelize",
            "module": "node_modules/@sl-design-system/shared/src/string.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "capitalize",
          "declaration": {
            "name": "capitalize",
            "module": "node_modules/@sl-design-system/shared/src/string.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "classify",
          "declaration": {
            "name": "classify",
            "module": "node_modules/@sl-design-system/shared/src/string.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "dasherize",
          "declaration": {
            "name": "dasherize",
            "module": "node_modules/@sl-design-system/shared/src/string.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "decamelize",
          "declaration": {
            "name": "decamelize",
            "module": "node_modules/@sl-design-system/shared/src/string.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "humanize",
          "declaration": {
            "name": "humanize",
            "module": "node_modules/@sl-design-system/shared/src/string.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "underscore",
          "declaration": {
            "name": "underscore",
            "module": "node_modules/@sl-design-system/shared/src/string.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/string.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/types.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/validators.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "requiredValidator",
          "type": {
            "text": "Validator"
          }
        },
        {
          "kind": "variable",
          "name": "programmaticValidator",
          "type": {
            "text": "Validator"
          }
        },
        {
          "kind": "variable",
          "name": "minLengthValidator",
          "type": {
            "text": "Validator"
          }
        },
        {
          "kind": "variable",
          "name": "maxLengthValidator",
          "type": {
            "text": "Validator"
          }
        },
        {
          "kind": "variable",
          "name": "patternValidator",
          "type": {
            "text": "Validator"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requiredValidator",
          "declaration": {
            "name": "requiredValidator",
            "module": "node_modules/@sl-design-system/shared/src/validators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "programmaticValidator",
          "declaration": {
            "name": "programmaticValidator",
            "module": "node_modules/@sl-design-system/shared/src/validators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "minLengthValidator",
          "declaration": {
            "name": "minLengthValidator",
            "module": "node_modules/@sl-design-system/shared/src/validators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxLengthValidator",
          "declaration": {
            "name": "maxLengthValidator",
            "module": "node_modules/@sl-design-system/shared/src/validators.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "patternValidator",
          "declaration": {
            "name": "patternValidator",
            "module": "node_modules/@sl-design-system/shared/src/validators.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/base.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "legacyPrototypeMethod",
          "type": {
            "text": "(descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => void"
          }
        },
        {
          "kind": "variable",
          "name": "standardPrototypeMethod",
          "type": {
            "text": "(descriptor: PropertyDescriptor, element: ClassElement) => {\n    kind: string;\n    placement: string;\n    key: PropertyKey;\n    descriptor: PropertyDescriptor;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "decorateProperty",
          "type": {
            "text": "({ finisher, descriptor, }: {\n    finisher?: ((ctor: typeof ReactiveElement, property: PropertyKey) => void) | null | undefined;\n    descriptor?: ((property: PropertyKey) => PropertyDescriptor) | undefined;\n}) => (protoOrDescriptor: Interface<ReactiveElement> | ClassElement, name?: PropertyKey) => void | any"
          },
          "description": "Helper for decorating a property that is compatible with both TypeScript\nand Babel decorators. The optional `finisher` can be used to perform work on\nthe class. The optional `descriptor` should return a PropertyDescriptor\nto install for the given property.",
          "parameters": [
            {
              "description": "Optional finisher method; receives the element\nconstructor and property key as arguments and has no return value.",
              "name": "finisher",
              "type": {
                "text": "function"
              }
            },
            {
              "description": "Optional descriptor method; receives the\nproperty key as an argument and returns a property descriptor to define for\nthe given property.",
              "name": "descriptor",
              "type": {
                "text": "function"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ClassElement|void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "legacyPrototypeMethod",
          "declaration": {
            "name": "legacyPrototypeMethod",
            "module": "node_modules/@lit/reactive-element/decorators/base.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "standardPrototypeMethod",
          "declaration": {
            "name": "standardPrototypeMethod",
            "module": "node_modules/@lit/reactive-element/decorators/base.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "decorateProperty",
            "module": "node_modules/@lit/reactive-element/decorators/base.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/custom-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "customElement",
          "type": {
            "text": "(tagName: string) => (classOrDescriptor: CustomElementClass | ClassDescriptor) => any"
          },
          "description": "Class decorator factory that defines the decorated class as a custom element.\n\n```js",
          "parameters": [
            {
              "description": "The tag name of the custom element to define.",
              "name": "tagName"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "customElement",
          "declaration": {
            "name": "customElement",
            "module": "node_modules/@lit/reactive-element/decorators/custom-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/event-options.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "eventOptions",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "AddEventListenerOptions"
              },
              "description": "An object that specifies event listener options as accepted by\n`EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n\nCurrent browsers support the `capture`, `passive`, and `once` options. See:\nhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n\n```ts\nclass MyElement {\nclicked = false;\n\nrender() {\nreturn html`\n<div"
            }
          ],
          "description": "Adds event listener options to a method used as an event listener in a\nlit-html template."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "eventOptions",
          "declaration": {
            "name": "eventOptions",
            "module": "node_modules/@lit/reactive-element/decorators/event-options.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/property.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "property",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: Object | ClassElement, name?: PropertyKey) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "PropertyDeclaration"
              }
            }
          ],
          "description": "A property decorator which creates a reactive property that reflects a\ncorresponding attribute value. When a decorated property is set\nthe element will update and render. A {@linkcode PropertyDeclaration} may\noptionally be supplied to configure property features.\n\nThis decorator should only be used for public fields. As public fields,\nproperties should be considered as primarily settable by element users,\neither via attribute or the property itself.\n\nGenerally, properties that are changed by the element should be private or\nprotected fields and should use the {@linkcode state} decorator.\n\nHowever, sometimes element code does need to set a public property. This\nshould typically only be done in response to user interaction, and an event\nshould be fired informing the user; for example, a checkbox sets its\n`checked` property when clicked and fires a `changed` event. Mutating public\nproperties should typically not be done for non-primitive (object or array)\nproperties. In other cases when an element needs to manage state, a private\nproperty decorated via the {@linkcode state} decorator should be used. When\nneeded, state properties can be initialized via public properties to\nfacilitate complex interactions.\n\n```ts\nclass MyElement {"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "property",
          "declaration": {
            "name": "property",
            "module": "node_modules/@lit/reactive-element/decorators/property.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/query-all.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAll",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match.\n\nSee:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter\nthat executes a querySelectorAll on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAll",
          "declaration": {
            "name": "queryAll",
            "module": "node_modules/@lit/reactive-element/decorators/query-all.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/query-assigned-elements.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAssignedElements",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "QueryAssignedElementsOptions"
              }
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns the `assignedElements` of the given `slot`. Provides a declarative\nway to use\n[`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n\nCan be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n\nExample usage:\n```ts\nclass MyElement {"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAssignedElements",
          "declaration": {
            "name": "queryAssignedElements",
            "module": "node_modules/@lit/reactive-element/decorators/query-assigned-elements.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/query-assigned-nodes.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAssignedNodes",
          "return": {
            "type": {
              "text": "TSDecoratorReturnType"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "QueryAssignedNodesOptions"
              }
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns the `assignedNodes` of the given `slot`.\n\nCan be passed an optional {@linkcode QueryAssignedNodesOptions} object.\n\nExample usage:\n```ts\nclass MyElement {"
        },
        {
          "kind": "function",
          "name": "queryAssignedNodes",
          "return": {
            "type": {
              "text": "TSDecoratorReturnType"
            }
          },
          "parameters": [
            {
              "name": "slotName",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "A string name of the slot."
            },
            {
              "name": "flatten",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "A boolean which when true flattens the assigned nodes,\nmeaning any assigned nodes that are slot elements are replaced with their\nassigned nodes."
            },
            {
              "name": "selector",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "A CSS selector used to filter the elements returned."
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns the `assignedNodes` of the given named `slot`.\n\nExample usage:\n```ts\nclass MyElement {",
          "deprecated": "Prefer passing in a single options object, i.e. `{slot: 'list'}`.\nIf using `selector` please use `@queryAssignedElements`.\n`@queryAssignedNodes('', false, '.item')` is functionally identical to\n`@queryAssignedElements({slot: '', flatten: false, selector: '.item'})` or\n`@queryAssignedElements({selector: '.item'})`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "module": "node_modules/@lit/reactive-element/decorators/query-assigned-nodes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "module": "node_modules/@lit/reactive-element/decorators/query-assigned-nodes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/query-async.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAsync",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns a promise that resolves to the result of a querySelector on the\nelement's renderRoot done after the element's `updateComplete` promise\nresolves. When the queried property may change with element state, this\ndecorator can be used instead of requiring users to await the\n`updateComplete` before accessing the property."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAsync",
          "declaration": {
            "name": "queryAsync",
            "module": "node_modules/@lit/reactive-element/decorators/query-async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/query.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "query",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match."
            },
            {
              "name": "cache",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "An optional boolean which when true performs the DOM query only\nonce and caches the result.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nexecutes a querySelector on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "module": "node_modules/@lit/reactive-element/decorators/query.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/decorators/state.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "state",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: Object | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "InternalPropertyDeclaration"
              }
            }
          ],
          "description": "Declares a private or protected reactive property that still triggers\nupdates to the element when it changes. It does not reflect from the\ncorresponding attribute.\n\nProperties declared this way must not be used from HTML or HTML templating\nsystems, they're solely for properties internal to the element. These\nproperties may be renamed by optimization tools like closure compiler."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "state",
          "declaration": {
            "name": "state",
            "module": "node_modules/@lit/reactive-element/decorators/state.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/css-tag.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "supportsAdoptingStyleSheets",
          "type": {
            "text": "boolean"
          },
          "description": "Whether the current browser supports `adoptedStyleSheets`."
        },
        {
          "kind": "class",
          "description": "A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n\nCSSResult is the return value of `css`-tagged template literals and\n`unsafeCSS()`. In order to ensure that CSSResults are only created via the\n`css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.",
          "name": "CSSResult",
          "members": [
            {
              "kind": "field",
              "name": "['_$cssResult$']",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "cssText",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styleSheet",
              "type": {
                "text": "CSSStyleSheet | undefined"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "['_$cssResult$']",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "cssText",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_styleSheet",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_strings",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "styleSheet",
              "type": {
                "text": "CSSStyleSheet | undefined"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "variable",
          "name": "unsafeCSS",
          "type": {
            "text": "(value: unknown) => CSSResult"
          },
          "description": "Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n\nThis is unsafe because untrusted CSS text can be used to phone home\nor exfiltrate data to an attacker controlled site. Take care to only use\nthis with trusted input."
        },
        {
          "kind": "variable",
          "name": "css",
          "type": {
            "text": "(strings: TemplateStringsArray, ...values: (CSSResultGroup | number)[]) => CSSResult"
          },
          "description": "A template literal tag which can be used with LitElement's\n{@linkcode LitElement.styles} property to set element styles.\n\nFor security reasons, only literal string values and number may be used in\nembedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\nmay be used inside an expression."
        },
        {
          "kind": "variable",
          "name": "adoptStyles",
          "type": {
            "text": "(renderRoot: ShadowRoot, styles: Array<CSSResultOrNative>) => void"
          },
          "description": "Applies the given styles to a `shadowRoot`. When Shadow DOM is\navailable but `adoptedStyleSheets` is not, styles are appended to the\n`shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\nNote, when shimming is used, any styles that are subsequently placed into\nthe shadowRoot should be placed *before* any shimmed adopted styles. This\nwill match spec behavior that gives adopted sheets precedence over styles in\nshadowRoot."
        },
        {
          "kind": "variable",
          "name": "getCompatibleStyle",
          "type": {
            "text": "(s: CSSResultOrNative) => CSSResultOrNative"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "supportsAdoptingStyleSheets",
          "declaration": {
            "name": "supportsAdoptingStyleSheets",
            "module": "node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CSSResult",
          "declaration": {
            "name": "CSSResult",
            "module": "node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unsafeCSS",
          "declaration": {
            "name": "unsafeCSS",
            "module": "node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "css",
          "declaration": {
            "name": "css",
            "module": "node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "adoptStyles",
          "declaration": {
            "name": "adoptStyles",
            "module": "node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCompatibleStyle",
          "declaration": {
            "name": "getCompatibleStyle",
            "module": "node_modules/@lit/reactive-element/development/css-tag.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/custom-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/property.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/state.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/event-options.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-all.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-async.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-assigned-elements.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/polyfill-support.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/reactive-controller.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/reactive-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultConverter",
          "type": {
            "text": "ComplexAttributeConverter"
          }
        },
        {
          "kind": "variable",
          "name": "notEqual",
          "type": {
            "text": "HasChanged"
          },
          "description": "Change function that returns true if `value` is different from `oldValue`.\nThis method is used as the default for a property's `hasChanged` function."
        },
        {
          "kind": "class",
          "description": "Base element class which manages element properties and attributes. When\nproperties change, the `update` method is asynchronously called. This method\nshould be supplied by subclassers to render updates as desired.",
          "name": "ReactiveElement",
          "members": [
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties."
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called."
            },
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {"
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`."
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```"
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate."
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```"
            },
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds."
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized."
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles."
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}."
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```"
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`."
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read."
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element."
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot."
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible."
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "addInitializer",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "initializer",
                  "type": {
                    "text": "Initializer"
                  }
                }
              ],
              "description": "Adds an initializer function to the class that is called during instance\nconstruction.\n\nThis is useful for code that runs against a `ReactiveElement`\nsubclass, such as a decorator, that needs to do work for each\ninstance, such as setting up a `ReactiveController`.\n\n```ts\nconst myDecorator = (target: typeof ReactiveElement, key: string) => {\n  target.addInitializer((instance: ReactiveElement) => {\n    // This is run during construction of the element\n    new MyController(instance);\n  });\n}\n```\n\nDecorating a field will then cause each instance to run an initializer\nthat adds a controller:\n\n```ts\nclass MyElement extends LitElement {"
            },
            {
              "kind": "method",
              "name": "createProperty",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Creates a property accessor on the element prototype if one does not exist\nand stores a {@linkcode PropertyDeclaration} for the property with the\ngiven options. The property setter calls the property's `hasChanged`\nproperty option or uses a strict identity check to determine whether or not\nto request an update.\n\nThis method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\n```ts\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyDescriptor",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDescriptor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string | symbol"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "PropertyDeclaration"
                  }
                }
              ],
              "description": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,\n\n```ts\nclass MyElement extends LitElement {\n  static getPropertyDescriptor(name, key, options) {\n    const defaultDescriptor =\n        super.getPropertyDescriptor(name, key, options);\n    const setter = defaultDescriptor.set;\n    return {\n      get: defaultDescriptor.get,\n      set(value) {\n        setter.call(this, value);\n        // custom action.\n      },\n      configurable: true,\n      enumerable: true\n    }\n  }\n}\n```"
            },
            {
              "kind": "method",
              "name": "getPropertyOptions",
              "static": true,
              "return": {
                "type": {
                  "text": "PropertyDeclaration<unknown, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ],
              "description": "Returns the property options associated with the given property.\nThese options are defined with a `PropertyDeclaration` via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.\n\nNote, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override\n{@linkcode createProperty}."
            },
            {
              "kind": "method",
              "name": "finalize",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Creates property accessors for registered properties, sets up element\nstyling, and ensures any superclasses are also finalized. Returns true if\nthe element was finalized."
            },
            {
              "kind": "method",
              "name": "finalizeStyles",
              "privacy": "protected",
              "static": true,
              "return": {
                "type": {
                  "text": "Array<CSSResultOrNative>"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "optional": true,
                  "type": {
                    "text": "CSSResultGroup"
                  }
                }
              ],
              "description": "Takes the styles the user supplied via the `static styles` property and\nreturns the array of styles to apply to the element.\nOverride this method to integrate into a style management system.\n\nStyles are deduplicated preserving the _last_ instance in the list. This\nis a performance optimization to avoid duplicated styles that can occur\nespecially when composing via subclassing. The last item is kept to try\nto preserve the cascade order with the assumption that it's most important\nthat last added styles override previous styles."
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called."
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ],
              "description": "Removes a `ReactiveController` from the element."
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`."
            },
            {
              "kind": "method",
              "name": "enableUpdating",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_requestedUpdate",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Note, this method should be considered final and not overridden. It is\noverridden on the element instance with a function that triggers the first\nupdate."
            },
            {
              "kind": "method",
              "name": "scheduleUpdate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void | Promise<unknown>"
                }
              },
              "description": "Schedules an element update. You can override this method to change the\ntiming of updates by returning a Promise. The update will await the\nreturned Promise, and you should resolve the Promise to allow the update\nto proceed. If this method is overridden, `super.scheduleUpdate()`\nmust be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```ts\noverride protected async scheduleUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.scheduleUpdate();\n}\n```"
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override point for the `updateComplete` promise.\n\nIt is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n```ts\nclass MyElement extends LitElement {\n  override async getUpdateComplete() {\n    const result = await super.getUpdateComplete();\n    await this._myChild.updateComplete;\n    return result;\n  }\n}\n```"
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "enabledWarnings",
              "type": {
                "text": "WarningKind[] | undefined"
              },
              "static": true,
              "description": "Read or set all the enabled warning categories for this class.\n\nThis property is only used in development builds."
            },
            {
              "kind": "field",
              "name": "enableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Enable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Enable for all ReactiveElement subclasses\nReactiveElement.enableWarning?.('migration');\n\n// Enable for only MyElement and subclasses\nMyElement.enableWarning?.('migration');\n```"
            },
            {
              "kind": "field",
              "name": "disableWarning",
              "type": {
                "text": "(warningKind: WarningKind) => void | undefined"
              },
              "static": true,
              "description": "Disable the given warning category for this class.\n\nThis method only exists in development builds, so it should be accessed\nwith a guard like:\n\n```ts\n// Disable for all ReactiveElement subclasses\nReactiveElement.disableWarning?.('migration');\n\n// Disable for only MyElement and subclasses\nMyElement.disableWarning?.('migration');\n```"
            },
            {
              "kind": "field",
              "name": "_initializers",
              "type": {
                "text": "Initializer[] | undefined"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "__attributeToPropertyMap",
              "privacy": "private",
              "static": true,
              "description": "Maps attribute names to properties; for example `foobar` attribute to\n`fooBar` property. Created lazily on user subclasses when finalizing the\nclass."
            },
            {
              "kind": "field",
              "name": "[finalized]",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "description": "Marks class as having finished creating properties."
            },
            {
              "kind": "field",
              "name": "elementProperties",
              "type": {
                "text": "PropertyDeclarationMap"
              },
              "static": true,
              "description": "Memoized list of all element properties, including any superclass properties.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "field",
              "name": "elementStyles",
              "type": {
                "text": "Array<CSSResultOrNative>"
              },
              "static": true,
              "description": "Memoized list of all element styles.\nCreated lazily on user subclasses when finalizing the class."
            },
            {
              "kind": "field",
              "name": "__reactivePropertyKeys",
              "privacy": "private",
              "static": true,
              "description": "The set of properties defined by this class that caused an accessor to be\nadded during `createProperty`."
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "description": "Options used when calling `attachShadow`. Set this property to customize\nthe options for the shadowRoot; for example, to create a closed\nshadowRoot: `{mode: 'closed'}`.\n\nNote, these options are used in `createRenderRoot`. If this method\nis customized, options should be respected if possible."
            },
            {
              "kind": "field",
              "name": "renderRoot",
              "type": {
                "text": "HTMLElement | ShadowRoot"
              },
              "readonly": true,
              "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot."
            },
            {
              "kind": "field",
              "name": "__attributeNameForProperty",
              "privacy": "private",
              "static": true,
              "description": "Returns the property name for the given attribute `name`."
            },
            {
              "kind": "field",
              "name": "__instanceProperties",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__updatePromise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isUpdatePending",
              "type": {
                "text": "boolean"
              },
              "description": "True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read."
            },
            {
              "kind": "field",
              "name": "hasUpdated",
              "type": {
                "text": "boolean"
              },
              "description": "Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`."
            },
            {
              "kind": "field",
              "name": "__reflectingProperties",
              "privacy": "private",
              "description": "Map with keys of properties that should be reflected when updated."
            },
            {
              "kind": "field",
              "name": "__reflectingProperty",
              "privacy": "private",
              "description": "Name of currently reflecting property"
            },
            {
              "kind": "field",
              "name": "__controllers",
              "privacy": "private",
              "description": "Set of controllers."
            },
            {
              "kind": "field",
              "name": "__initialize",
              "privacy": "private",
              "description": "Internal only override point for customizing work done when elements\nare constructed."
            },
            {
              "kind": "field",
              "name": "__saveInstanceProperties",
              "privacy": "private",
              "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default)."
            },
            {
              "kind": "field",
              "name": "__propertyToAttribute",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__enqueueUpdate",
              "privacy": "private",
              "description": "Sets up the element to asynchronously update."
            },
            {
              "kind": "field",
              "name": "__markUpdated",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./css-tag.js"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveController",
          "declaration": {
            "name": "ReactiveController",
            "module": "./reactive-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveControllerHost",
          "declaration": {
            "name": "ReactiveControllerHost",
            "module": "./reactive-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "defaultConverter",
          "declaration": {
            "name": "defaultConverter",
            "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "notEqual",
          "declaration": {
            "name": "notEqual",
            "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ReactiveElement",
          "declaration": {
            "name": "ReactiveElement",
            "module": "node_modules/@lit/reactive-element/development/reactive-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators/custom-element.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators/event-options.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators/property.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators/query-all.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators/query-assigned-elements.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators/query-assigned-nodes.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators/query-async.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators/query.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/decorators/state.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/async-append.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/async-append.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/async-replace.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/async-replace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/cache.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/cache.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/choose.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/choose.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/class-map.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/class-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/guard.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/guard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/if-defined.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/if-defined.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/join.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/join.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/keyed.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/keyed.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/live.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/live.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/map.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/range.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/range.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/ref.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/ref.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/repeat.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/repeat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/style-map.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/style-map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/template-content.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/template-content.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/unsafe-html.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/unsafe-html.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/unsafe-svg.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/unsafe-svg.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/until.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/until.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit/development/directives/when.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "lit-html/directives/when.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators/custom-element.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/custom-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators/event-options.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/event-options.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators/property.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators/query-all.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-all.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators/query-assigned-elements.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators/query-assigned-nodes.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-assigned-nodes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators/query-async.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query-async.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators/query.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-element/development/decorators/state.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "@lit/reactive-element/decorators/state.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/async-append.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncAppendDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AsyncReplaceDirective",
            "module": "/node_modules/lit-html/development/directives/async-replace.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "__childPart",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__value",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AsyncReplaceDirective",
                "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "asyncAppend",
          "type": {
            "text": "(value: AsyncIterable<unknown>, _mapper?: ((v: unknown, index?: number | undefined) => unknown) | undefined) => import(\"../directive.js\").DirectiveResult<typeof AsyncAppendDirective>"
          },
          "description": "A directive that renders the items of an async iterable[1], appending new\nvalues after previous values, similar to the built-in support for iterables.\nThis directive is usable only in child expressions.\n\nAsync iterables are objects with a [Symbol.asyncIterator] method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is appended to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asyncAppend",
          "declaration": {
            "name": "asyncAppend",
            "module": "node_modules/lit-html/development/directives/async-append.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "AsyncAppendDirective",
          "declaration": {
            "name": "AsyncAppendDirective",
            "module": "node_modules/lit-html/development/directives/async-append.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/async-replace.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncReplaceDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "_index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/node_modules/lit-html/development/async-directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "commitValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "_index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "__value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "asyncReplace",
          "type": {
            "text": "(value: AsyncIterable<unknown>, _mapper?: Mapper<unknown> | undefined) => import(\"../directive.js\").DirectiveResult<typeof AsyncReplaceDirective>"
          },
          "description": "A directive that renders the items of an async iterable[1], replacing\nprevious values with new values, so that only one value is ever rendered\nat a time. This directive may be used in any expression type.\n\nAsync iterables are objects with a `[Symbol.asyncIterator]` method, which\nreturns an iterator who's `next()` method returns a Promise. When a new\nvalue is available, the Promise resolves and the value is rendered to the\nPart controlled by the directive. If another value other than this\ndirective has been set on the Part, the iterable will no longer be listened\nto and new values won't be written to the Part.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
          "parameters": [
            {
              "description": "An async iterable",
              "name": "value"
            },
            {
              "description": "An optional function that maps from (value, index) to another\nvalue. Useful for generating templates for each item in the iterable.",
              "name": "mapper"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncReplaceDirective",
          "declaration": {
            "name": "AsyncReplaceDirective",
            "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "asyncReplace",
          "declaration": {
            "name": "asyncReplace",
            "module": "node_modules/lit-html/development/directives/async-replace.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/cache.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CacheDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_templateCache",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "cache",
          "type": {
            "text": "(v: unknown) => import(\"../directive.js\").DirectiveResult<typeof CacheDirective>"
          },
          "description": "Enables fast switching between multiple templates by caching the DOM nodes\nand TemplateInstances produced by the templates.\n\nExample:\n\n```js\nlet checked = false;\n\nhtml`\n  ${cache(checked ? html`input is checked` : html`input is not checked`)}\n`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cache",
          "declaration": {
            "name": "cache",
            "module": "node_modules/lit-html/development/directives/cache.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CacheDirective",
          "declaration": {
            "name": "CacheDirective",
            "module": "node_modules/lit-html/development/directives/cache.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/choose.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "choose",
          "type": {
            "text": "<T, V>(value: T, cases: [T, () => V][], defaultCase?: (() => V) | undefined) => V | undefined"
          },
          "description": "Chooses and evaluates a template function from a list based on matching\nthe given `value` to a case.\n\nCases are structured as `[caseValue, func]`. `value` is matched to\n`caseValue` by strict equality. The first match is selected. Case values\ncan be of any type including primitives, objects, and symbols.\n\nThis is similar to a switch statement, but as an expression and without\nfallthrough."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "choose",
          "declaration": {
            "name": "choose",
            "module": "node_modules/lit-html/development/directives/choose.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/class-map.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ClassMapDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_previousClasses",
              "privacy": "private",
              "description": "Stores the ClassInfo object applied to a given AttributePart.\nUsed to unset existing values when a new ClassInfo object is applied."
            },
            {
              "kind": "field",
              "name": "_staticClasses",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "classMap",
          "type": {
            "text": "(classInfo: ClassInfo) => import(\"../directive.js\").DirectiveResult<typeof ClassMapDirective>"
          },
          "description": "A directive that applies dynamic CSS classes.\n\nThis must be used in the `class` attribute and must be the only part used in\nthe attribute. It takes each property in the `classInfo` argument and adds\nthe property name to the element's `classList` if the property value is\ntruthy; if the property value is falsey, the property name is removed from\nthe element's `class`.\n\nFor example `{foo: bar}` applies the class `foo` if the value of `bar` is\ntruthy.",
          "parameters": [
            {
              "name": "classInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "classMap",
          "declaration": {
            "name": "classMap",
            "module": "node_modules/lit-html/development/directives/class-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ClassMapDirective",
          "declaration": {
            "name": "ClassMapDirective",
            "module": "node_modules/lit-html/development/directives/class-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/guard.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GuardDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_previousValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "guard",
          "type": {
            "text": "(_value: unknown, f: () => unknown) => import(\"../directive.js\").DirectiveResult<typeof GuardDirective>"
          },
          "description": "Prevents re-render of a template function until a single value or an array of\nvalues changes.\n\nValues are checked against previous values with strict equality (`===`), and\nso the check won't detect nested property changes inside objects or arrays.\nArrays values have each item checked against the previous value at the same\nindex with strict equality. Nested arrays are also checked only by strict\nequality.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([user.id, company.id], () => html`...`)}\n  </div>\n`\n```\n\nIn this case, the template only rerenders if either `user.id` or `company.id`\nchanges.\n\nguard() is useful with immutable data patterns, by preventing expensive work\nuntil data updates.\n\nExample:\n\n```js\nhtml`\n  <div>\n    ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n  </div>\n`\n```\n\nIn this case, items are mapped over only when the array reference changes.",
          "parameters": [
            {
              "description": "the value to check before re-rendering",
              "name": "value"
            },
            {
              "description": "the template function",
              "name": "f"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "guard",
          "declaration": {
            "name": "guard",
            "module": "node_modules/lit-html/development/directives/guard.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "GuardDirective",
          "declaration": {
            "name": "GuardDirective",
            "module": "node_modules/lit-html/development/directives/guard.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/if-defined.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ifDefined",
          "type": {
            "text": "<T>(value: T) => typeof nothing | NonNullable<T>"
          },
          "description": "For AttributeParts, sets the attribute if the value is defined and removes\nthe attribute if the value is undefined.\n\nFor other part types, this directive is a no-op."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ifDefined",
          "declaration": {
            "name": "ifDefined",
            "module": "node_modules/lit-html/development/directives/if-defined.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/join.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "join",
          "return": {
            "type": {
              "text": "Iterable<I | J>"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "Iterable<I> | undefined"
              }
            },
            {
              "name": "joiner",
              "type": {
                "text": "(index: number) => J"
              }
            }
          ],
          "description": "Returns an iterable containing the values in `items` interleaved with the\n`joiner` value."
        },
        {
          "kind": "function",
          "name": "join",
          "return": {
            "type": {
              "text": "Iterable<I | J>"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "Iterable<I> | undefined"
              }
            },
            {
              "name": "joiner",
              "type": {
                "text": "J"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "join",
          "declaration": {
            "name": "join",
            "module": "node_modules/lit-html/development/directives/join.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "join",
          "declaration": {
            "name": "join",
            "module": "node_modules/lit-html/development/directives/join.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/keyed.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Keyed",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "unknown"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "keyed",
          "type": {
            "text": "(k: unknown, v: unknown) => import(\"../directive.js\").DirectiveResult<typeof Keyed>"
          },
          "description": "Associates a renderable value with a unique key. When the key changes, the\nprevious DOM is removed and disposed before rendering the next value, even\nif the value - such as a template - is the same.\n\nThis is useful for forcing re-renders of stateful components, or working\nwith code that expects new data to generate new HTML elements, such as some\nanimation techniques."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "keyed",
          "declaration": {
            "name": "keyed",
            "module": "node_modules/lit-html/development/directives/keyed.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Keyed",
          "declaration": {
            "name": "Keyed",
            "module": "node_modules/lit-html/development/directives/keyed.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/live.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LiveDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "live",
          "type": {
            "text": "(value: unknown) => import(\"../directive.js\").DirectiveResult<typeof LiveDirective>"
          },
          "description": "Checks binding values against live DOM values, instead of previously bound\nvalues, when determining whether to update the value.\n\nThis is useful for cases where the DOM value may change from outside of\nlit-html, such as with a binding to an `<input>` element's `value` property,\na content editable elements text, or to a custom element that changes it's\nown properties or attributes.\n\nIn these cases if the DOM value changes, but the value set through lit-html\nbindings hasn't, lit-html won't know to update the DOM value and will leave\nit alone. If this is not what you want--if you want to overwrite the DOM\nvalue with the bound value no matter what--use the `live()` directive:\n\n```js\nhtml`<input .value=${live(x)}>`\n```\n\n`live()` performs a strict equality check against the live DOM value, and if\nthe new value is equal to the live value, does nothing. This means that\n`live()` should not be used when the binding will cause a type conversion. If\nyou use `live()` with an attribute binding, make sure that only strings are\npassed in, or the binding will update every render."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "live",
          "declaration": {
            "name": "live",
            "module": "node_modules/lit-html/development/directives/live.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "LiveDirective",
          "declaration": {
            "name": "LiveDirective",
            "module": "node_modules/lit-html/development/directives/live.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/map.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "map",
          "return": {
            "type": {
              "text": "Generator<unknown, void, unknown>"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "Iterable<T> | undefined"
              }
            },
            {
              "name": "f",
              "type": {
                "text": "(value: T, index: number) => unknown"
              }
            }
          ],
          "description": "Returns an iterable containing the result of calling `f(value)` on each\nvalue in `items`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "map",
          "declaration": {
            "name": "map",
            "module": "node_modules/lit-html/development/directives/map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/private-async-helpers.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "forAwaitOf",
          "type": {
            "text": "<T>(iterable: AsyncIterable<T>, callback: (value: T) => Promise<boolean>) => Promise<void>"
          },
          "description": "Helper to iterate an AsyncIterable in its own closure.",
          "parameters": [
            {
              "description": "The iterable to iterate",
              "name": "iterable"
            },
            {
              "description": "The callback to call for each value. If the callback returns\n`false`, the loop will be broken.",
              "name": "callback"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Holds a reference to an instance that can be disconnected and reconnected,\nso that a closure over the ref (e.g. in a then function to a promise) does\nnot strongly hold a ref to the instance. Approximates a WeakRef but must\nbe manually connected & disconnected to the backing instance.",
          "name": "PseudoWeakRef",
          "members": [
            {
              "kind": "method",
              "name": "deref",
              "return": {
                "type": {
                  "text": "T | undefined"
                }
              },
              "description": "Retrieves the backing instance (will be undefined when disconnected)"
            },
            {
              "kind": "method",
              "name": "disconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "reconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "description": "Reassociates the ref with the backing instance."
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "disconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "reconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "description": "Reassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "deref",
              "return": {
                "type": {
                  "text": "T | undefined"
                }
              },
              "description": "Retrieves the backing instance (will be undefined when disconnected)"
            },
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "When paused, returns a promise to be awaited; when unpaused, returns\nundefined. Note that in the microtask between the pauser being resumed\nan an await of this promise resolving, the pauser could be paused again,\nhence callers should check the promise in a loop when awaiting."
            },
            {
              "kind": "method",
              "name": "pause",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Creates a promise to be awaited"
            },
            {
              "kind": "method",
              "name": "resume",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resolves the promise which may be awaited"
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_promise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resolve",
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "class",
          "description": "A helper to pause and resume waiting on a condition in an async function",
          "name": "Pauser",
          "members": [
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "When paused, returns a promise to be awaited; when unpaused, returns\nundefined. Note that in the microtask between the pauser being resumed\nan an await of this promise resolving, the pauser could be paused again,\nhence callers should check the promise in a loop when awaiting."
            },
            {
              "kind": "method",
              "name": "pause",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Creates a promise to be awaited"
            },
            {
              "kind": "method",
              "name": "resume",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resolves the promise which may be awaited"
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "disconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "reconnect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "description": "Reassociates the ref with the backing instance."
            },
            {
              "kind": "method",
              "name": "deref",
              "return": {
                "type": {
                  "text": "T | undefined"
                }
              },
              "description": "Retrieves the backing instance (will be undefined when disconnected)"
            },
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "When paused, returns a promise to be awaited; when unpaused, returns\nundefined. Note that in the microtask between the pauser being resumed\nan an await of this promise resolving, the pauser could be paused again,\nhence callers should check the promise in a loop when awaiting."
            },
            {
              "kind": "method",
              "name": "pause",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Creates a promise to be awaited"
            },
            {
              "kind": "method",
              "name": "resume",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resolves the promise which may be awaited"
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_promise",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resolve",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "forAwaitOf",
          "declaration": {
            "name": "forAwaitOf",
            "module": "node_modules/lit-html/development/directives/private-async-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PseudoWeakRef",
          "declaration": {
            "name": "PseudoWeakRef",
            "module": "node_modules/lit-html/development/directives/private-async-helpers.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Pauser",
          "declaration": {
            "name": "Pauser",
            "module": "node_modules/lit-html/development/directives/private-async-helpers.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/range.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "range",
          "return": {
            "type": {
              "text": "Iterable<number>"
            }
          },
          "parameters": [
            {
              "name": "end",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Returns an iterable of integers from `start` to `end` (exclusive)\nincrementing by `step`.\n\nIf `start` is omitted, the range starts at `0`. `step` defaults to `1`."
        },
        {
          "kind": "function",
          "name": "range",
          "return": {
            "type": {
              "text": "Iterable<number>"
            }
          },
          "parameters": [
            {
              "name": "start",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "end",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "step",
              "optional": true,
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "range",
          "declaration": {
            "name": "range",
            "module": "node_modules/lit-html/development/directives/range.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "range",
          "declaration": {
            "name": "range",
            "module": "node_modules/lit-html/development/directives/range.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/ref.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "createRef",
          "type": {
            "text": "<T = Element>() => Ref<T>"
          },
          "description": "Creates a new Ref object, which is container for a reference to an element."
        },
        {
          "kind": "class",
          "description": "An object that holds a ref value.",
          "name": "Ref",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "readonly": true,
              "description": "The current Element value of the ref, or else `undefined` if the ref is no\nlonger rendered."
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "readonly": true,
              "description": "The current Element value of the ref, or else `undefined` if the ref is no\nlonger rendered."
            },
            {
              "kind": "field",
              "name": "_element",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_context",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_updateRefValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lastElementForRef",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "RefDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/node_modules/lit-html/development/async-directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "readonly": true,
              "description": "The current Element value of the ref, or else `undefined` if the ref is no\nlonger rendered."
            },
            {
              "kind": "field",
              "name": "_element",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_ref",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_context",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_updateRefValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lastElementForRef",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "ref",
          "type": {
            "text": "(_ref?: RefOrCallback<Element> | undefined) => import(\"../directive.js\").DirectiveResult<typeof RefDirective>"
          },
          "description": "Sets the value of a Ref object or calls a ref callback with the element it's\nbound to.\n\nA Ref object acts as a container for a reference to an element. A ref\ncallback is a function that takes an element as its only argument.\n\nThe ref directive sets the value of the Ref object or calls the ref callback\nduring rendering, if the referenced element changed.\n\nNote: If a ref callback is rendered to a different element position or is\nremoved in a subsequent render, it will first be called with `undefined`,\nfollowed by another call with the new element it was rendered to (if any).\n\n```js\n// Using Ref object\nconst inputRef = createRef();\nrender(html`<input ${ref(inputRef)}>`, container);\ninputRef.value.focus();\n\n// Using callback\nconst callback = (inputElement) => inputElement.focus();\nrender(html`<input ${ref(callback)}>`, container);\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createRef",
          "declaration": {
            "name": "createRef",
            "module": "node_modules/lit-html/development/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "Ref",
          "declaration": {
            "name": "Ref",
            "module": "node_modules/lit-html/development/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ref",
          "declaration": {
            "name": "ref",
            "module": "node_modules/lit-html/development/directives/ref.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "RefDirective",
          "declaration": {
            "name": "RefDirective",
            "module": "node_modules/lit-html/development/directives/ref.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/repeat.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RepeatDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_itemKeys",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getValuesAndKeys",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "repeat",
          "type": {
            "text": "RepeatDirectiveFn"
          },
          "description": "A directive that repeats a series of values (usually `TemplateResults`)\ngenerated from an iterable, and updates those items efficiently when the\niterable changes based on user-provided `keys` associated with each item.\n\nNote that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\nmeaning previous DOM for a given key is moved into the new position if\nneeded, and DOM will never be reused with values for different keys (new DOM\nwill always be created for new keys). This is generally the most efficient\nway to use `repeat` since it performs minimum unnecessary work for insertions\nand removals.\n\nThe `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n\n```js\nhtml`\n  <ol>\n    ${repeat(this.items, (item) => item.id, (item, index) => {\n      return html`<li>${index}: ${item.name}</li>`;\n    })}\n  </ol>\n`\n```\n\n**Important**: If providing a `keyFn`, keys *must* be unique for all items in a\ngiven call to `repeat`. The behavior when two or more items have the same key\nis undefined.\n\nIf no `keyFn` is provided, this directive will perform similar to mapping\nitems to values, and DOM will be reused against potentially different items."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "repeat",
          "declaration": {
            "name": "repeat",
            "module": "node_modules/lit-html/development/directives/repeat.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "RepeatDirective",
          "declaration": {
            "name": "RepeatDirective",
            "module": "node_modules/lit-html/development/directives/repeat.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/style-map.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StyleMapDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousStyleProperties",
              "type": {
                "text": "Set<string> | undefined"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_previousStyleProperties",
              "type": {
                "text": "Set<string> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "styleMap",
          "type": {
            "text": "(styleInfo: Readonly<StyleInfo>) => import(\"../directive.js\").DirectiveResult<typeof StyleMapDirective>"
          },
          "description": "A directive that applies CSS properties to an element.\n\n`styleMap` can only be used in the `style` attribute and must be the only\nexpression in the attribute. It takes the property names in the\nStyleInfostyleInfo object and adds the properties to the inline\nstyle of the element.\n\nProperty names with dashes (`-`) are assumed to be valid CSS\nproperty names and set on the element's style object using `setProperty()`.\nNames without dashes are assumed to be camelCased JavaScript property names\nand set on the element's style object using property assignment, allowing the\nstyle object to translate JavaScript-style names to CSS property names.\n\nFor example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n'0'})` sets the `background-color`, `border-top` and `--size` properties.",
          "parameters": [
            {
              "name": "styleInfo"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styleMap",
          "declaration": {
            "name": "styleMap",
            "module": "node_modules/lit-html/development/directives/style-map.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "StyleMapDirective",
          "declaration": {
            "name": "StyleMapDirective",
            "module": "node_modules/lit-html/development/directives/style-map.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/template-content.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TemplateContentDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "_previousTemplate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "templateContent",
          "type": {
            "text": "(template: HTMLTemplateElement) => import(\"../directive.js\").DirectiveResult<typeof TemplateContentDirective>"
          },
          "description": "Renders the content of a template element as HTML.\n\nNote, the template should be developer controlled and not user controlled.\nRendering a user-controlled template with this directive\ncould lead to cross-site-scripting vulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "templateContent",
          "declaration": {
            "name": "templateContent",
            "module": "node_modules/lit-html/development/directives/template-content.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "TemplateContentDirective",
          "declaration": {
            "name": "TemplateContentDirective",
            "module": "node_modules/lit-html/development/directives/template-content.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/unsafe-html.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UnsafeHTMLDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true
            }
          ],
          "superclass": {
            "name": "Directive",
            "module": "/node_modules/lit-html/development/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_templateResult",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "unsafeHTML",
          "type": {
            "text": "(value: string | typeof noChange | typeof nothing | null | undefined) => import(\"../directive.js\").DirectiveResult<typeof UnsafeHTMLDirective>"
          },
          "description": "Renders the result as HTML, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UnsafeHTMLDirective",
          "declaration": {
            "name": "UnsafeHTMLDirective",
            "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "unsafeHTML",
          "declaration": {
            "name": "unsafeHTML",
            "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/unsafe-svg.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UnsafeSVGDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true,
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true,
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "UnsafeHTMLDirective",
            "module": "/node_modules/lit-html/development/directives/unsafe-html.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "directiveName",
              "type": {
                "text": "string"
              },
              "static": true,
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "resultType",
              "type": {
                "text": "number"
              },
              "static": true,
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private",
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_templateResult",
              "privacy": "private",
              "inheritedFrom": {
                "name": "UnsafeHTMLDirective",
                "module": "node_modules/lit-html/development/directives/unsafe-html.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "unsafeSVG",
          "type": {
            "text": "(value: string | typeof import(\"../lit-html.js\").noChange | typeof import(\"../lit-html.js\").nothing | null | undefined) => import(\"../directive.js\").DirectiveResult<typeof UnsafeSVGDirective>"
          },
          "description": "Renders the result as SVG, rather than text.\n\nThe values `undefined`, `null`, and `nothing`, will all result in no content\n(empty string) being rendered.\n\nNote, this is unsafe to use with any user-provided input that hasn't been\nsanitized or escaped, as it may lead to cross-site-scripting\nvulnerabilities."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "unsafeSVG",
          "declaration": {
            "name": "unsafeSVG",
            "module": "node_modules/lit-html/development/directives/unsafe-svg.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "UnsafeSVGDirective",
          "declaration": {
            "name": "UnsafeSVGDirective",
            "module": "node_modules/lit-html/development/directives/unsafe-svg.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/until.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UntilDirective",
          "members": [
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "AsyncDirective",
            "module": "/node_modules/lit-html/development/async-directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "disconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "User callbacks for implementing logic to release any resources/subscriptions\nthat may have been retained by this directive. Since directives may also be\nre-connected, `reconnected` should also be implemented to restore the\nworking state of the directive prior to the next render.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "reconnected",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "_$initialize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "Part"
                  }
                },
                {
                  "name": "parent",
                  "type": {
                    "text": "Disconnectable"
                  }
                },
                {
                  "name": "attributeIndex",
                  "type": {
                    "text": "number | undefined"
                  }
                }
              ],
              "description": "Initialize the part with internal fields",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The value to set"
                },
                {
                  "description": "The directive to update",
                  "name": "directive"
                }
              ],
              "description": "Sets the value of the directive's Part outside the normal `update`/`render`\nlifecycle of a directive.\n\nThis method should not be called synchronously from a directive's `update`\nor `render`.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "__lastRenderedIndex",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__values",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__weakThis",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__pauser",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": {
                "text": "boolean"
              },
              "description": "The connection state for this Directive.",
              "inheritedFrom": {
                "name": "AsyncDirective",
                "module": "node_modules/lit-html/development/async-directive.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "until",
          "type": {
            "text": "(...values: unknown[]) => import(\"../directive.js\").DirectiveResult<typeof UntilDirective>"
          },
          "description": "Renders one of a series of values, including Promises, to a Part.\n\nValues are rendered in priority order, with the first argument having the\nhighest priority and the last argument having the lowest priority. If a\nvalue is a Promise, low-priority values will be rendered until it resolves.\n\nThe priority of values can be used to create placeholder content for async\ndata. For example, a Promise with pending content can be the first,\nhighest-priority, argument, and a non_promise loading indicator template can\nbe used as the second, lower-priority, argument. The loading indicator will\nrender immediately, and the primary content will render when the Promise\nresolves.\n\nExample:\n\n```js\nconst content = fetch('./content.txt').then(r => r.text());\nhtml`${until(content, html`<span>Loading...</span>`)}`\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UntilDirective",
          "declaration": {
            "name": "UntilDirective",
            "module": "node_modules/lit-html/development/directives/until.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "until",
          "declaration": {
            "name": "until",
            "module": "node_modules/lit-html/development/directives/until.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/lit-html/development/directives/when.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "when",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "condition",
              "type": {
                "text": "true"
              }
            },
            {
              "name": "trueCase",
              "type": {
                "text": "() => T"
              }
            },
            {
              "name": "falseCase",
              "optional": true,
              "type": {
                "text": "() => F"
              }
            }
          ],
          "description": "When `condition` is true, returns the result of calling `trueCase()`, else\nreturns the result of calling `falseCase()` if `falseCase` is defined.\n\nThis is a convenience wrapper around a ternary expression that makes it a\nlittle nicer to write an inline conditional without an else."
        },
        {
          "kind": "function",
          "name": "when",
          "return": {
            "type": {
              "text": "F"
            }
          },
          "parameters": [
            {
              "name": "condition",
              "type": {
                "text": "false"
              }
            },
            {
              "name": "trueCase",
              "type": {
                "text": "() => T"
              }
            },
            {
              "name": "falseCase",
              "optional": true,
              "type": {
                "text": "() => F"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "when",
          "return": {
            "type": {
              "text": "T | F"
            }
          },
          "parameters": [
            {
              "name": "condition",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "trueCase",
              "type": {
                "text": "() => T"
              }
            },
            {
              "name": "falseCase",
              "optional": true,
              "type": {
                "text": "() => F"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "when",
          "declaration": {
            "name": "when",
            "module": "node_modules/lit-html/development/directives/when.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "when",
          "declaration": {
            "name": "when",
            "module": "node_modules/lit-html/development/directives/when.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "when",
          "declaration": {
            "name": "when",
            "module": "node_modules/lit-html/development/directives/when.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/controllers/anchor.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnchorController",
          "members": [
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "PopoverPosition | undefined"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "PopoverPosition | undefined"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnchorController",
          "declaration": {
            "name": "AnchorController",
            "module": "node_modules/@sl-design-system/shared/src/controllers/anchor.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/controllers/events.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventsController",
          "members": [
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "Node"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K]) => void"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "Node"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K]) => void"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventsController",
          "declaration": {
            "name": "EventsController",
            "module": "node_modules/@sl-design-system/shared/src/controllers/events.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FocusGroupController",
          "members": [
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "elementEnterAction",
              "type": {
                "text": "(_el: T) => void"
              }
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focusToElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elementIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "handleFocusin",
              "type": {
                "text": "(event: FocusEvent) => void"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusout",
              "type": {
                "text": "(event: FocusEvent) => void"
              }
            },
            {
              "kind": "field",
              "name": "handleKeydown",
              "type": {
                "text": "(event: KeyboardEvent) => void"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "type": {
                "text": "(_el: T) => boolean"
              }
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusToElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elementIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "elementEnterAction",
              "type": {
                "text": "(_el: T) => void"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              }
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "type": {
                "text": "(_el: T) => boolean"
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusin",
              "type": {
                "text": "(event: FocusEvent) => void"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusout",
              "type": {
                "text": "(event: FocusEvent) => void"
              }
            },
            {
              "kind": "field",
              "name": "handleKeydown",
              "type": {
                "text": "(event: KeyboardEvent) => void"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusGroupController",
          "declaration": {
            "name": "FocusGroupController",
            "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/controllers/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./anchor.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./events.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./focus-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./roving-tabindex.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./selection.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./validation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/controllers/roving-tabindex.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RovingTabindexController",
          "members": [
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementEnterAction",
              "type": {
                "text": "(_el: T) => void"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusToElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elementIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusin",
              "type": {
                "text": "(event: FocusEvent) => void"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusout",
              "type": {
                "text": "(event: FocusEvent) => void"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleKeydown",
              "type": {
                "text": "(event: KeyboardEvent) => void"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "type": {
                "text": "(_el: T) => boolean"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "manageTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "getTabIndex",
                  "type": {
                    "text": "(el: HTMLElement) => UpdateTabIndexes"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "FocusGroupController",
            "module": "/node_modules/@sl-design-system/shared/src/controllers/focus-group.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "manageTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "getTabIndex",
                  "type": {
                    "text": "(el: HTMLElement) => UpdateTabIndexes"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusToElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elementIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "managed",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "manageIndexesAnimationFrame",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementEnterAction",
              "type": {
                "text": "(_el: T) => void"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "type": {
                "text": "(_el: T) => boolean"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusin",
              "type": {
                "text": "(event: FocusEvent) => void"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusout",
              "type": {
                "text": "(event: FocusEvent) => void"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleKeydown",
              "type": {
                "text": "(event: KeyboardEvent) => void"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "node_modules/@sl-design-system/shared/src/controllers/focus-group.d.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RovingTabindexController",
          "declaration": {
            "name": "RovingTabindexController",
            "module": "node_modules/@sl-design-system/shared/src/controllers/roving-tabindex.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/controllers/selection.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectionController",
          "members": [
            {
              "kind": "method",
              "name": "areAllSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "areSomeSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "deselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "description": "Whether more than 1 item can be selected at a time."
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "Set<T>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "description": "The total number of items in the selection."
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "deselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "areAllSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "areSomeSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "description": "The total number of items in the selection."
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "description": "Whether more than 1 item can be selected at a time."
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "Set<T>"
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectionController",
          "declaration": {
            "name": "SelectionController",
            "module": "node_modules/@sl-design-system/shared/src/controllers/selection.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/controllers/validation.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "validationStyles",
          "type": {
            "text": "CSSResultGroup"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "ValidationController",
          "members": [
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "ValidationTarget"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "ValidationValue"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "ValidationValue"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "ValidationTarget"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "validationStyles",
          "declaration": {
            "name": "validationStyles",
            "module": "node_modules/@sl-design-system/shared/src/controllers/validation.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ValidationController",
          "declaration": {
            "name": "ValidationController",
            "module": "node_modules/@sl-design-system/shared/src/controllers/validation.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/data-source/array-data-source.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ArrayDataSource",
          "members": [
            {
              "kind": "method",
              "name": "addFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrFilter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The filtered & sorted array of items.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "Map<string, DataSourceFilter<T>>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of all items.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrSorter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "DataSourceSortDirection"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Total number of items in this data source.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "sort",
              "type": {
                "text": "DataSourceSort<T> | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "DataSource",
            "module": "/node_modules/@sl-design-system/shared/src/data-source/data-source.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "addFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrFilter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrSorter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "DataSourceSortDirection"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The filtered & sorted array of items.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of all items.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Total number of items in this data source.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "Map<string, DataSourceFilter<T>>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "sort",
              "type": {
                "text": "DataSourceSort<T> | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArrayDataSource",
          "declaration": {
            "name": "ArrayDataSource",
            "module": "node_modules/@sl-design-system/shared/src/data-source/array-data-source.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DataSource",
          "members": [
            {
              "kind": "method",
              "name": "addFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrFilter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The filtered & sorted array of items."
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "Map<string, DataSourceFilter<T>>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of all items."
            },
            {
              "kind": "method",
              "name": "removeFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeSort",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrSorter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "DataSourceSortDirection"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Total number of items in this data source."
            },
            {
              "kind": "field",
              "name": "sort",
              "type": {
                "text": "DataSourceSort<T> | undefined"
              },
              "readonly": true
            }
          ],
          "superclass": {
            "name": "EventTarget",
            "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
          },
          "methods": [
            {
              "kind": "method",
              "name": "addFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrFilter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrSorter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "DataSourceSortDirection"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeSort",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "Map<string, DataSourceFilter<T>>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "sort",
              "type": {
                "text": "DataSourceSort<T> | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The filtered & sorted array of items."
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of all items."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Total number of items in this data source."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DataSource",
          "declaration": {
            "name": "DataSource",
            "module": "node_modules/@sl-design-system/shared/src/data-source/data-source.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/data-source/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./array-data-source.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./data-source.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/decorators/base.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "decorateProperty",
          "type": {
            "text": "({ finisher, descriptor }: {\n    finisher?: ((ctor: typeof ReactiveElement, property: PropertyKey) => void) | null | undefined;\n    descriptor?: ((property: PropertyKey) => PropertyDescriptor) | undefined;\n}) => (protoOrDescriptor: ReactiveElement | ClassElement, name?: PropertyKey) => void | any"
          },
          "description": "Helper for decorating a property that is compatible with both TypeScript\nand Babel decorators. The optional `finisher` can be used to perform work on\nthe class. The optional `descriptor` should return a PropertyDescriptor\nto install for the given property.",
          "parameters": [
            {
              "description": "Optional finisher method; receives the element\nconstructor and property key as arguments and has no return value.",
              "name": "finisher",
              "type": {
                "text": "function"
              }
            },
            {
              "description": "Optional descriptor method; receives the\nproperty key as an argument and returns a property descriptor to define for\nthe given property.",
              "name": "descriptor",
              "type": {
                "text": "function"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ClassElement|void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "decorateProperty",
            "module": "node_modules/@sl-design-system/shared/src/decorators/base.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/decorators/event.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventEmitter",
          "members": [
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "EventOptions"
                  }
                }
              ]
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "EventOptions"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "target",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "eventName",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "options",
              "privacy": "private"
            }
          ]
        },
        {
          "kind": "function",
          "name": "event",
          "return": {
            "type": {
              "text": "any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "EventOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventEmitter",
          "declaration": {
            "name": "EventEmitter",
            "module": "node_modules/@sl-design-system/shared/src/decorators/event.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "event",
          "declaration": {
            "name": "event",
            "module": "node_modules/@sl-design-system/shared/src/decorators/event.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/decorators/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./event.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./observe.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/decorators/observe.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "observe",
          "return": {
            "type": {
              "text": "(target: ReactiveElement | ClassElement, methodName: string) => void"
            }
          },
          "parameters": [
            {
              "name": "propertyName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lifecycle",
              "optional": true,
              "type": {
                "text": "ObserveLifecycle"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observe",
          "declaration": {
            "name": "observe",
            "module": "node_modules/@sl-design-system/shared/src/decorators/observe.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/directives/anchor.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnchorDirective",
          "members": [
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "package": "lit/directive.js"
          },
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_$isConnected",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Directive",
                "module": "node_modules/lit-html/development/directive.d.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "anchor",
          "type": {
            "text": "(_config?: AnchorDirectiveConfig | undefined) => import(\"lit-html/directive.js\").DirectiveResult<typeof AnchorDirective>"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnchorDirective",
          "declaration": {
            "name": "AnchorDirective",
            "module": "node_modules/@sl-design-system/shared/src/directives/anchor.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "anchor",
          "declaration": {
            "name": "anchor",
            "module": "node_modules/@sl-design-system/shared/src/directives/anchor.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/directives/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./anchor.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/mixins/form-control.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "FormControlMixin",
          "return": {
            "type": {
              "text": "T & Constructor<FormControlInterface>"
            }
          },
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlMixin",
          "declaration": {
            "name": "FormControlMixin",
            "module": "node_modules/@sl-design-system/shared/src/mixins/form-control.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/mixins/hint.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "hintStyles",
          "type": {
            "text": "CSSResultGroup"
          }
        },
        {
          "kind": "function",
          "name": "HintMixin",
          "return": {
            "type": {
              "text": "T & Constructor<HintInterface>"
            }
          },
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hintStyles",
          "declaration": {
            "name": "hintStyles",
            "module": "node_modules/@sl-design-system/shared/src/mixins/hint.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "HintMixin",
          "declaration": {
            "name": "HintMixin",
            "module": "node_modules/@sl-design-system/shared/src/mixins/hint.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/mixins/hint.spec.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@sl-design-system/shared/src/mixins/index.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./form-control.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./hint.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/base.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "legacyPrototypeMethod",
          "type": {
            "text": "(descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => void"
          }
        },
        {
          "kind": "variable",
          "name": "standardPrototypeMethod",
          "type": {
            "text": "(descriptor: PropertyDescriptor, element: ClassElement) => {\n    kind: string;\n    placement: string;\n    key: PropertyKey;\n    descriptor: PropertyDescriptor;\n}"
          }
        },
        {
          "kind": "variable",
          "name": "decorateProperty",
          "type": {
            "text": "({ finisher, descriptor, }: {\n    finisher?: ((ctor: typeof ReactiveElement, property: PropertyKey) => void) | null | undefined;\n    descriptor?: ((property: PropertyKey) => PropertyDescriptor) | undefined;\n}) => (protoOrDescriptor: Interface<ReactiveElement> | ClassElement, name?: PropertyKey) => void | any"
          },
          "description": "Helper for decorating a property that is compatible with both TypeScript\nand Babel decorators. The optional `finisher` can be used to perform work on\nthe class. The optional `descriptor` should return a PropertyDescriptor\nto install for the given property.",
          "parameters": [
            {
              "description": "Optional finisher method; receives the element\nconstructor and property key as arguments and has no return value.",
              "name": "finisher",
              "type": {
                "text": "function"
              }
            },
            {
              "description": "Optional descriptor method; receives the\nproperty key as an argument and returns a property descriptor to define for\nthe given property.",
              "name": "descriptor",
              "type": {
                "text": "function"
              }
            }
          ],
          "return": {
            "type": {
              "text": "ClassElement|void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "legacyPrototypeMethod",
          "declaration": {
            "name": "legacyPrototypeMethod",
            "module": "node_modules/@lit/reactive-element/development/decorators/base.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "standardPrototypeMethod",
          "declaration": {
            "name": "standardPrototypeMethod",
            "module": "node_modules/@lit/reactive-element/development/decorators/base.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "decorateProperty",
            "module": "node_modules/@lit/reactive-element/development/decorators/base.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/custom-element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "customElement",
          "type": {
            "text": "(tagName: string) => (classOrDescriptor: CustomElementClass | ClassDescriptor) => any"
          },
          "description": "Class decorator factory that defines the decorated class as a custom element.\n\n```js",
          "parameters": [
            {
              "description": "The tag name of the custom element to define.",
              "name": "tagName"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "customElement",
          "declaration": {
            "name": "customElement",
            "module": "node_modules/@lit/reactive-element/development/decorators/custom-element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/event-options.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "eventOptions",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "AddEventListenerOptions"
              },
              "description": "An object that specifies event listener options as accepted by\n`EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n\nCurrent browsers support the `capture`, `passive`, and `once` options. See:\nhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n\n```ts\nclass MyElement {\nclicked = false;\n\nrender() {\nreturn html`\n<div"
            }
          ],
          "description": "Adds event listener options to a method used as an event listener in a\nlit-html template."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "eventOptions",
          "declaration": {
            "name": "eventOptions",
            "module": "node_modules/@lit/reactive-element/development/decorators/event-options.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/property.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "property",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: Object | ClassElement, name?: PropertyKey) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "PropertyDeclaration"
              }
            }
          ],
          "description": "A property decorator which creates a reactive property that reflects a\ncorresponding attribute value. When a decorated property is set\nthe element will update and render. A {@linkcode PropertyDeclaration} may\noptionally be supplied to configure property features.\n\nThis decorator should only be used for public fields. As public fields,\nproperties should be considered as primarily settable by element users,\neither via attribute or the property itself.\n\nGenerally, properties that are changed by the element should be private or\nprotected fields and should use the {@linkcode state} decorator.\n\nHowever, sometimes element code does need to set a public property. This\nshould typically only be done in response to user interaction, and an event\nshould be fired informing the user; for example, a checkbox sets its\n`checked` property when clicked and fires a `changed` event. Mutating public\nproperties should typically not be done for non-primitive (object or array)\nproperties. In other cases when an element needs to manage state, a private\nproperty decorated via the {@linkcode state} decorator should be used. When\nneeded, state properties can be initialized via public properties to\nfacilitate complex interactions.\n\n```ts\nclass MyElement {"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "property",
          "declaration": {
            "name": "property",
            "module": "node_modules/@lit/reactive-element/development/decorators/property.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/query-all.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAll",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match.\n\nSee:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter\nthat executes a querySelectorAll on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAll",
          "declaration": {
            "name": "queryAll",
            "module": "node_modules/@lit/reactive-element/development/decorators/query-all.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAssignedElements",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "QueryAssignedElementsOptions"
              }
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns the `assignedElements` of the given `slot`. Provides a declarative\nway to use\n[`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n\nCan be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n\nExample usage:\n```ts\nclass MyElement {"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAssignedElements",
          "declaration": {
            "name": "queryAssignedElements",
            "module": "node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAssignedNodes",
          "return": {
            "type": {
              "text": "TSDecoratorReturnType"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "QueryAssignedNodesOptions"
              }
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns the `assignedNodes` of the given `slot`.\n\nCan be passed an optional {@linkcode QueryAssignedNodesOptions} object.\n\nExample usage:\n```ts\nclass MyElement {"
        },
        {
          "kind": "function",
          "name": "queryAssignedNodes",
          "return": {
            "type": {
              "text": "TSDecoratorReturnType"
            }
          },
          "parameters": [
            {
              "name": "slotName",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "A string name of the slot."
            },
            {
              "name": "flatten",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "A boolean which when true flattens the assigned nodes,\nmeaning any assigned nodes that are slot elements are replaced with their\nassigned nodes."
            },
            {
              "name": "selector",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "A CSS selector used to filter the elements returned."
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns the `assignedNodes` of the given named `slot`.\n\nExample usage:\n```ts\nclass MyElement {",
          "deprecated": "Prefer passing in a single options object, i.e. `{slot: 'list'}`.\nIf using `selector` please use `@queryAssignedElements`.\n`@queryAssignedNodes('', false, '.item')` is functionally identical to\n`@queryAssignedElements({slot: '', flatten: false, selector: '.item'})` or\n`@queryAssignedElements({selector: '.item'})`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "module": "node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "queryAssignedNodes",
          "declaration": {
            "name": "queryAssignedNodes",
            "module": "node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/query-async.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "queryAsync",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nreturns a promise that resolves to the result of a querySelector on the\nelement's renderRoot done after the element's `updateComplete` promise\nresolves. When the queried property may change with element state, this\ndecorator can be used instead of requiring users to await the\n`updateComplete` before accessing the property."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "queryAsync",
          "declaration": {
            "name": "queryAsync",
            "module": "node_modules/@lit/reactive-element/development/decorators/query-async.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/query.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "query",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: import(\"./base.js\").ClassElement | import(\"./base.js\").Interface<ReactiveElement>, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "A DOMString containing one or more selectors to match."
            },
            {
              "name": "cache",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "An optional boolean which when true performs the DOM query only\nonce and caches the result.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n\n```ts\nclass MyElement {"
            }
          ],
          "description": "A property decorator that converts a class property into a getter that\nexecutes a querySelector on the element's renderRoot."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "module": "node_modules/@lit/reactive-element/development/decorators/query.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "node_modules/@lit/reactive-element/development/decorators/state.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "state",
          "return": {
            "type": {
              "text": "(protoOrDescriptor: Object | import(\"./base.js\").ClassElement, name?: PropertyKey | undefined) => any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "InternalPropertyDeclaration"
              }
            }
          ],
          "description": "Declares a private or protected reactive property that still triggers\nupdates to the element when it changes. It does not reflect from the\ncorresponding attribute.\n\nProperties declared this way must not be used from HTML or HTML templating\nsystems, they're solely for properties internal to the element. These\nproperties may be renamed by optimization tools like closure compiler."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "state",
          "declaration": {
            "name": "state",
            "module": "node_modules/@lit/reactive-element/development/decorators/state.d.ts"
          }
        }
      ]
    }
  ]
}
