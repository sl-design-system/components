{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/error.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/form-control-mixin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/form-field.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/form.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/hint.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/label.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/update-validity-event.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/validate-event.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-error",
          "declaration": {
            "name": "Error",
            "module": "/src/error.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-form",
          "declaration": {
            "name": "Form",
            "module": "/src/form.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-form-field",
          "declaration": {
            "name": "FormField",
            "module": "/src/form-field.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-hint",
          "declaration": {
            "name": "Hint",
            "module": "/src/hint.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-label",
          "declaration": {
            "name": "Label",
            "module": "/src/label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/error.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component for displaying an error message for a form control.",
          "name": "Error",
          "slots": [
            {
              "description": "The error message to display.",
              "name": "error-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "noIcon",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the icon should be hidden. This can be useful when the form control\nalready shows an icon inside the component itself.",
              "attribute": "no-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ErrorSize"
              },
              "default": "'md'",
              "description": "The size at which the error is displayed.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "no-icon",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the icon should be hidden. This can be useful when the form control\nalready shows an icon inside the component itself.",
              "fieldName": "noIcon"
            },
            {
              "name": "size",
              "type": {
                "text": "ErrorSize"
              },
              "default": "'md'",
              "description": "The size at which the error is displayed.",
              "fieldName": "size"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-error",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#slot",
              "privacy": "private",
              "type": {
                "text": "HTMLSlotElement | undefined"
              },
              "description": "The light DOM slot."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "src/error.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/form-control-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin that adds form control functionality to a component.",
          "name": "FormControlMixin",
          "members": [
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form."
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control."
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again."
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown."
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value for this form control."
            }
          ],
          "events": [
            {
              "type": {
                "text": "ValidateEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name"
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity"
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user."
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again."
            },
            {
              "kind": "method",
              "name": "#emitValidityUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Emits an event so the form-field can update itself."
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#customValidityPromise",
              "privacy": "private",
              "type": {
                "text": "Promise<string> | undefined"
              },
              "description": "The promise that resolves into a custom validity message."
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, an `<input>` or a `<textarea>`."
            },
            {
              "kind": "field",
              "name": "#onInvalid",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value for this form control."
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlMixin",
          "declaration": {
            "name": "FormControlMixin",
            "module": "src/form-control-mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/form-field.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormField",
          "members": [
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLElement & FormControl | undefined"
              },
              "description": "The form control element."
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "A hint that will be shown when there are no validation messages.\nYou can also slot an `<sl-hint>` element.",
              "attribute": "hint"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text for the label. You can also slot an `<sl-label>` element.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "mark",
              "type": {
                "text": "LabelMark | undefined"
              },
              "description": "How to mark this field depending if it is required or not.",
              "attribute": "mark"
            },
            {
              "kind": "event",
              "name": "sl-form-field",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emits when the field is added to a form."
            }
          ],
          "events": [
            {
              "name": "formFieldEvent",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emits when the field is added to a form.",
              "fieldName": "formFieldEvent"
            }
          ],
          "attributes": [
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "A hint that will be shown when there are no validation messages.\nYou can also slot an `<sl-hint>` element.",
              "fieldName": "hint"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text for the label. You can also slot an `<sl-label>` element.",
              "fieldName": "label"
            },
            {
              "name": "mark",
              "type": {
                "text": "LabelMark | undefined"
              },
              "description": "How to mark this field depending if it is required or not.",
              "fieldName": "mark"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-form-field",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onErrorSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onHintSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onLabelSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onUpdateValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "UpdateValidityEvent"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#customError",
              "privacy": "private",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether a custom error has been slotted."
            },
            {
              "kind": "field",
              "name": "#error",
              "privacy": "private",
              "type": {
                "text": "Error | undefined"
              },
              "description": "The error element."
            },
            {
              "kind": "field",
              "name": "#hint",
              "privacy": "private",
              "type": {
                "text": "Hint | undefined"
              },
              "description": "The hint element."
            },
            {
              "kind": "field",
              "name": "#label",
              "privacy": "private",
              "type": {
                "text": "Label | undefined"
              },
              "description": "The label element."
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLElement & FormControl | undefined"
              },
              "description": "The form control element."
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "The validation message that will be displayed when the field is in an invalid state.",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormField",
          "declaration": {
            "name": "FormField",
            "module": "src/form-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/form.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This component is a wrapper for the form controls.\n\nIt is used to provide the ability to report the validity of all the form controls,\nnot just the invalid ones. By calling the `reportValidity()` method, it in turn will\ncall the `reportValidity()` methods of all the form controls.\n\nThis wrapper is necessary because the native form lacks this behavior.\nSee https://github.com/whatwg/html/issues/9878",
          "name": "Form",
          "members": [
            {
              "kind": "field",
              "name": "fields",
              "type": {
                "text": "FormField[]"
              },
              "default": "[]",
              "description": "The fields in the form."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T"
              },
              "readonly": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-form",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onFormField",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#updateMarkedFields",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this, {\n    'sl-form-field': this.#onFormField\n  })",
              "description": "Events controller."
            },
            {
              "kind": "field",
              "name": "#showValidity",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "fields",
              "type": {
                "text": "FormField[]"
              },
              "default": "[]",
              "description": "The fields in the form."
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T"
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Form",
          "declaration": {
            "name": "Form",
            "module": "src/form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hint.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component for displaying a hint for a form control.",
          "name": "Hint",
          "slots": [
            {
              "description": "The hint to display.",
              "name": "hint-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "HintSize"
              },
              "default": "'md'",
              "description": "The size at which the hint is displayed.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "HintSize"
              },
              "default": "'md'",
              "description": "The size at which the hint is displayed.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-hint",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "#slot",
              "privacy": "private",
              "type": {
                "text": "HTMLSlotElement | undefined"
              },
              "description": "The light DOM slot."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/hint.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Label",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the form control is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "The DOM id of the form control this is linked to.",
              "attribute": "for"
            },
            {
              "kind": "field",
              "name": "mark",
              "type": {
                "text": "LabelMark | undefined"
              },
              "description": "Indicates whether the label should indicate if the field is optional or required.",
              "attribute": "mark"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "LabelSize"
              },
              "default": "'md'",
              "description": "The size of the label.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the form control is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "The DOM id of the form control this is linked to.",
              "fieldName": "for"
            },
            {
              "name": "mark",
              "type": {
                "text": "LabelMark | undefined"
              },
              "description": "Indicates whether the label should indicate if the field is optional or required.",
              "fieldName": "mark"
            },
            {
              "name": "size",
              "type": {
                "text": "LabelSize"
              },
              "default": "'md'",
              "description": "The size of the label.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-label",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#update",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#formControlId",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              },
              "description": "The actual form control id this label links to."
            },
            {
              "kind": "field",
              "name": "#label",
              "privacy": "private",
              "type": {
                "text": "HTMLLabelElement | undefined"
              },
              "description": "The label instance in the light DOM."
            },
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "default": "new MutationObserver(() => this.#update())",
              "description": "Observe the form control for changes to the required attribute."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/update-validity-event.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Emits when the validity of the form control changes.",
          "name": "UpdateValidityEvent",
          "members": [
            {
              "description": "What kind of validity should be shown to the user",
              "name": "showValidity",
              "kind": "field"
            },
            {
              "description": "The validity state of the element",
              "name": "valid",
              "kind": "field"
            },
            {
              "description": "The validation message of the element",
              "name": "validationMessage",
              "kind": "field"
            }
          ],
          "events": [
            {
              "name": "sl-update-validity"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/update-validity-event.ts"
          },
          "methods": [],
          "fields": [
            {
              "description": "The validity state of the element",
              "name": "valid",
              "kind": "field"
            },
            {
              "description": "The validation message of the element",
              "name": "validationMessage",
              "kind": "field"
            },
            {
              "description": "What kind of validity should be shown to the user",
              "name": "showValidity",
              "kind": "field"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UpdateValidityEvent",
          "declaration": {
            "name": "UpdateValidityEvent",
            "module": "src/update-validity-event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/validate-event.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Emits when the form control can be validated.",
          "name": "ValidateEvent",
          "events": [
            {
              "name": "sl-validate"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/validate-event.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ValidateEvent",
          "declaration": {
            "name": "ValidateEvent",
            "module": "src/validate-event.ts"
          }
        }
      ]
    }
  ]
}
