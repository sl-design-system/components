{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/error.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/form-control-mixin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/form-field.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/hint.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/label.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/update-validity-event.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-error",
          "declaration": {
            "name": "Error",
            "module": "/src/error.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-form-field",
          "declaration": {
            "name": "FormField",
            "module": "/src/form-field.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-hint",
          "declaration": {
            "name": "Hint",
            "module": "/src/hint.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-label",
          "declaration": {
            "name": "Label",
            "module": "/src/label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/error.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component for displaying an error message for a form control.",
          "name": "Error",
          "slots": [
            {
              "description": "The error message to display.",
              "name": "error-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ErrorSize"
              },
              "default": "'md'",
              "description": "The size at which the error is displayed.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "ErrorSize"
              },
              "default": "'md'",
              "description": "The size at which the error is displayed.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-error",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "#slot",
              "privacy": "private",
              "type": {
                "text": "HTMLSlotElement | undefined"
              },
              "description": "The light DOM slot."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "src/error.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/form-control-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin that adds form control functionality to a component.",
          "name": "FormControlMixin",
          "members": [
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity"
            },
            {
              "kind": "field",
              "name": "extendsFormControlMixin",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "description": "This is necessary so we can check if an element implements this Mixin, since the\n`FormControl` class isn't a generic class we can use in an `instanceof` comparison."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "report",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the form control should report the validity of the control."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again."
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  },
                  "description": "The form control element."
                }
              ],
              "description": "This tells the mixin what the form control element is. This can either be a native input\nor textarea element, or a Form Associated Custom Element (FACE) with an internals property.\n\nThe form control element must be either the same as the FormControlMixin host (in the case of\na FACE), or a child of it. Otherwise we can't link the validation message to the form control\nelement, which is necessary for accessibility."
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "FormControlShowValidity"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the validity of the form control. This does not *change* the `validity` of the\nform control, it just updates the display of any validation message. Changing the validity\nis up to the form control itself.\n\nNOTE: This method updates the `showValidity` property and therefore should be called from\n`willUpdate`, never from `updated` or you will trigger a new lifecycle update."
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized message that describes the validation constraints\nthat the control does not satisfy (if any). The string is empty if the control is\nnot a candidate for constraint validation, or it satisfies its constraints.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true
            }
          ],
          "events": [
            {
              "type": {
                "text": "UpdateValidityEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name"
            },
            {
              "name": "show-validity",
              "type": {
                "text": "FormControlShowValidity"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity"
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user."
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the validity of the form control. This does not *change* the `validity` of the\nform control, it just updates the display of any validation message. Changing the validity\nis up to the form control itself.\n\nNOTE: This method updates the `showValidity` property and therefore should be called from\n`willUpdate`, never from `updated` or you will trigger a new lifecycle update."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again."
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  },
                  "description": "The form control element."
                }
              ],
              "description": "This tells the mixin what the form control element is. This can either be a native input\nor textarea element, or a Form Associated Custom Element (FACE) with an internals property.\n\nThe form control element must be either the same as the FormControlMixin host (in the case of\na FACE), or a child of it. Otherwise we can't link the validation message to the form control\nelement, which is necessary for accessibility."
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "extendsFormControlMixin",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "description": "This is necessary so we can check if an element implements this Mixin, since the\n`FormControl` class isn't a generic class we can use in an `instanceof` comparison."
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, an `<input>` or a `<textarea>`."
            },
            {
              "kind": "field",
              "name": "#onInvalid",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "report",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the form control should report the validity of the control."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized message that describes the validation constraints\nthat the control does not satisfy (if any). The string is empty if the control is\nnot a candidate for constraint validation, or it satisfies its constraints.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlMixin",
          "declaration": {
            "name": "FormControlMixin",
            "module": "src/form-control-mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/form-field.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormField",
          "members": [
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "A hint that will be shown when there are no validation messages.\nYou can also slot an `<sl-hint>` element.",
              "attribute": "hint"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text for the label. You can also slot an `<sl-label>` element.",
              "attribute": "label"
            }
          ],
          "attributes": [
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "A hint that will be shown when there are no validation messages.\nYou can also slot an `<sl-hint>` element.",
              "fieldName": "hint"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text for the label. You can also slot an `<sl-label>` element.",
              "fieldName": "label"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-form-field",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onErrorSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onHintSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onLabelSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onUpdateValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "UpdateValidityEvent"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#error",
              "privacy": "private",
              "type": {
                "text": "Error | undefined"
              },
              "description": "The error element."
            },
            {
              "kind": "field",
              "name": "#formControl",
              "privacy": "private",
              "type": {
                "text": "HTMLElement & FormControl | undefined"
              },
              "description": "The form control element."
            },
            {
              "kind": "field",
              "name": "#hint",
              "privacy": "private",
              "type": {
                "text": "Hint | undefined"
              },
              "description": "The hint element."
            },
            {
              "kind": "field",
              "name": "#label",
              "privacy": "private",
              "type": {
                "text": "Label | undefined"
              },
              "description": "The label element."
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "string | undefined"
              },
              "description": "The validation message that will be displayed when the field is in an invalid state.",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormField",
          "declaration": {
            "name": "FormField",
            "module": "src/form-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/hint.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component for displaying a hint for a form control.",
          "name": "Hint",
          "slots": [
            {
              "description": "The hint to display.",
              "name": "hint-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "HintSize"
              },
              "default": "'md'",
              "description": "The size at which the hint is displayed.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "HintSize"
              },
              "default": "'md'",
              "description": "The size at which the hint is displayed.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-hint",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "#slot",
              "privacy": "private",
              "type": {
                "text": "HTMLSlotElement | undefined"
              },
              "description": "The light DOM slot."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/hint.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Label",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the form control is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "The DOM id of the form control this is linked to.",
              "attribute": "for"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the label.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the form control is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "The DOM id of the form control this is linked to.",
              "fieldName": "for"
            },
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the label.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-label",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#update",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#formControlId",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              },
              "description": "The actual form control id this label links to."
            },
            {
              "kind": "field",
              "name": "#label",
              "privacy": "private",
              "type": {
                "text": "HTMLLabelElement | undefined"
              },
              "description": "The label instance in the light DOM."
            },
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "default": "new MutationObserver(() => void this.#update())",
              "description": "Observe the form control for changes to the required attribute."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/update-validity-event.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UpdateValidityEvent",
          "superclass": {
            "name": "Event",
            "module": "src/update-validity-event.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UpdateValidityEvent",
          "declaration": {
            "name": "UpdateValidityEvent",
            "module": "src/update-validity-event.ts"
          }
        }
      ]
    }
  ]
}
