{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/column-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/drag-handle-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/events.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/filter-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/grid.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/selection-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/sort-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/text-field-column.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-grid",
          "declaration": {
            "name": "Grid",
            "module": "/src/grid.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-column",
          "declaration": {
            "name": "GridColumn",
            "module": "/src/column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-column-group",
          "declaration": {
            "name": "GridColumnGroup",
            "module": "/src/column-group.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-drag-handle-column",
          "declaration": {
            "name": "GridDragHandleColumn",
            "module": "/src/drag-handle-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-filter-column",
          "declaration": {
            "name": "GridFilterColumn",
            "module": "/src/filter-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-select-column",
          "declaration": {
            "name": "GridSelectColumn",
            "module": "/src/select-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-selection-column",
          "declaration": {
            "name": "GridSelectionColumn",
            "module": "/src/selection-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-sort-column",
          "declaration": {
            "name": "GridSortColumn",
            "module": "/src/sort-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-text-field-column",
          "declaration": {
            "name": "GridTextFieldColumn",
            "module": "/src/text-field-column.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/column-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridColumnGroup",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "default": "[]",
              "description": "The nested columns in the group."
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "The width of the group column is either manually specified, or the sum of the nested columns.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/src/column.js"
          },
          "tagName": "sl-grid-column-group",
          "customElement": true,
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "events": [
            {
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdate",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "description": "Actual width of the column.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "default": "[]",
              "description": "The nested columns in the group."
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridColumnGroup",
          "declaration": {
            "name": "GridColumnGroup",
            "module": "src/column-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align"
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width"
            },
            {
              "kind": "event",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed."
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance."
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow"
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header"
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed."
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts"
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path"
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell."
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid."
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes."
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width"
            }
          ],
          "events": [
            {
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdate"
            }
          ],
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align"
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth"
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow"
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header"
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path"
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts"
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky"
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-grid-column",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed."
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes."
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)"
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "description": "Actual width of the column."
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance."
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell."
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridColumn",
          "declaration": {
            "name": "GridColumn",
            "module": "src/column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/drag-handle-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridDragHandleColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/src/column.js"
          },
          "tagName": "sl-grid-drag-handle-column",
          "customElement": true,
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "events": [
            {
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdate",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "#onStartDrag",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "description": "Actual width of the column.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridDragHandleColumn",
          "declaration": {
            "name": "GridDragHandleColumn",
            "module": "src/drag-handle-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridActiveItemChangeEvent",
          "superclass": {
            "name": "GridEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "GridColumnEvent",
          "superclass": {
            "name": "GridEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "GridEvent",
          "superclass": {
            "name": "Event",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "GridFilterValueChangeEvent",
          "superclass": {
            "name": "GridColumnEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "GridItemDropEvent",
          "superclass": {
            "name": "GridItemEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "GridItemEvent",
          "superclass": {
            "name": "GridEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "GridSortDirectionChangeEvent",
          "superclass": {
            "name": "GridColumnEvent",
            "module": "src/events.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridEvent",
          "declaration": {
            "name": "GridEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "js",
          "name": "GridItemEvent",
          "declaration": {
            "name": "GridItemEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "js",
          "name": "GridItemDropEvent",
          "declaration": {
            "name": "GridItemDropEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "js",
          "name": "GridActiveItemChangeEvent",
          "declaration": {
            "name": "GridActiveItemChangeEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "js",
          "name": "GridColumnEvent",
          "declaration": {
            "name": "GridColumnEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "js",
          "name": "GridFilterValueChangeEvent",
          "declaration": {
            "name": "GridFilterValueChangeEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "js",
          "name": "GridSortDirectionChangeEvent",
          "declaration": {
            "name": "GridSortDirectionChangeEvent",
            "module": "src/events.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/filter-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridFilterColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilterFunction<T> | undefined"
              },
              "description": "The filter function if you want to do custom filtering."
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "internalOptions",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The internal options if none are provided."
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "select | text"
              },
              "description": "The mode for the filter:\n- `select`: The filter will allow you to select from a list of options. If none\nare provided, the filter will create a list of options based on the column's values\n- `text`: The filter will be a text field.",
              "attribute": "mode"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The options you can choose from to filter. If not provided,\nthe filter will be a text field."
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[] | undefined"
              },
              "description": "The value for this filter column.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "type": {
                "text": "select | text"
              },
              "description": "The mode for the filter:\n- `select`: The filter will allow you to select from a list of options. If none\nare provided, the filter will create a list of options based on the column's values\n- `text`: The filter will be a text field.",
              "fieldName": "mode"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[] | undefined"
              },
              "description": "The value for this filter column.",
              "fieldName": "value"
            },
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/src/column.js"
          },
          "tagName": "sl-grid-filter-column",
          "customElement": true,
          "events": [
            {
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdate",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "internalOptions",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The internal options if none are provided."
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilterFunction<T> | undefined"
              },
              "description": "The filter function if you want to do custom filtering."
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The options you can choose from to filter. If not provided,\nthe filter will be a text field."
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "description": "Actual width of the column.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridFilterColumn",
          "declaration": {
            "name": "GridFilterColumn",
            "module": "src/filter-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/filter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridFilter",
          "members": [
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn<T>"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilterFunction<T> | undefined"
              },
              "description": "The custom filter"
            },
            {
              "kind": "event",
              "name": "filterChange",
              "type": {
                "text": "EventEmitter<GridFilterChange>"
              },
              "description": "Emits when the filter has been added or removed."
            },
            {
              "kind": "event",
              "name": "filterValueChange",
              "type": {
                "text": "EventEmitter<GridFilterValueChangeEvent<T>>"
              },
              "description": "Emits when the value of the this filter has changed."
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "GridFilterMode | undefined"
              },
              "description": "The mode of the filter.",
              "attribute": "mode"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The filter options."
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the field to filter on.",
              "attribute": "path"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[] | undefined"
              },
              "attribute": "value"
            }
          ],
          "events": [
            {
              "name": "filterChange",
              "type": {
                "text": "EventEmitter<GridFilterChange>"
              },
              "description": "Emits when the filter has been added or removed.",
              "fieldName": "filterChange"
            },
            {
              "name": "filterValueChange",
              "type": {
                "text": "EventEmitter<GridFilterValueChangeEvent<T>>"
              },
              "description": "Emits when the value of the this filter has changed.",
              "fieldName": "filterValueChange"
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "type": {
                "text": "GridFilterMode | undefined"
              },
              "description": "The mode of the filter.",
              "fieldName": "mode"
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the field to filter on.",
              "fieldName": "path"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[] | undefined"
              },
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "GridFilterOption"
                  }
                },
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onHide",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onInput",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLInputElement }"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "string | string[] | undefined"
              },
              "description": "The filter value(s)."
            },
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn<T>"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilterFunction<T> | undefined"
              },
              "description": "The custom filter"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The filter options."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridFilter",
          "declaration": {
            "name": "GridFilter",
            "module": "src/filter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/grid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Grid",
          "members": [
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "T | undefined"
              },
              "description": "The active item in the grid."
            },
            {
              "kind": "event",
              "name": "activeItemChange",
              "type": {
                "text": "EventEmitter<GridActiveItemChangeEvent<T>>"
              },
              "description": "Emits when the active item changes"
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "DataSource<T> | undefined"
              },
              "description": "Provide your own implementation for getting the data."
            },
            {
              "kind": "field",
              "name": "draggableRows",
              "type": {
                "text": "GridDraggableRows | undefined"
              },
              "description": "Whether you can drag rows in the grid. If you use the drag-handle column,\nthen this property is automatically set by the column to 'between'.",
              "attribute": "draggable-rows"
            },
            {
              "kind": "field",
              "name": "dropFilter",
              "type": {
                "text": "GridDropFilter<T> | undefined"
              },
              "description": "Determines if or what kind of drop target the given item is:\n- boolean: the item is valid drop target based on the draggableRows value\n- 'between': the item is a valid drop target between\n- 'on-top': the item is a valid drop target to drop on top of"
            },
            {
              "kind": "event",
              "name": "gridDragend",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when a drag operation has finished."
            },
            {
              "kind": "event",
              "name": "gridDragstart",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when a drag operation is starting."
            },
            {
              "kind": "event",
              "name": "gridDrop",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when an item has been dropped."
            },
            {
              "kind": "event",
              "name": "gridItemsChange",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when the items in the grid have changed."
            },
            {
              "kind": "event",
              "name": "gridStateChange",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when the state in the grid has changed."
            },
            {
              "kind": "field",
              "name": "itemParts",
              "type": {
                "text": "GridItemParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<tr>` so it can be styled externally."
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[] | undefined"
              },
              "description": "An array of items to be displayed in the grid.",
              "attribute": "items"
            },
            {
              "kind": "field",
              "name": "itemsGroupBy",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the attribute to group the items on.",
              "attribute": "items-group-by",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "model",
              "default": "new GridViewModel<T>(this)",
              "description": "The model used for rendering the grid."
            },
            {
              "kind": "field",
              "name": "noBorder",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hide the border around the grid when true.",
              "attribute": "no-border",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noRowBorder",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hides the border between rows when true.",
              "attribute": "no-row-border",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "recalculateColumnWidths",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Updates the `width` of all columns which have `autoWidth` set to `true`."
            },
            {
              "kind": "method",
              "name": "renderGroupRow",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "group",
                  "type": {
                    "text": "GridViewModelGroup"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderItem",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderItemRow",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "readonly": true,
              "default": "new SelectionController<T>(this)",
              "description": "Selection manager."
            },
            {
              "kind": "field",
              "name": "striped",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Uses alternating background colors for the rows when set.",
              "attribute": "striped",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tbody",
              "type": {
                "text": "HTMLTableSectionElement"
              },
              "description": "The `<tbody>` element."
            },
            {
              "kind": "field",
              "name": "thead",
              "type": {
                "text": "HTMLTableSectionElement"
              },
              "description": "The `<thead>` element."
            }
          ],
          "events": [
            {
              "name": "activeItemChange",
              "type": {
                "text": "EventEmitter<GridActiveItemChangeEvent<T>>"
              },
              "description": "Emits when the active item changes",
              "fieldName": "activeItemChange"
            },
            {
              "name": "gridDragstart",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when a drag operation is starting.",
              "fieldName": "gridDragstart"
            },
            {
              "name": "gridDragend",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when a drag operation has finished.",
              "fieldName": "gridDragend"
            },
            {
              "name": "gridDrop",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when an item has been dropped.",
              "fieldName": "gridDrop"
            },
            {
              "name": "gridItemsChange",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when the items in the grid have changed.",
              "fieldName": "gridItemsChange"
            },
            {
              "name": "gridStateChange",
              "type": {
                "text": "EventEmitter<GridEvent<T>>"
              },
              "description": "Emits when the state in the grid has changed.",
              "fieldName": "gridStateChange"
            }
          ],
          "attributes": [
            {
              "name": "draggable-rows",
              "type": {
                "text": "GridDraggableRows | undefined"
              },
              "description": "Whether you can drag rows in the grid. If you use the drag-handle column,\nthen this property is automatically set by the column to 'between'.",
              "fieldName": "draggableRows"
            },
            {
              "name": "items",
              "type": {
                "text": "T[] | undefined"
              },
              "description": "An array of items to be displayed in the grid.",
              "fieldName": "items"
            },
            {
              "name": "items-group-by",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the attribute to group the items on.",
              "fieldName": "itemsGroupBy"
            },
            {
              "name": "no-border",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hide the border around the grid when true.",
              "fieldName": "noBorder"
            },
            {
              "name": "no-row-border",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hides the border between rows when true.",
              "fieldName": "noRowBorder"
            },
            {
              "name": "striped",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Uses alternating background colors for the rows when set.",
              "fieldName": "striped"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-grid",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderItem",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderItemRow",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderGroupRow",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "group",
                  "type": {
                    "text": "GridViewModelGroup"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "recalculateColumnWidths",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Updates the `width` of all columns which have `autoWidth` set to `true`."
            },
            {
              "kind": "method",
              "name": "#onClickRow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onColumnUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: GridColumn<T> }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onDragstart",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "DragEvent"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onDragenter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "DragEvent"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onDragover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "DragEvent"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onDragend",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "DragEvent"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onDrop",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "DragEvent"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onDropOnPlaceholder",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onFilterChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail, target }",
                  "type": {
                    "text": "CustomEvent<GridFilterChange> & { target: GridFilter<T> }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onFilterValueChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onGroupSelect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<boolean>"
                  }
                },
                {
                  "name": "group",
                  "type": {
                    "text": "GridViewModelGroup"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onGroupToggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<boolean>"
                  }
                },
                {
                  "name": "group",
                  "type": {
                    "text": "GridViewModelGroup"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSortDirectionChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event & { target: GridSorter<T> }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSorterChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail, target }",
                  "type": {
                    "text": "CustomEvent<GridSorterChange> & { target: GridSorter<T> }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onVisibilityChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#addScopedElements",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "col",
                  "type": {
                    "text": "GridColumn<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#applyFilters",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#applySorters",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#dragItem",
              "privacy": "private",
              "type": {
                "text": "T | undefined"
              },
              "description": "The item being dragged."
            },
            {
              "kind": "field",
              "name": "#dropPlaceholder",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "The placeholder element where the drag item will be dropped."
            },
            {
              "kind": "field",
              "name": "#dropTargetMode",
              "privacy": "private",
              "type": {
                "text": "'between' | 'on-top' | undefined"
              },
              "description": "The mode if the drag item is dropped on the current target."
            },
            {
              "kind": "field",
              "name": "#filters",
              "privacy": "private",
              "type": {
                "text": "Array<GridFilter<T>>"
              },
              "default": "[]",
              "description": "The filters for this grid."
            },
            {
              "kind": "field",
              "name": "#initialColumnWidthsCalculated",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag for calculating the column widths only once."
            },
            {
              "kind": "field",
              "name": "#mutationObserver",
              "privacy": "private",
              "default": "new MutationObserver(() => {\n    this.#mutationObserver?.disconnect();\n\n    // This is a workaround for the virtualizer not taking the border width into account\n    // We convert the min-height to a CSS variable so we can use it in the styles and\n    // add the border-width to the eventual min-height value.\n    this.style.setProperty('--sl-grid-tbody-min-height', this.tbody.style.minHeight);\n    this.tbody.style.minHeight = '';\n\n    this.#mutationObserver?.observe(this.tbody, { attributes: true, attributeFilter: ['style'] });\n  })",
              "description": "Observe the tbody style changes."
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(entries => {\n    const {\n      contentBoxSize: [{ inlineSize }]\n    } = entries[0];\n\n    this.style.setProperty('--sl-grid-width', `${inlineSize}px`);\n  })",
              "description": "Observe the grid width."
            },
            {
              "kind": "field",
              "name": "#sorters",
              "privacy": "private",
              "type": {
                "text": "Array<GridSorter<T>>"
              },
              "default": "[]",
              "description": "The sorters for this grid."
            },
            {
              "kind": "field",
              "name": "#virtualizer",
              "privacy": "private",
              "type": {
                "text": "Virtualizer | undefined"
              },
              "description": "The virtualizer instance."
            },
            {
              "kind": "field",
              "name": "selection",
              "readonly": true,
              "default": "new SelectionController<T>(this)",
              "description": "Selection manager."
            },
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "T | undefined"
              },
              "description": "The active item in the grid."
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "DataSource<T> | undefined"
              },
              "description": "Provide your own implementation for getting the data."
            },
            {
              "kind": "field",
              "name": "dropFilter",
              "type": {
                "text": "GridDropFilter<T> | undefined"
              },
              "description": "Determines if or what kind of drop target the given item is:\n- boolean: the item is valid drop target based on the draggableRows value\n- 'between': the item is a valid drop target between\n- 'on-top': the item is a valid drop target to drop on top of"
            },
            {
              "kind": "field",
              "name": "itemParts",
              "type": {
                "text": "GridItemParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<tr>` so it can be styled externally."
            },
            {
              "kind": "field",
              "name": "model",
              "default": "new GridViewModel<T>(this)",
              "description": "The model used for rendering the grid."
            },
            {
              "kind": "field",
              "name": "tbody",
              "type": {
                "text": "HTMLTableSectionElement"
              },
              "description": "The `<tbody>` element."
            },
            {
              "kind": "field",
              "name": "thead",
              "type": {
                "text": "HTMLTableSectionElement"
              },
              "description": "The `<thead>` element."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Grid",
          "declaration": {
            "name": "Grid",
            "module": "src/grid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/group-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridGroupHeader",
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the group is expanded or collapsed.",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The group heading.",
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Wether you can select the entire group.",
              "attribute": "selectable"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "'all' | 'some' | 'none'"
              },
              "default": "'none'",
              "description": "Whether the group is selected.",
              "attribute": "selected"
            },
            {
              "kind": "event",
              "name": "sl-select",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "description": "Emits when the user changes the group selection."
            },
            {
              "kind": "event",
              "name": "sl-toggle",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "description": "Emits when the user collapses/expands the group."
            }
          ],
          "events": [
            {
              "name": "selectEvent",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "description": "Emits when the user changes the group selection.",
              "fieldName": "selectEvent"
            },
            {
              "name": "toggleEvent",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "description": "Emits when the user collapses/expands the group.",
              "fieldName": "toggleEvent"
            }
          ],
          "attributes": [
            {
              "name": "expanded",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the group is expanded or collapsed.",
              "fieldName": "expanded"
            },
            {
              "name": "heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The group heading.",
              "fieldName": "heading"
            },
            {
              "name": "selectable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Wether you can select the entire group.",
              "fieldName": "selectable"
            },
            {
              "name": "selected",
              "type": {
                "text": "'all' | 'some' | 'none'"
              },
              "default": "'none'",
              "description": "Whether the group is selected.",
              "fieldName": "selected"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onToggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<boolean>"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridGroupHeader",
          "declaration": {
            "name": "GridGroupHeader",
            "module": "src/group-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSelectColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Array<{ label: string; value: unknown }> | string[] | undefined"
              },
              "description": "The options for the select.",
              "attribute": "options"
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "options",
              "type": {
                "text": "Array<{ label: string; value: unknown }> | string[] | undefined"
              },
              "description": "The options for the select.",
              "fieldName": "options"
            },
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/src/column.js"
          },
          "tagName": "sl-grid-select-column",
          "customElement": true,
          "events": [
            {
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdate",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "#onChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<unknown>"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "description": "Actual width of the column.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSelectColumn",
          "declaration": {
            "name": "GridSelectColumn",
            "module": "src/select-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/selection-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSelectionColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoSelect",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, the active rows get selected automatically.",
              "attribute": "auto-select"
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedCount",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSelectionHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectAll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, all items are selected.",
              "attribute": "select-all"
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "auto-select",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, the active rows get selected automatically.",
              "fieldName": "autoSelect"
            },
            {
              "name": "select-all",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, all items are selected.",
              "fieldName": "selectAll"
            },
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/src/column.js"
          },
          "tagName": "sl-grid-selection-column",
          "customElement": true,
          "events": [
            {
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdate",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSelectionHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedCount",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onActiveItemChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ item, relatedEvent }",
                  "type": {
                    "text": "GridActiveItemChangeEvent<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onToggleSelect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onToggleSelectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "description": "Actual width of the column.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSelectionColumn",
          "declaration": {
            "name": "GridSelectionColumn",
            "module": "src/selection-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/sort-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSortColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction this columns should be sorted in.",
              "attribute": "direction"
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSortFunction<T> | undefined"
              },
              "description": "If you want to provide a custom sort function, you can via this property."
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction this columns should be sorted in.",
              "fieldName": "direction"
            },
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/src/column.js"
          },
          "tagName": "sl-grid-sort-column",
          "customElement": true,
          "events": [
            {
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdate",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSortFunction<T> | undefined"
              },
              "description": "If you want to provide a custom sort function, you can via this property."
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "description": "Actual width of the column.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSortColumn",
          "declaration": {
            "name": "GridSortColumn",
            "module": "src/sort-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/sorter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSorter",
          "members": [
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn<T>"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction in which to sort the items.",
              "attribute": "direction",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the field to sort on.",
              "attribute": "path"
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "event",
              "name": "sortDirectionChange",
              "type": {
                "text": "EventEmitter<GridSortDirectionChangeEvent<T>>"
              },
              "description": "Emits when the direction has changed."
            },
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSortFunction<T> | undefined"
              },
              "description": "An optional custom sort function."
            },
            {
              "kind": "event",
              "name": "sorterChange",
              "type": {
                "text": "EventEmitter<GridSorterChange>"
              },
              "description": "Emits when the sorter has been added or removed."
            }
          ],
          "events": [
            {
              "name": "sorterChange",
              "type": {
                "text": "EventEmitter<GridSorterChange>"
              },
              "description": "Emits when the sorter has been added or removed.",
              "fieldName": "sorterChange"
            },
            {
              "name": "sortDirectionChange",
              "type": {
                "text": "EventEmitter<GridSortDirectionChangeEvent<T>>"
              },
              "description": "Emits when the direction has changed.",
              "fieldName": "sortDirectionChange"
            }
          ],
          "attributes": [
            {
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction in which to sort the items.",
              "fieldName": "direction"
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the field to sort on.",
              "fieldName": "path"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#toggleDirection",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)"
            },
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn<T>"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSortFunction<T> | undefined"
              },
              "description": "An optional custom sort function."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSorter",
          "declaration": {
            "name": "GridSorter",
            "module": "src/sorter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridTextFieldColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/src/column.js"
          },
          "tagName": "sl-grid-text-field-column",
          "customElement": true,
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "events": [
            {
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<GridColumnEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdate",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "#onChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<string>"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "description": "Actual width of the column.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridTextFieldColumn",
          "declaration": {
            "name": "GridTextFieldColumn",
            "module": "src/text-field-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/view-model.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridViewModel",
          "members": [
            {
              "kind": "field",
              "name": "columnDefinitions",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "description": "Sets the available columns. Not all columns may be rendered, depending on the view state."
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "description": "Returns an array of visible columns.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "DataSource<T> | undefined"
              }
            },
            {
              "kind": "method",
              "name": "getGroupSelection",
              "return": {
                "type": {
                  "text": "'all' | 'some' | 'none'"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns the selected state of the group."
            },
            {
              "kind": "method",
              "name": "getGroupState",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns true if the group is expanded, false if collapsed."
            },
            {
              "kind": "method",
              "name": "getStickyColumnOffset",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Returns the left offset, taking any sticky columns into account."
            },
            {
              "kind": "field",
              "name": "groups",
              "type": {
                "text": "string[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "headerRows",
              "type": {
                "text": "Array<Array<GridColumn<T>>>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "T[]"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "toggleColumn",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "visible",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the visibility of the column."
            },
            {
              "kind": "method",
              "name": "toggleGroup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collapse",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the visibility of the group."
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "toggleColumn",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "visible",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the visibility of the column."
            },
            {
              "kind": "method",
              "name": "toggleGroup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collapse",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the visibility of the group."
            },
            {
              "kind": "method",
              "name": "getGroupSelection",
              "return": {
                "type": {
                  "text": "'all' | 'some' | 'none'"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns the selected state of the group."
            },
            {
              "kind": "method",
              "name": "getGroupState",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns true if the group is expanded, false if collapsed."
            },
            {
              "kind": "method",
              "name": "getStickyColumnOffset",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Returns the left offset, taking any sticky columns into account."
            },
            {
              "kind": "method",
              "name": "#getHeaderRows",
              "return": {
                "type": {
                  "text": "Array<Array<GridColumn<T>>>"
                }
              },
              "parameters": [
                {
                  "name": "columns",
                  "type": {
                    "text": "Array<GridColumn<T>>"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "#columnDefinitions",
              "privacy": "private",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#columns",
              "privacy": "private",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#dataSource",
              "privacy": "private",
              "type": {
                "text": "DataSource<T> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#grid",
              "privacy": "private",
              "type": {
                "text": "Grid<T>"
              },
              "default": "grid"
            },
            {
              "kind": "field",
              "name": "#groups",
              "privacy": "private",
              "default": "new Map<string, boolean>()"
            },
            {
              "kind": "field",
              "name": "#headerRows",
              "privacy": "private",
              "type": {
                "text": "Array<Array<GridColumn<T>>>"
              },
              "default": "[[]]"
            },
            {
              "kind": "field",
              "name": "#rows",
              "privacy": "private",
              "type": {
                "text": "T[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "columnDefinitions",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "description": "Sets the available columns. Not all columns may be rendered, depending on the view state."
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "description": "Returns an array of visible columns.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "DataSource<T> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "groups",
              "type": {
                "text": "string[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "headerRows",
              "type": {
                "text": "Array<Array<GridColumn<T>>>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "T[]"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "GridViewModelGroup"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridViewModelGroup",
          "declaration": {
            "name": "GridViewModelGroup",
            "module": "src/view-model.ts"
          }
        },
        {
          "kind": "js",
          "name": "GridViewModel",
          "declaration": {
            "name": "GridViewModel",
            "module": "src/view-model.ts"
          }
        }
      ]
    }
  ]
}
