// stylelint-disable color-no-hex
:host {
  --_border: var(--_border-width) solid var(--_border-color);
  --_border-color: var(--sl-color-grid-border);
  --_border-width: var(--sl-size-border-width-default);
  --_border-radius: 3px;
  --_cell-background: #fff;
  --_cell-border: var(--_border-width) solid var(--_border-color);
  --_cell-padding-block: var(--sl-space-150);
  --_cell-padding-inline: var(--sl-space-200);
  --_drag-handle-inline-size: 28px;
  --_dragging-background: #ddeffe;
  --_dragging-border: var(--_border-width) solid #056dc2;
  --_dragging-opacity: 0.8;
  --_drop-target-outline: 2px solid #056dc2;
  --_drop-target-outline-offset: -2px;
  --_font: var(--sl-text-body-md-normal);
  --_group-background: #eee;
  --_header-background: var(--sl-color-grid-header);
  --_header-font-weight: 600;
  --_header-padding-block: 0.5rem;
  --_header-padding-inline: 1rem;
  --_vertical-border: none;
  --_vertical-border-offset: 8px;
  --_selected-background: #338bff0f;
  --_striped-background: var(--sl-color-grid-zebra);

  display: block;
  font: var(--_font);
}

:host([items-group-by]) {
  --_first-cell-padding-inline-start: 28px;
}

:host([no-border]) {
  --_border: none;
}

:host([no-row-border]) {
  --_cell-border: none;
}

:host([column-divider]) {
  // this is needed because we need to set the vertical-border-offset separately for the th,
  // when this is set on a highter level than the `--_vertical-border-offset` var it can't "reach" it.
  td,
  th {
    --_vertical-border: linear-gradient(var(--_border-color), var(--_border-color)) 0
      calc(100% - var(--_vertical-border-offset)) / var(--_border-width) calc(100% - var(--_vertical-border-offset) * 2)
      no-repeat;

    &:first-of-type {
      --_vertical-border: none;
    }
  }
}

:host([striped]) tr[part~='even'] {
  --_cell-background: var(--_striped-background);
}

table {
  display: flex;
  flex-direction: column;
  inline-size: fit-content;
  min-inline-size: 100%;
}

thead,
tbody {
  border: var(--_border);
  border-radius: var(--_border-radius);
  box-sizing: border-box;
}

thead {
  border-end-end-radius: 0;
  border-end-start-radius: 0;
  inset-block-start: 0;
  max-inline-size: var(--sl-grid-width);
  overflow-x: hidden;
  position: sticky;
  z-index: 1;
}

tbody {
  border-block-start: 0;
  border-start-end-radius: 0;
  border-start-start-radius: 0;
  max-inline-size: var(--sl-grid-width);
  min-block-size: calc(var(--sl-grid-tbody-min-height) + var(--_border-width));
  overflow: auto clip;

  &.drop-target {
    position: relative;

    &::before {
      border: var(--_drop-target-outline);
      content: '';
      inset: 0;
      pointer-events: none;
      position: absolute;
      z-index: 1; // Ensure drop target outline is above the rows
    }
  }
}

tr {
  display: flex;
  inline-size: max(var(--sl-grid-row-width), 100%);
  margin: 0;

  &:last-of-type {
    --_cell-border: 0;
  }

  &[draggable] {
    cursor: grabbing;
  }

  &[part~='group'] {
    z-index: 1; // Ensure drag handles don't "shine through" group headers
  }

  &[part~='dragging'] {
    position: relative;

    & ::before {
      background: #eaeaea;
      content: '';
      inset: 0;
      position: absolute;
    }
  }

  &[part~='selected'] {
    --_cell-background: var(--_selected-background);
  }

  &.drop-target {
    outline: var(--_drop-target-outline);
    outline-offset: var(--_drop-target-outline-offset);
  }
}

th,
td {
  align-items: center;
  background: var(--_vertical-border), var(--_cell-background);
  box-sizing: border-box;
  display: inline-flex;
  flex-shrink: 0;
  overflow: hidden;
  padding: var(--_cell-padding-block) var(--_cell-padding-inline);

  &:first-of-type:not([part~='drag-handle']) {
    padding-inline-start: calc(var(--_cell-padding-inline) + var(--_first-cell-padding-inline-start, 0px));
  }

  &[part~='selection'] {
    --_cell-padding-block: 0;
    --_cell-padding-inline: 0.5rem;

    inline-size: calc(2 * var(--sl-space-input-option-inline-md) + var(--sl-size-input-md) + 1rem);
  }
}

th {
  --_cell-background: var(--_header-background);
  --_cell-padding-block: var(--_header-padding-block);
  --_cell-padding-inline: var(--_header-padding-inline);
  --_vertical-border-offset: 0px;

  font-weight: var(--_header-font-weight);
  text-align: start;
}

th[part~='drag-handle'] {
  inline-size: var(--_drag-handle-inline-size);
  padding-inline: 0;
}

th[part~='active-selection'] {
  flex-grow: 1;
}

th[part~='filter'] {
  padding: 0;
}

td {
  border-block-end: var(--_cell-border);
}

td[part~='drag-handle']:not([part~='fixed']) {
  cursor: grab;
}

td[part~='group-header'] {
  --_cell-background: var(--_group-background);
  --_cell-padding-block: 0;
  --_cell-padding-inline: 0;

  inline-size: 100%;
}

td[part~='select'],
td[part~='text-field'] {
  --_cell-padding-block: 6px;

  sl-select,
  sl-text-field {
    flex-grow: 1;
  }
}

[part~='drag-handle'] {
  inline-size: var(--_drag-handle-inline-size);
  justify-content: end;
  padding-inline: 0;
}

[part='group-heading'] {
  font-weight: 600;
}

.selection-count {
  font-weight: normal;
}

.selection-toggle {
  align-self: center;
  padding: 6px;
}

.drop-placeholder {
  background: #eee;
  inline-size: 100%;
  inset-block-start: 0;
  position: absolute;
  z-index: 1;
}
