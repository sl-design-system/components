:host {
  --_arrow-block-size: var(--sl-size-125);
  --_arrow-inline-size: var(--sl-size-250);

  background: var(--sl-elevation-surface-raised-default);
  border: var(--sl-size-borderWidth-default) solid var(--sl-color-border-plain);
  border-radius: var(--sl-size-borderRadius-default);
  box-shadow: var(--sl-elevation-shadow-overlay);
  box-sizing: border-box;
  color: var(--sl-color-foreground-plain);
  margin: 0;
  max-inline-size: var(--sl-popover-max-inline-size, 80vw);
  opacity: 0;
  overflow: visible;
  padding: var(--sl-size-300);

  @media (prefers-reduced-motion: no-preference) {
    transition: opacity 0.2s cubic-bezier(0.25, 0, 0.3, 1);
  }

  /**
   * Because of :host and the fact that the element is often not inside a shadow root,
   * the popover-polyfill can have a higher specificity. We need to use !important
   * to overwrite the polyfill styling.
   *
   * This is only necessary for Firefox < 125 and older browsers that don't support popover
   */
  @supports not selector(:popover-open) {
    background: var(--sl-elevation-surface-raised-default) !important;
    border: var(--sl-size-borderWidth-default) solid var(--sl-color-border-plain) !important;
    color: var(--sl-color-foreground-plain) !important;
    margin: 0 !important;
    overflow: visible !important;
    padding: var(--sl-size-100) var(--sl-size-150) !important;
    position: fixed;
  }
}

/* stylelint-disable-next-line selector-class-pattern */
:host(:where(:popover-open, .\\:popover-open)) {
  /* stylelint-disable-next-line scss/at-rule-no-unknown */
  @starting-style {
    display: block;
    opacity: 0;
  }

  opacity: 1;
}

:host([actual-placement^='bottom']) .arrow {
  inset-block-start: calc(var(--_arrow-block-size) * -1);
}

:host([actual-placement^='left']) .arrow {
  inset-inline-end: calc(var(--_arrow-inline-size) * -1);
  rotate: 90deg;
  transform-origin: left;
  translate: calc(var(--_arrow-block-size) / 2) calc(var(--_arrow-inline-size) / -2);
}

:host([actual-placement^='right']) .arrow {
  inset-inline-start: calc(var(--_arrow-inline-size) * -1);
  rotate: -90deg;
  transform-origin: right;
  translate: calc(var(--_arrow-block-size) / -2) calc(var(--_arrow-inline-size) / -2);
}

:host([actual-placement^='top']) .arrow {
  inset-block-end: calc(var(--_arrow-block-size) * -1);
  scale: 1 -1;
}

.arrow {
  block-size: var(--_arrow-block-size);
  display: inline-flex;
  fill: var(--sl-elevation-surface-raised-default);
  inline-size: var(--_arrow-inline-size);
  position: absolute;
  stroke: var(--sl-color-border-plain);
  stroke-width: 2px;
}
