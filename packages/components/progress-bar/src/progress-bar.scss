$states: active, success, warning, error;

:host {
  --_border-radius: var(--sl-border-radius-full);
  --_label-font: var(--sl-text-input-field-label-label-md);
  --_helper-font: var(--sl-text-input-field-label-hint-md);
  --_helper-color: var(--sl-color-input-helper-text-default);
  --_helper-color-error: var(--sl-color-progressbar-error-track);
  --height: var(--sl-size-progressbar);//0.5rem;
  --_gap: var(--sl-space-progressbar-vertical-gap); // TODO: use a token
  --_label-gap: var(--sl-space-progressbar-horizontal-gap);
  --_indeterminate-duration: 20s;
   --_bar-background: var(--sl-color-progressbar-background);
  // --_progress-background: var(--sl-color-progressbar-active-track);

  @media (prefers-reduced-motion: no-preference) {
    --_indeterminate-duration: 1.2s;
  }

  // display: block;
  display: flex;
  flex-direction: column;
  gap: var(--_gap);
}

:host([indeterminate][state='active']) {
  .progress {
   // position: absolute;
    position: relative;
    animation: indeterminate var(--_indeterminate-duration) infinite cubic-bezier(0.37, 0, 0.63, 1);
  }
}

@each $state in $states {
  :host([state='#{$state}']) {
    --_progress-background: var(--sl-color-progressbar-#{$state}-track);
    --_icon-fill: var(--sl-color-progressbar-#{$state}-track);
  }
}

:host([state='error']) {
  ::slotted(*) {
    color: var(--_helper-color-error);
  }
}

.label {
  display: flex;
  justify-content: space-between;
  font: var(--_label-font);
  gap: var(--_label-gap); //16px; // TODO: use a token for the gap here

  sl-icon {
    --sl-icon-fill-default: var(--_icon-fill);
  }
}

.helper {
  display: flex;
  justify-content: space-between;
  gap: var(--_label-gap); //16px; // TODO: use a token for the gap here

  sl-icon {
    --sl-icon-fill-default: var(--_icon-fill);
  }
}

::slotted(*) {
// .helper {
  font: var(--_helper-font);
  color: var(--_helper-color);
}

.container {
  position: relative;
  align-items: stretch;
  background: var(--_bar-background);
  border-radius: var(--_border-radius);
  display: flex;
  block-size: var(--height);
  overflow: hidden;
  inline-size: 100%;
}

.progress {
  background: var(--_progress-background);
  border-radius: var(--_border-radius);
  // flex: 1;
  transform-origin: left;
  //transition: transform var(--transition);
  transition:
    400ms width,
    400ms background-color;
}

@keyframes indeterminate {
  0% {
    left: -25%;
    width: 25%;
  }
  100% {
    left: 100%;
    width: 25%;
  }
}

////progress[value] {
////  /* Reset the default appearance */
////  -webkit-appearance: none;
////  -moz-appearance: none;
////  appearance: none;
////}
//
//progress/*, ::-moz-progress-bar*/ {
//  position: relative;
//  align-items: stretch;
//  background: var(--_bar-background);
//  border: none;
//  border-radius: var(--_border-radius);
//  display: flex;
//  block-size: var(--height);
//  overflow: hidden;
//  inline-size: 100%;
//}
//
//progress::-webkit-progress-bar/*,
//progress::-moz-progress-bar */ {
//  //border-radius: 1rem;
//  background: var(--_bar-background);
//  border-radius: var(--_border-radius);
//}
//
//progress::-webkit-progress-value/*,
//progress[value]::-moz-progress-bar*/ {
//  background-color: #e20074;
//  //box-shadow: 2px 0 0 0 #cfcfcf, 0 0 1rem .5rem #cfcfcf;
//  //border-radius: 1rem;
//  border-radius: var(--_border-radius);
//  transition:
//    400ms width,
//    400ms background-color;
//}
