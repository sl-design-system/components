{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/radio.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-radio",
          "declaration": {
            "name": "Radio",
            "module": "/src/radio.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-radio-group",
          "declaration": {
            "name": "RadioGroup",
            "module": "/src/radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/radio-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio-group.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/radio-group.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "API",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    disabled: false,\n    horizontal: false,\n    value: undefined,\n    size: 'md'\n  },\n  argTypes: {\n    value: {\n      control: 'inline-radio',\n      options: ['1', '2', '3']\n    },\n    size: {\n      control: 'inline-radio',\n      options: ['md', 'lg']\n    }\n  },\n  render: ({ disabled, horizontal, value, size }) => html`\n    <sl-radio-group ?disabled=${disabled} ?horizontal=${horizontal} .value=${value}>\n      <sl-radio value=\"1\" .size=${size}>One</sl-radio>\n      <sl-radio value=\"2\" .size=${size}>Two</sl-radio>\n      <sl-radio value=\"3\" .size=${size}>Three</sl-radio>\n    </sl-radio-group>\n  `\n}"
        },
        {
          "kind": "variable",
          "name": "All",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => html`\n    <style>\n      table {\n        border-collapse: collapse;\n        margin-bottom: 24px;\n      }\n\n      th {\n        text-transform: capitalize;\n      }\n      th,\n      td {\n        padding: 4px 8px;\n      }\n      thead td {\n        text-align: center;\n      }\n\n      tbody td:nth-of-type(4n + 5) {\n        border-right: 2px solid #dedede;\n        padding-right: 24px;\n      }\n      tbody td:nth-of-type(4n + 2):not(:first-of-type) {\n        padding-left: 24px;\n      }\n      tbody td:last-of-type {\n        border: none;\n      }\n    </style>\n    <table>\n      <thead>\n        <tr>\n          <th></th>\n          ${sizes.map(size => html` <th colspan=${states.length + 1}>Size: ${size}</th> `)}\n        </tr>\n      </thead>\n      <tbody>\n        ${checked.map(\n          c =>\n            html` <tr>\n              <td>${c}</td>\n              ${sizes.map(\n                size =>\n                  html`${states.map(\n                      state =>\n                        html`\n                          <td>\n                            <sl-radio\n                              ?checked=${c === 'checked'}\n                              ?invalid=${state === 'invalid'}\n                              ?required=${state === 'invalid'}\n                              ?valid=${state === 'valid'}\n                              size=${size}\n                              data-mock-state\n                              >Label\n                            </sl-radio>\n                          </td>\n                        `\n                    )}\n                    <td>\n                      <sl-radio ?checked=${c === 'checked'} size=${size} disabled data-mock-state>Label </sl-radio>\n                    </td>`\n              )}\n            </tr>`\n        )}\n      </tbody>\n    </table>\n  `\n}"
        },
        {
          "kind": "variable",
          "name": "Horizontal",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => html`\n    <sl-radio-group horizontal>\n      <sl-radio value=\"1\">One</sl-radio>\n      <sl-radio value=\"2\">Two</sl-radio>\n      <sl-radio value=\"3\">Three</sl-radio>\n    </sl-radio-group>\n  `\n}"
        },
        {
          "kind": "variable",
          "name": "Overflow",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => html`\n    <style>\n      div {\n        display: flex;\n        flex-direction: column;\n        gap: 16px;\n      }\n      .wrapper {\n        border: 2px solid rgb(var(--sl-color-palette-accent-base));\n      }\n    </style>\n    <em>Borders are added to show the allignment in the container</em>\n    <div class=\"wrapper\">\n      <sl-radio\n        >Elit consectetur duis nisi id veniam id deserunt cupidatat. Consectetur consectetur consequat ea proident nulla\n        consectetur anim incididunt esse magna eu. In est cupidatat ea veniam exercitation irure ullamco nisi proident\n        enim.\n      </sl-radio>\n    </div>\n    <div class=\"wrapper\">\n      <sl-radio>Elit consectetur. </sl-radio>\n    </div>\n  `\n}"
        },
        {
          "kind": "variable",
          "name": "Label",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => html`\n    <style>\n      form {\n        display: flex;\n        flex-direction: column;\n      }\n    </style>\n    <form>\n      <sl-label for=\"radio-group\">How many pets do you have?</sl-label>\n      <sl-radio-group id=\"radio-group\">\n        <sl-radio value=\"0\">None</sl-radio>\n        <sl-radio value=\"1\">One</sl-radio>\n        <sl-radio value=\"2\">Two</sl-radio>\n        <sl-radio value=\"3\">Three</sl-radio>\n      </sl-radio-group>\n    </form>\n  `\n}"
        },
        {
          "kind": "variable",
          "name": "Hint",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => html`\n    <style>\n      form {\n        display: flex;\n        flex-direction: column;\n      }\n    </style>\n    <form>\n      <sl-label for=\"radio-group\">How many pets do you have?</sl-label>\n      <sl-radio-group id=\"radio-group\" hint=\"Fish count as well.\">\n        <sl-radio value=\"0\">None</sl-radio>\n        <sl-radio value=\"1\">One</sl-radio>\n        <sl-radio value=\"2\">Two</sl-radio>\n        <sl-radio value=\"3\">Three</sl-radio>\n      </sl-radio-group>\n    </form>\n  `\n}"
        },
        {
          "kind": "variable",
          "name": "RichLabelHint",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => html`\n    <style>\n      form {\n        display: flex;\n        flex-direction: column;\n      }\n    </style>\n    <form>\n      <sl-label for=\"radio-group\">\n        <label slot=\"label\">Custom <i>label</i></label>\n      </sl-label>\n      <sl-radio-group id=\"radio-group\">\n        <sl-radio value=\"0\">None</sl-radio>\n        <sl-radio value=\"1\">One</sl-radio>\n        <sl-radio value=\"2\">Two</sl-radio>\n        <sl-radio value=\"3\">Three</sl-radio>\n        <div slot=\"hint\">\n          Hint is an accessible way to provide <strong>additional information</strong> that might help the user\n        </div>\n      </sl-radio-group>\n    </form>\n  `\n}"
        },
        {
          "kind": "variable",
          "name": "InForm",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => {\n    return html`\n      <form @submit=${onSubmit} name=\"formpje\">\n        <sl-label for=\"hm\">How many pets do you have?</sl-label>\n        <sl-radio-group required name=\"how-many\" id=\"hm\">\n          <sl-radio value=\"1\">One</sl-radio>\n          <sl-radio value=\"2\">Two</sl-radio>\n          <sl-radio value=\"3\">Three</sl-radio>\n        </sl-radio-group>\n        <sl-label for=\"preselected\">What's your favourite letter?</sl-label>\n        <sl-radio-group required name=\"preselected\" id=\"preselected\" value=\"c\">\n          <sl-radio value=\"a\">A</sl-radio>\n          <sl-radio value=\"b\">B</sl-radio>\n          <sl-radio value=\"c\">C</sl-radio>\n        </sl-radio-group>\n        <sl-button type=\"reset\">Reset</sl-button>\n        <sl-button type=\"submit\">Validate</sl-button>\n      </form>\n    `;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "CustomValidation",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => {\n    const onClick = (event: Event & { target: HTMLElement }): void => {\n      (event.target.previousElementSibling as RadioGroup)?.reportValidity();\n    };\n\n    return html`\n      <sl-radio-group required>\n        <sl-radio value=\"1\">One</sl-radio>\n        <sl-radio value=\"2\">Two</sl-radio>\n        <sl-radio value=\"3\">Three</sl-radio>\n        <div slot=\"value-missing\">This is the custom value-missing message (for the required attribute).</div>\n      </sl-radio-group>\n      <sl-button @click=${onClick}>Validate</sl-button>\n    `;\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "API",
          "declaration": {
            "name": "API",
            "module": "src/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "All",
          "declaration": {
            "name": "All",
            "module": "src/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Horizontal",
          "declaration": {
            "name": "Horizontal",
            "module": "src/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Overflow",
          "declaration": {
            "name": "Overflow",
            "module": "src/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "src/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "src/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "RichLabelHint",
          "declaration": {
            "name": "RichLabelHint",
            "module": "src/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InForm",
          "declaration": {
            "name": "InForm",
            "module": "src/radio-group.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomValidation",
          "declaration": {
            "name": "CustomValidation",
            "module": "src/radio-group.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Radio group; treat a group of radio button as one form input with valitation, hints and errors\n\n```html\n  <sl-radio-group>\n    <sl-radio>Option 1</sl-radio>\n    <sl-radio>Option 2</sl-radio>\n    <sl-radio>Option 3</sl-radio>\n  </sl-radio-group>\n```",
          "name": "RadioGroup",
          "slots": [
            {
              "description": "A list of `sl-radio` elements.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "The orientation of the radio options; when true, the radio buttons are displayed next to each other instead of below each other.",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[] | undefined"
              },
              "description": "Custom validators."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the radio group, to be used in forms.",
              "attribute": "value",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "The orientation of the radio options; when true, the radio buttons are displayed next to each other instead of below each other.",
              "fieldName": "horizontal"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the radio group, to be used in forms.",
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            },
            {
              "name": "HintMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-radio-group",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onFocusout",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this, {\n    click: this.#onClick,\n    focusout: this.#onFocusout\n  })",
              "description": "Events controller."
            },
            {
              "kind": "field",
              "name": "#mutation",
              "privacy": "private",
              "default": "new MutationController(this, {\n    callback: mutations => {\n      const { target } = mutations.find(m => m.attributeName === 'checked' && m.oldValue === null) || {};\n\n      if (target instanceof Radio && target.value) {\n        this.buttons?.forEach(radio => (radio.checked = radio.value === target.value));\n        this.value = target.value;\n      }\n    },\n    config: {\n      attributeFilter: ['checked'],\n      attributeOldValue: true,\n      subtree: true\n    }\n  })",
              "description": "Observe the state of the radios."
            },
            {
              "kind": "field",
              "name": "#rovingTabindexController",
              "privacy": "private",
              "default": "new RovingTabindexController<Radio>(this, {\n    focusInIndex: (elements: Radio[]) => {\n      return elements.findIndex(el => {\n        return this.value ? !el.disabled && el.value === this.value : !el.disabled;\n      });\n    },\n    elementEnterAction: (el: Radio) => {\n      this.value = el.value;\n    },\n    elements: () => this.buttons,\n    isFocusableElement: (el: Radio) => !el.disabled\n  })",
              "description": "Manage the keyboard navigation."
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    validators: [requiredValidator]\n  })"
            },
            {
              "kind": "field",
              "name": "#initialState",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[] | undefined"
              },
              "description": "Custom validators."
            },
            {
              "kind": "field",
              "name": "buttons",
              "type": {
                "text": "Radio[]"
              },
              "privacy": "private",
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RadioGroup",
          "declaration": {
            "name": "RadioGroup",
            "module": "src/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/radio.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Radio",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the radio is checked.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the radio button.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value for this radio button.",
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the radio is checked.",
              "fieldName": "checked"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value for this radio button.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the radio button.",
              "fieldName": "size"
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-radio",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "description": "Events controller."
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "src/radio.ts"
          }
        }
      ]
    }
  ]
}
