{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-option.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-option-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-select",
          "declaration": {
            "name": "Select",
            "module": "/src/select.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select-option",
          "declaration": {
            "name": "SelectOption",
            "module": "/src/select-option.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select-option-group",
          "declaration": {
            "name": "SelectOptionGroup",
            "module": "/src/select-option-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/select-option-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option-group.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A way to group together options, with or without heading.\n\n```html\n <sl-select>\n   <sl-select-option-group group-heading=\"Europ\">\n   <sl-select-option>Netherlands</sl-select-option>\n   <sl-select-option>Spain</sl-select-option>\n     <sl-select-option>Poland</sl-select-option>\n   </sl-select-option-group>\n </sl-select>\n```",
          "name": "SelectOptionGroup",
          "slots": [
            {
              "description": "List of `sl-option` elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "groupHeading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The heading of the option group",
              "attribute": "group-heading"
            }
          ],
          "attributes": [
            {
              "name": "group-heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The heading of the option group",
              "fieldName": "groupHeading"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select-option-group",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOptionGroup",
          "declaration": {
            "name": "SelectOptionGroup",
            "module": "src/select-option-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/select-option.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectOption",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The value for the option item, to be used in forms.",
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The value for the option item, to be used in forms.",
              "fieldName": "value"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is selected.",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is disabled.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select-option",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            }
          ],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOption",
          "declaration": {
            "name": "SelectOption",
            "module": "src/select-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/select.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/select.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Basic",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  args: {\n    size: 'md',\n    maxOverlayHeight: '200px',\n    placeholder: 'Placeholder'\n  },\n  render: ({ maxOverlayHeight, size, placeholder }) => html`\n    <style>\n      sl-select {\n        width: 400px;\n        max-width: 90vw;\n        display: inline-flex;\n      }\n    </style>\n    <sl-button>To focus</sl-button>\n    <sl-select .maxOverlayHeight=${maxOverlayHeight} .size=${size} .placeholder=${placeholder}>\n      <sl-select-option-group group-heading=\"Happy\">\n        <sl-select-option>üòÑ Grinning Face with Smiling Eyes</sl-select-option>\n        <sl-select-option>üòÇ Face with Tears of Joy</sl-select-option>\n        <sl-select-option>üòä Smiling Face with Smiling Eyes</sl-select-option>\n        <sl-select-option>ü§© Star-Struck</sl-select-option>\n        <sl-select-option disabled>üôÇ Slightly Smiling Face</sl-select-option>\n        <sl-select-option>ü•≥ Partying Face</sl-select-option>\n      </sl-select-option-group>\n      <sl-select-option>üò∂ Unfazed</sl-select-option>\n      <sl-select-option-group group-heading=\"Sad\">\n        <sl-select-option>üòí Unamused Face</sl-select-option>\n        <sl-select-option>ü§ß Sneezing Face</sl-select-option>\n        <sl-select-option>üòì Downcast Face with Sweat</sl-select-option>\n        <sl-select-option>üò° Enraged Face</sl-select-option>\n      </sl-select-option-group>\n      <sl-select-option-group>\n        <sl-select-option>üê∑ Pig</sl-select-option>\n        <sl-select-option selected>üê® Koala</sl-select-option>\n        <sl-select-option>üêº Panda</sl-select-option>\n        <sl-select-option>ü¶ä Fox</sl-select-option>\n      </sl-select-option-group>\n      <sl-select-option>ü§ñ Robot</sl-select-option>\n    </sl-select>\n    <sl-button>To focus</sl-button>\n  `\n}"
        },
        {
          "kind": "variable",
          "name": "All",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => {\n    return html` <style>\n        table {\n          border-collapse: collapse;\n        }\n\n        th {\n          text-transform: capitalize;\n        }\n        th,\n        td {\n          padding: 4px 8px;\n        }\n        thead td {\n          text-align: center;\n        }\n      </style>\n      ${sizes.map(\n        size => html`<h2>Size: ${size}</h2>\n          <table>\n            <thead>\n              <tr>\n                <td></td>\n                ${disabledStates.map(\n                  disabledState =>\n                    html` <td class=\"${disabledState ? 'sb-disabled' : ''}\">\n                      ${disabledState ? 'Disabled' : 'Enabled'}\n                    </td>`\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              ${states.map(\n                state => html` <tr>\n                  <th>${state}</th>\n                  ${disabledStates.map(\n                    disabledState => html` <td class=\"${disabledState ? 'sb-disabled' : ''}\">\n                      <sl-select\n                        ?valid=${state === 'valid'}\n                        ?invalid=${state === 'invalid'}\n                        ?required=${state === 'invalid'}\n                        .size=${size}\n                        ?disabled=${disabledState}\n                        data-mock-state\n                        >${options}\n                      </sl-select>\n                    </td>`\n                  )}\n                </tr>`\n              )}\n              ${states.map(\n                state => html`<tr>\n                  <th>Placeholder ${state}</th>\n                  ${disabledStates.map(\n                    disabledState => html`\n                      <td class=\"${disabledState ? 'sb-disabled' : ''}\">\n                        <sl-select\n                          ?valid=${state === 'valid'}\n                          ?invalid=${state === 'invalid'}\n                          ?required=${state === 'invalid'}\n                          .size=${size}\n                          ?disabled=${disabledState}\n                          data-mock-state\n                          placeholder=\"Placeholder\"\n                          ><sl-select-option .size=${size} ?disabled=${disabledState}>Hamster</sl-select-option>\n                        </sl-select>\n                      </td>\n                    `\n                  )}\n                </tr>`\n              )}\n              <tr>\n                <th>Unselected Option</th>\n                ${disabledStates.map(\n                  disabledState => html`\n                    <td class=\"${disabledState ? 'sb-disabled' : ''}\">\n                      <sl-select-option .size=${size} ?disabled=${disabledState}>üêπ Hamster</sl-select-option>\n                    </td>\n                  `\n                )}\n              </tr>\n              <tr>\n                <th>Selected Option</th>\n                ${disabledStates.map(\n                  disabledState => html`\n                    <td class=\"${disabledState ? 'sb-disabled' : ''}\">\n                      <sl-select-option .size=${size} ?disabled=${disabledState} selected>üêπ Hamster</sl-select-option>\n                    </td>\n                  `\n                )}\n              </tr>\n            </tbody>\n          </table>`\n      )}`;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "CustomComponents",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => html`\n    <style>\n      sl-avatar {\n        margin: 0 4px;\n      }\n    </style>\n    <sl-button>To focus</sl-button>\n    <sl-select>\n      <sl-select-option><sl-avatar uniqueProfileId=\"1\"></sl-avatar></sl-select-option>\n      <sl-select-option selected><sl-avatar uniqueProfileId=\"2\"></sl-avatar></sl-select-option>\n      <sl-select-option><sl-avatar uniqueProfileId=\"3\"></sl-avatar></sl-select-option>\n      <sl-select-option><sl-avatar uniqueProfileId=\"14\"></sl-avatar></sl-select-option>\n      <sl-select-option disabled><sl-avatar uniqueProfileId=\"4\"></sl-avatar></sl-select-option>\n      <sl-select-option><sl-avatar uniqueProfileId=\"5\"></sl-avatar></sl-select-option>\n    </sl-select>\n    <sl-button>To focus</sl-button>\n  `\n}"
        },
        {
          "kind": "variable",
          "name": "InForm",
          "type": {
            "text": "StoryObj"
          },
          "default": "{\n  render: () => html`\n    <style>\n      form {\n        display: flex;\n        flex-direction: column;\n      }\n\n      sl-label {\n        margin-block-start: 0.5rem;\n      }\n      sl-button-bar {\n        margin-block-start: 1rem;\n      }\n\n      sl-avatar {\n        margin: 0 4px;\n      }\n    </style>\n    <form @submit=${onSubmit}>\n      <sl-label for=\"smiley\">Smiley</sl-label>\n      <sl-select id=\"smiley\" name=\"smiley\" required>\n        <sl-select-option>üòç Option 1 </sl-select-option>\n        <sl-select-option>ü•∏ Option 2 </sl-select-option>\n        <sl-select-option>ü§î Option 3 </sl-select-option>\n        <sl-select-option>üòÖ Option 4 </sl-select-option>\n        <sl-select-option disabled>ü§™ Option 5 </sl-select-option>\n        <sl-select-option>ü´£ Option 6 </sl-select-option>\n      </sl-select>\n\n      <sl-label for=\"avatar\">Avatar</sl-label>\n      <sl-select id=\"avatar\" name=\"avatar\">\n        <sl-select-option value=\"0\"><sl-avatar uniqueProfileId=\"0\"></sl-avatar></sl-select-option>\n        <sl-select-option value=\"1\"><sl-avatar uniqueProfileId=\"1\"></sl-avatar></sl-select-option>\n        <sl-select-option value=\"2\" selected><sl-avatar uniqueProfileId=\"2\"></sl-avatar></sl-select-option>\n        <sl-select-option value=\"3\"><sl-avatar uniqueProfileId=\"3\"></sl-avatar></sl-select-option>\n        <sl-select-option value=\"4\" disabled><sl-avatar uniqueProfileId=\"4\"></sl-avatar></sl-select-option>\n        <sl-select-option value=\"14\"><sl-avatar uniqueProfileId=\"14\"></sl-avatar></sl-select-option>\n      </sl-select>\n\n      <sl-label for=\"mood\">Your mood</sl-label>\n      <sl-select id=\"mood\" name=\"mood\" placeholder=\"How are you feeling today?\">\n        <sl-select-option-group group-heading=\"Happy\">\n          <sl-select-option>üòÑ Grinning Face with Smiling Eyes</sl-select-option>\n          <sl-select-option>üòÇ Face with Tears of Joy</sl-select-option>\n          <sl-select-option>üòä Smiling Face with Smiling Eyes</sl-select-option>\n          <sl-select-option>ü§© Star-Struck</sl-select-option>\n          <sl-select-option disabled>üôÇ Slightly Smiling Face</sl-select-option>\n          <sl-select-option>ü•≥ Partying Face</sl-select-option>\n        </sl-select-option-group>\n        <sl-select-option-group group-heading=\"Sad\">\n          <sl-select-option>üòí Unamused Face</sl-select-option>\n          <sl-select-option>ü§ß Sneezing Face</sl-select-option>\n          <sl-select-option>üòì Downcast Face with Sweat</sl-select-option>\n          <sl-select-option>üò° Enraged Face</sl-select-option>\n        </sl-select-option-group>\n        <sl-select-option>ü§ñ Robot</sl-select-option>\n      </sl-select>\n\n      <sl-button-bar align=\"end\">\n        <sl-button type=\"reset\">Reset</sl-button>\n        <sl-button type=\"submit\">Submit</sl-button>\n      </sl-button-bar>\n    </form>\n  `\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Basic",
          "declaration": {
            "name": "Basic",
            "module": "src/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "All",
          "declaration": {
            "name": "All",
            "module": "src/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomComponents",
          "declaration": {
            "name": "CustomComponents",
            "module": "src/select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InForm",
          "declaration": {
            "name": "InForm",
            "module": "src/select.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Select",
          "members": [
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the select is invalid.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxOverlayHeight",
              "type": {
                "text": "string | undefined"
              },
              "description": "The maximum size the dropdown can have; only used when there are  enough options and enough space on the screen.",
              "attribute": "max-overlay-height",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "The placeholder text to show when no option is chosen.",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the select.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "max-overlay-height",
              "type": {
                "text": "string | undefined"
              },
              "description": "The maximum size the dropdown can have; only used when there are  enough options and enough space on the screen.",
              "fieldName": "maxOverlayHeight"
            },
            {
              "name": "size",
              "type": {
                "text": "'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the select.",
              "fieldName": "size"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "The placeholder text to show when no option is chosen.",
              "fieldName": "placeholder"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the select is invalid.",
              "fieldName": "invalid"
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#closeSelect",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleOptionsSlotChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleMutation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mutations",
                  "type": {
                    "text": "MutationRecord[]"
                  }
                }
              ],
              "description": "If an option is selected programmatically update all the options or the size of the select itself"
            },
            {
              "kind": "method",
              "name": "#handleOptionChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "One of the options in the select has been clicked, get the right target and update the selection"
            },
            {
              "kind": "method",
              "name": "#handleOptionFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Make sure the focus is on the currently selected option"
            },
            {
              "kind": "method",
              "name": "#updateSelectedOption",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selectedOption",
                  "type": {
                    "text": "SelectOption"
                  }
                }
              ],
              "description": "Update the selected option with attributes and values."
            },
            {
              "kind": "method",
              "name": "#setSelectedOptionVisible",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SelectOption"
                  }
                }
              ],
              "description": "Copy the value/represenation of the selected option to the placeholder"
            },
            {
              "kind": "method",
              "name": "#handleOverlayKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handle keyboard accessible controls."
            },
            {
              "kind": "method",
              "name": "#setPopoverWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ToggleEvent"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#observerOptions",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n    attributes: true,\n    subtree: true,\n    attributeFilter: ['selected', 'size'],\n    attributeOldValue: true\n  }"
            },
            {
              "kind": "field",
              "name": "selectedOptionPlaceholder",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "optionGroups",
              "type": {
                "text": "SelectOptionGroup[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#rovingTabindexController",
              "privacy": "private",
              "default": "new RovingTabindexController<SelectOption>(this, {\n    focusInIndex: (elements: SelectOption[]) => elements.findIndex(el => el.selected && isPopoverOpen(this.dialog)),\n    elements: () => this.allOptions || [],\n    isFocusableElement: (el: SelectOption) => !el.disabled\n  })"
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    validators: [requiredValidator]\n  })"
            },
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "type": {
                "text": "MutationObserver | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#selectId",
              "privacy": "private",
              "default": "`sl-select-${nextUniqueId++}`"
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectedOption",
              "type": {
                "text": "SelectOption | null | undefined"
              },
              "privacy": "private",
              "description": "The current node selected in the list of options."
            },
            {
              "kind": "field",
              "name": "allOptions",
              "type": {
                "text": "SelectOption[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#renderSelectedOption",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | TemplateResult"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#optionContentType",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "src/select.ts"
          }
        }
      ]
    }
  ]
}
