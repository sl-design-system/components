{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-option.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-option-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-select",
          "declaration": {
            "name": "Select",
            "module": "/src/select.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select-option",
          "declaration": {
            "name": "SelectOption",
            "module": "/src/select-option.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select-option-group",
          "declaration": {
            "name": "SelectOptionGroup",
            "module": "/src/select-option-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/select-option-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A way to group together options, with or without heading.\n\n```html\n <sl-select>\n   <sl-select-option-group group-heading=\"Europ\">\n   <sl-select-option>Netherlands</sl-select-option>\n   <sl-select-option>Spain</sl-select-option>\n     <sl-select-option>Poland</sl-select-option>\n   </sl-select-option-group>\n </sl-select>\n```",
          "name": "SelectOptionGroup",
          "slots": [
            {
              "description": "List of `sl-option` elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "groupHeading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The heading of the option group",
              "attribute": "group-heading"
            }
          ],
          "attributes": [
            {
              "name": "group-heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The heading of the option group",
              "fieldName": "groupHeading"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select-option-group",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOptionGroup",
          "declaration": {
            "name": "SelectOptionGroup",
            "module": "src/select-option-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/select-option.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectOption",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The value for the option item, to be used in forms.",
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The value for the option item, to be used in forms.",
              "fieldName": "value"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is selected.",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is disabled.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select-option",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            }
          ],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOption",
          "declaration": {
            "name": "SelectOption",
            "module": "src/select-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/select.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Select",
          "members": [
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the select is invalid.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxOverlayHeight",
              "type": {
                "text": "string | undefined"
              },
              "description": "The maximum size the dropdown can have; only used when there are  enough options and enough space on the screen.",
              "attribute": "max-overlay-height",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "The placeholder text to show when no options is chosen.",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the select.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "max-overlay-height",
              "type": {
                "text": "string | undefined"
              },
              "description": "The maximum size the dropdown can have; only used when there are  enough options and enough space on the screen.",
              "fieldName": "maxOverlayHeight"
            },
            {
              "name": "size",
              "type": {
                "text": "'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the select.",
              "fieldName": "size"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "The placeholder text to show when no options is chosen.",
              "fieldName": "placeholder"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the select is invalid.",
              "fieldName": "invalid"
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#closeSelect",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleOptionsSlotChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleMutation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mutations",
                  "type": {
                    "text": "MutationRecord[]"
                  }
                }
              ],
              "description": "If an option is selected programmatically update all the options or the size of the select itself"
            },
            {
              "kind": "method",
              "name": "#handleOptionChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "One of the options in the select has been clicked, get the right target and update the selection"
            },
            {
              "kind": "method",
              "name": "#handleOptionFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Make sure the focus is on the currently selected option"
            },
            {
              "kind": "method",
              "name": "#updateSelectedOption",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selectedOption",
                  "type": {
                    "text": "SelectOption"
                  }
                }
              ],
              "description": "Update the selected option with attributes and values."
            },
            {
              "kind": "method",
              "name": "#setSelectedOptionVisible",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SelectOption"
                  }
                }
              ],
              "description": "Copy the value/represenation of the selected option to the placeholder"
            },
            {
              "kind": "method",
              "name": "#handleOverlayKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handle keyboard accessible controls."
            },
            {
              "kind": "method",
              "name": "#setPopoverWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ToggleEvent"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#observerOptions",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n    attributes: true,\n    subtree: true,\n    attributeFilter: ['selected', 'size'],\n    attributeOldValue: true\n  }"
            },
            {
              "kind": "field",
              "name": "selectedOptionPlaceholder",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "optionGroups",
              "type": {
                "text": "SelectOptionGroup[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#rovingTabindexController",
              "privacy": "private",
              "default": "new RovingTabindexController<SelectOption>(this, {\n    focusInIndex: (elements: SelectOption[]) => elements.findIndex(el => el.selected && isPopoverOpen(this.dialog)),\n    elements: () => this.allOptions || [],\n    isFocusableElement: (el: SelectOption) => !el.disabled\n  })"
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    validators: [requiredValidator]\n  })"
            },
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "type": {
                "text": "MutationObserver | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#selectId",
              "privacy": "private",
              "default": "`sl-select-${nextUniqueId++}`"
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectedOption",
              "type": {
                "text": "SelectOption | null | undefined"
              },
              "privacy": "private",
              "description": "The current node selected in the list of options."
            },
            {
              "kind": "field",
              "name": "allOptions",
              "type": {
                "text": "SelectOption[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#renderSelectedOption",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | TemplateResult"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#optionContentType",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "src/select.ts"
          }
        }
      ]
    }
  ]
}
