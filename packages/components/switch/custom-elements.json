{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-switch",
          "declaration": {
            "name": "Switch",
            "module": "/src/switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/switch.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch.spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/switch.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Basic",
          "type": {
            "text": "Story"
          },
          "default": "{}"
        },
        {
          "kind": "variable",
          "name": "All",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: () => {\n    return html` <style>\n        sl-switch {\n          min-width: 250px;\n        }\n        tbody th,\n        tbody td {\n          vertical-align: top;\n        }\n        td > div {\n          display: inline-flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n\n        tbody td:nth-of-type(2n) {\n          border-right: 2px solid #dedede;\n          padding-right: 24px;\n        }\n        tbody td:nth-of-type(2n + 1):not(:first-of-type) {\n          padding-left: 24px;\n        }\n        tbody td:last-of-type {\n          border: none;\n        }\n        sl-switch:not(:last-of-type) {\n          border-bottom: 1px solid #efefef;\n          padding-bottom: 8px;\n        }\n      </style>\n      <table>\n        <thead>\n          <tr>\n            <td></td>\n            ${sizes.map(size => html` <th colspan=\"2\">Size: ${sizeName(size)}</th> `)}\n          </tr>\n        </thead>\n        <tbody>\n          ${orientations.map(\n            orientation =>\n              html`<tr>\n                <th>${orientation}</th>\n                ${sizes.map(size =>\n                  states.map(\n                    state => html`\n                      <td>\n                        <div>\n                          <sl-switch\n                            .size=${size}\n                            .orientation=${orientation}\n                            ?checked=${state === 'checked'}\n                            hint=\"Check this one\"\n                            >With hint</sl-switch\n                          >\n                          <sl-switch .size=${size} .orientation=${orientation} ?checked=${state === 'checked'}\n                            >Without hint</sl-switch\n                          >\n                          <sl-switch\n                            .size=${size}\n                            .orientation=${orientation}\n                            ?checked=${state === 'checked'}\n                          ></sl-switch>\n                          <sl-switch\n                            .size=${size}\n                            .orientation=${orientation}\n                            ?checked=${state === 'checked'}\n                            hint=\"This one can't be changed\"\n                            disabled\n                            >Disabled</sl-switch\n                          >\n                        </div>\n                      </td>\n                    `\n                  )\n                )}\n              </tr>`\n          )}\n        </tbody>\n      </table>`;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "CustomIcons",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: () => {\n    Icon.registerIcon(faTurtle, faRabbitRunning);\n    return html` ${sizes.map(\n      size => html` <sl-switch .size=${size} iconOff=\"far-turtle\" iconOn=\"far-rabbit-running\"></sl-switch> `\n    )}`;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "ValidateInForm",
          "type": {
            "text": "Story"
          },
          "default": "{\n  render: ({ checked, disabled, value, size, hint, label, orientation }) => html`\n    <style>\n      form {\n        width: 50%;\n        display: flex;\n        flex-direction: column;\n      }\n      sl-label {\n        margin-block-start: 0.5rem;\n      }\n      sl-label:first-of-type {\n        margin-block-start: 0;\n      }\n      sl-button-bar {\n        margin-top: 24px;\n      }\n      sl-button-bar,\n      sl-input,\n      sl-textarea {\n        align-self: stretch;\n      }\n    </style>\n    <form @submit=${onSubmit}>\n      <sl-label for=\"group\">Switch</sl-label>\n      <sl-switch\n        ?checked=${checked}\n        ?disabled=${disabled}\n        .value=${value}\n        .size=${size}\n        .hint=${hint}\n        .orientation=${orientation}\n        required\n        >${label}</sl-switch\n      >\n      <sl-button-bar align=\"end\">\n        <sl-button type=\"reset\">Reset</sl-button>\n        <sl-button type=\"submit\">Submit</sl-button>\n      </sl-button-bar>\n    </form>\n  `\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Basic",
          "declaration": {
            "name": "Basic",
            "module": "src/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "All",
          "declaration": {
            "name": "All",
            "module": "src/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomIcons",
          "declaration": {
            "name": "CustomIcons",
            "module": "src/switch.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "ValidateInForm",
          "declaration": {
            "name": "ValidateInForm",
            "module": "src/switch.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Atoggle switch.\n\n```html\n  <sl-switch>Foo</sl-switch>\n```",
          "name": "Switch",
          "slots": [
            {
              "description": "Text label of the checkbox. Technically there are no limits what can be put here; text, images, icons etc.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "event",
              "name": "change",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "description": "Emits when the checked state changes.",
              "attribute": "change"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the switch is on or off.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconOff",
              "type": {
                "text": "string | undefined"
              },
              "description": "Custom icon in \"off\" state.",
              "attribute": "iconOff",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconOn",
              "type": {
                "text": "string | undefined"
              },
              "description": "Custom icon in \"on\" state.",
              "attribute": "iconOn",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the switch is invalid.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the switch.",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the switch.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the switch, to be used in forms.",
              "attribute": "value"
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "description": "Emits when the checked state changes.",
              "fieldName": "change"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the switch is on or off.",
              "fieldName": "checked"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the switch is invalid.",
              "fieldName": "invalid"
            },
            {
              "name": "iconOff",
              "type": {
                "text": "string | undefined"
              },
              "description": "Custom icon in \"off\" state.",
              "fieldName": "iconOff"
            },
            {
              "name": "iconOn",
              "type": {
                "text": "string | undefined"
              },
              "description": "Custom icon in \"on\" state.",
              "fieldName": "iconOn"
            },
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'md' | 'lg'"
              },
              "default": "'md'",
              "description": "The size of the switch.",
              "fieldName": "size"
            },
            {
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the switch.",
              "fieldName": "orientation"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the switch, to be used in forms.",
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            },
            {
              "name": "HintMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-switch",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onToggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)"
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    validators: [requiredValidator]\n  })"
            },
            {
              "kind": "field",
              "name": "#initialState",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "default": "this.attachInternals()",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "iconSize",
              "type": {
                "text": "IconSize"
              },
              "privacy": "private",
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "Switch",
            "module": "src/switch.ts"
          }
        }
      ]
    }
  ]
}
