:host {
  /* Has to be set to #000 because it's used in the mask-image, so when it's something else than black the mask doesn't work properly */
  /* stylelint-disable-next-line color-no-hex */
  --_mask-color: #000;

  display: flex;
  flex-direction: column;
  isolation: isolate; // Prevent any possible z-index clashes with other DOM elements
}

:host([align-tabs='center']) .fade-container {
  justify-content: center;
}

:host([align-tabs='end']) .fade-container {
  justify-content: end;
}

:host([align-tabs='stretch']) {
  .fade-container {
    justify-content: stretch;
  }

  [part='scroller'],
  ::slotted(sl-tab) {
    flex-grow: 1;
  }

  [part='tablist'] {
    inline-size: 100%;
  }
}

:host(:not([no-panels])) [part='panels'] {
  padding: var(--sl-size-300);
}

:host([scroll-start]) .fade-start,
:host([scroll-end]) .fade-end {
  visibility: visible;
}

:host([vertical]) {
  flex-direction: row;

  [part='container'] {
    border-block-end: 0;
    border-inline-end: var(--sl-size-borderWidth-default) solid var(--sl-color-border-plain);
    display: inline-flex;
    flex: 0 0 auto;
    flex-direction: column;
    max-inline-size: min(50vw, 200px);
  }

  [part='wrapper'] {
    block-size: 100%;
    grid-template-columns: 1fr;
    grid-template-rows: minmax(0, 1fr) auto;
  }

  .fade {
    block-size: 6rem;
    inline-size: 100%;
    inset: auto 0;
  }

  .fade-start {
    background: inherit;
    inset-block-start: 0;
    mask-image: linear-gradient(0deg, transparent, var(--_mask-color));
  }

  .fade-end {
    background: inherit;
    inset-block-end: 0;
    mask-image: linear-gradient(180deg, transparent, var(--_mask-color));
  }

  sl-menu-button {
    padding-block-start: var(--sl-size-050);
    padding-inline-start: 0;

    &::part(button) {
      flex: 1;
    }
  }

  [part='scroller'] {
    display: flex;
    flex: 1 1 auto;
    flex-direction: column;
    overflow: clip scroll;
    overscroll-behavior-y: contain;
    scroll-snap-points-y: repeat(100%);
    scroll-snap-type: block;
  }

  [part='tablist'] {
    flex-direction: column;
    inline-size: 100%;
  }

  .indicator {
    block-size: 100px;
    inline-size: var(--sl-size-025);
    inset: 0 0 auto auto;
    transform-origin: center top;
  }

  ::slotted(sl-tab) {
    flex-shrink: 1;
    justify-content: start;
  }
}

[part='container'] {
  background: var(--sl-elevation-surface-raised-default);
  border-block-end: var(--sl-size-borderWidth-default) solid var(--sl-color-border-plain);
  display: flex;
  inline-size: 100%;
}

[part='wrapper'] {
  background: inherit;
  display: grid;
  grid-template-columns: 1fr auto;
  inline-size: 100%;
}

.fade-container {
  background: inherit;
  display: flex;
  min-inline-size: 0;
  position: relative;
}

.fade {
  block-size: 100%;
  inline-size: 6rem;
  inset-block: 0;
  pointer-events: none;
  position: absolute;
  visibility: hidden;
  z-index: 1; // Make sure the fade is above the scroller
}

.fade-start {
  background: inherit;
  inset-inline-start: 0;
  mask-image: linear-gradient(-90deg, transparent, var(--_mask-color));
}

.fade-end {
  background: inherit;
  inset-inline-end: 0;
  mask-image: linear-gradient(90deg, transparent, var(--_mask-color));
}

[part='scroller'] {
  display: flex;
  justify-content: inherit;
  overflow: scroll clip;
  overscroll-behavior-x: contain;
  scroll-behavior: auto;
  scroll-snap-points-x: repeat(100%);
  scroll-snap-type: inline;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }

  @media (prefers-reduced-motion: no-preference) {
    scroll-behavior: smooth;
  }
}

[part='tablist'] {
  display: flex;
  inline-size: fit-content;
  justify-content: inherit;
  position: relative;
}

.indicator {
  background: var(--sl-color-border-selected);
  block-size: var(--sl-size-025);
  inline-size: 100px; // Default value; actual width depends on calculated value
  inset: auto auto 0 0;
  opacity: 0;
  position: absolute;
  transform-origin: center left;
  transition-property:
    width, height, translate; // TODO: `width` and `height` are not animated on the GPU, but `scale` is not working properly in Safari e.g. when zooming in/out (so we cannot use it right now). Change to `scale` when Safari supports it in a proper way.

  transition-timing-function: ease-in-out;
  translate: 0;

  /** z-index is set to 2 to make sure the indicator is above the tab, when that is selected, focused or hovered */
  z-index: 2;

  @media (prefers-reduced-motion: no-preference) {
    transition-duration: 0.5s;
  }
}

::slotted(sl-tab:last-of-type):hover {
  position: relative;
  z-index: 2;
}

sl-menu-button {
  align-self: center;
  padding-inline-start: var(--sl-size-050);
  position: relative;
  z-index: 1;

  &::part(menu) {
    max-inline-size: min(80vw, 50%);
  }
}
