$sizes: md, lg;
$variants: default, valid, invalid;
$variant-selectors: ':not([valid],[invalid])', ':where([valid])', ':where([invalid])';
$resize-types: none, both, horizontal, vertical;

:host {
  //--_border: 1px solid var(--_border-color);
  //--_border-color: #d3d3d3;
  //--_border-radius: 3px;
  //--_box-shadow: none;
  //--_gap: 0.25rem;
  --_border-size: var(--sl-border-width-button-default);
  --_border: var(--_border-size) solid var(--_border-color);
  --_border-radius: var(--sl-border-radius-default);
  --_box-shadow: var(--sl-box-shadow-none);
  --_transition: 200ms ease-in-out;
}

:host {
  align-items: start;
  display: flex;
  flex-direction: column;
  gap: var(--_gap);
  vertical-align: top;
  width: 100%; // TODO: check if necessary
}

:host(:disabled) {
  cursor: default;
  pointer-events: none;
}

:host(:focus-within) {
  //--_border-color: hsl(207, 95%, calc(55% - 8% * 2));
  //--_box-shadow: 0 0 0 3px hsla(207, 95%, calc(55% - 8%), 0.25);
  //box-shadow: var(--_box-shadow); // TODO: border radius ???
}

//:host(:where(:--invalid, [state--invalid])) {
//  --_border-color: #c00;
//}

//:host(:where([resize="none"])) {
//  background-color: #00e0e0;
//
//  slot[name='textarea']::slotted(textarea) {
//    resize: none;
//  }
//}

slot[name='textarea']::slotted(textarea) {
  appearance: none;
  background: none;
  border: 0;
  color: inherit;
  flex: 1;
  font: var(--_font); //inherit;
  line-height: 24px;
  margin: 0;
  min-block-size: 72px; // TODO: it should come from a token or how? Maybe added by user?
  outline: none;
  //padding: calc(0.25rem - 1px) 0.5rem;
  padding: var(--_padding);

  &:focus {
    outline: none;
  }

  &::placeholder {
    color: var(--_placeholder-color);
    opacity: 1;
  }
}

.wrapper {
  background: var(--_background);
  border: var(--_border);
  border-radius: var(--_border-radius);
  //box-shadow: var(--_box-shadow);
  box-shadow: var(--_box-shadow);
  display: flex;
  position: relative;
  transition: 0.2s ease-in-out;
  transition-property: background, border, box-shadow, color, filter;
  width: 100%;
}

slot[name='suffix'] {
  sl-icon {
    position: absolute;
    //right: 0;
    //background-color: #00e0e0;
  }
}

@each $size in $sizes {
  :host([size='#{$size}']) {
    --_gap: var(--sl-space-text-field-gap-#{$size});

    /* stylelint-disable-next-line max-nesting-depth */
    slot[name='textarea']::slotted(textarea) {
      --_font: var(--sl-text-input-text-field-text-#{$size});
      --_padding: var(--sl-space-input-text-field-block-#{$size})
        var(--sl-space-input-text-field-inline-#{$size})
        var(--sl-space-input-text-field-block-#{$size})
        var(--sl-space-input-text-field-inline-#{$size});
      //--_gap: var(--sl-space-text-field-gap-#{$size});
      padding-right: calc(
        var(--sl-space-input-text-field-inline-#{$size}) +
        var(--sl-space-input-text-field-gap-#{$size}) +
        var(--icon-container-size, var(--sl-size-icon-lg))
      );
    }

    //.wrapper {
    //  --_padding: var(--sl-space-text-field-block-#{$size})
    //    var(--sl-space-text-field-inline-#{$size})
    //    var(--sl-space-text-field-block-#{$size})
    //    var(--sl-space-text-field-inline-#{$size});
    //  --_gap: var(--sl-space-text-field-gap-#{$size});
    //}

    /* stylelint-disable-next-line max-nesting-depth */
    slot[name='suffix'] sl-icon {
      right: var(--sl-space-input-text-field-inline-#{$size});
      top: var(--sl-space-input-text-field-block-#{$size});
    }
  }
}

@each $resize in $resize-types {
  /* stylelint-disable-next-line max-nesting-depth */
  :host([resize='#{$resize}']) {
    /* stylelint-disable-next-line max-nesting-depth */
    slot[name='textarea']::slotted(textarea) {
      resize: $resize;
    }
  }
}

@each $variant in $variants {
  $i: index($variants, $variant);
  $variant-selector: nth($variant-selectors, $i);

  :host(#{$variant-selector}) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-default-border);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-default-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-default-placeholder);
    }

    slot[name='suffix'] sl-icon {
      //fill: var(--sl-color-text-field-#{$variant}-default-icon);
      --fill-default: var(--sl-color-input-text-field-#{$variant}-default-icon);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-default-background);
    }
  }

  :host(#{$variant-selector}:hover) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-hover-border);
    --_background: var(--sl-color-input-text-field-#{$variant}-hover-background);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-hover-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-hover-placeholder);
    }

    slot[name='suffix'] sl-icon {
      fill: var(--sl-color-input-text-field-#{$variant}-hover-icon);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-hover-background);
    }
  }

  //:host(#{$variant-selector}:focus-within:not([focus-visible-within])) {
  :host(#{$variant-selector}:active:not([disabled])) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-active-border);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-active-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-active-placeholder);
    }

    slot[name='suffix'] sl-icon {
      fill: var(--sl-color-input-text-field-#{$variant}-active-icon);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-active-background);
    }
  }

  //:host(#{$variant-selector}[focus-visible-within]:not([disabled])) {
  :host(#{$variant-selector}:focus-within:not([disabled])) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-focus-border);
    --_box-shadow: var(--sl-box-shadow-focus);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-focus-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-focus-placeholder);
    }

    slot[name='suffix'] sl-icon {
      fill: var(--sl-color-input-text-field-#{$variant}-focus-icon);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-focus-background);
    }
  }

  slot[name='textarea']::slotted(textarea) {
    &:focus-visible {
      --_color: var(--sl-color-input-text-field-#{$variant}-focus-input-text);
      --_box-shadow: var(--sl-box-shadow-focus);
    }
  }

  :host(#{$variant-selector}[disabled]) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-disabled-border);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-disabled-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-disabled-placeholder);
    }

    slot[name='suffix'] sl-icon {
      fill: var(--sl-color-input-text-field-#{$variant}-disabled-icon);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-disabled-background);
    }
  }
}
