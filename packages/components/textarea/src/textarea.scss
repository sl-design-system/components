$sizes: md, lg;
$variants: default, valid, invalid;
$variant-selectors: ':not([valid],[invalid])', ':where([valid])', ':where([invalid])';
$resize-types: none, both, horizontal, vertical, auto;

:host {
  --sl-textarea-rows: 3;
  --_border-size: var(--sl-border-width-button-default);
  --_border: var(--_border-size) solid var(--_border-color);
  --_border-radius: var(--sl-border-radius-default);
  --_box-shadow: var(--sl-box-shadow-none);
  --_transition: 200ms ease-in-out;
  --_min-height: calc(var(--sl-textarea-rows) * 1lh);
  // TODO: needs to be removed in the future when lh unit will be supported for Firefox as well
  @supports (-moz-appearance: none) {
    --_min-height: calc(var(--sl-textarea-rows) * 1.4em);
  }
}

@each $size in $sizes {
  :host([size='#{$size}']) {
    --_gap: var(--sl-space-text-field-gap-#{$size});

    slot[name='textarea']::slotted(textarea) {
      --_font: var(--sl-text-input-text-field-text-#{$size});
      --_padding: var(--sl-space-input-text-field-block-#{$size})
        calc(
          var(--sl-space-input-text-field-inline-#{$size}) +
          var(--sl-space-input-text-field-gap-#{$size}) +
          var(--sl-size-icon-#{$size})
        )
        var(--sl-space-input-text-field-block-#{$size})
        var(--sl-space-input-text-field-inline-#{$size});
    }

    slot[name='suffix'] sl-icon {
      --_right: var(--sl-space-input-text-field-inline-#{$size});
      --_top: var(--sl-space-input-text-field-block-#{$size});
    }
  }
}

@each $resize in $resize-types {
  :host([resize='#{$resize}']) slot[name='textarea']::slotted(textarea) {
    @if $resize == auto {
      resize: none;
    } @else {
      resize: $resize;
    }
  }
}

@each $variant in $variants {
  $i: index($variants, $variant);
  $variant-selector: nth($variant-selectors, $i);

  :host(#{$variant-selector}) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-default-border);
    --fill-default: var(--sl-color-input-text-field-#{$variant}-default-icon);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-default-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-default-placeholder);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-default-background);
    }
  }

  :host(#{$variant-selector}:hover) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-hover-border);
    --_background: var(--sl-color-input-text-field-#{$variant}-hover-background);
    --fill-default: var(--sl-color-input-text-field-#{$variant}-hover-icon);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-hover-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-hover-placeholder);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-hover-background);
    }
  }

  :host(#{$variant-selector}:active:not([disabled])) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-active-border);
    --fill-default: var(--sl-color-input-text-field-#{$variant}-active-icon);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-active-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-active-placeholder);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-active-background);
    }
  }

  :host(#{$variant-selector}:focus-within:not([disabled])) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-focus-border);
    --_box-shadow: var(--sl-box-shadow-focus);
    --fill-default: var(--sl-color-input-text-field-#{$variant}-focus-icon);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-focus-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-focus-placeholder);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-focus-background);
    }
  }

  slot[name='textarea']::slotted(textarea) {
    &:focus-visible {
      --_color: var(--sl-color-input-text-field-#{$variant}-focus-input-text);
      --_box-shadow: var(--sl-box-shadow-focus);
    }
  }

  :host(#{$variant-selector}[disabled]) {
    --_border-color: var(--sl-color-input-text-field-#{$variant}-disabled-border);
    --fill-default: var(--sl-color-input-text-field-#{$variant}-disabled-icon);

    slot[name='textarea']::slotted(textarea) {
      --_color: var(--sl-color-input-text-field-#{$variant}-disabled-input-text);
      --_placeholder-color: var(--sl-color-input-text-field-#{$variant}-disabled-placeholder);
    }

    .wrapper {
      --_background: var(--sl-color-input-text-field-#{$variant}-disabled-background);
    }
  }
}

:host {
  align-items: start;
  display: flex;
  flex-direction: column;
  gap: var(--_gap);
  vertical-align: top;
}

:host(:disabled) {
  cursor: default;
  pointer-events: none;
}

slot[name='textarea']::slotted(textarea) {
  appearance: none;
  background: none;
  border: 0;
  box-sizing: content-box;
  color: var(--_color);
  flex: 1;
  font: var(--_font);
  margin: 0;
  min-height: var(--_min-height);
  outline: none;
  padding: var(--_padding);

  &:focus {
    outline: none;
  }

  &::placeholder {
    color: var(--_placeholder-color);
    opacity: 1;
  }
}

.wrapper {
  background: var(--_background);
  border: var(--_border);
  border-radius: var(--_border-radius);
  box-shadow: var(--_box-shadow);
  display: flex;
  position: relative;
  transition: var(--_transition);
  transition-property: background, border, box-shadow, color, filter;
  width: 100%;
}

slot[name='suffix'] sl-icon {
  --fill-default: inherit;
  position: absolute;
  right: var(--_right);
  top: var(--_top);
}

.invalid-icon {
  display: none;
}

:host(:where([invalid])) {
  .invalid-icon {
    display: block;
  }
}
