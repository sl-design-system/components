:host {
  --_arrow-block-size: 5px;
  --_arrow-inline-size: 10px;
  --_max-width: var(--sl-tooltip-max-width, auto);

  background: var(--sl-elevation-surface-raised-inverted);
  border: 0;
  border-radius: var(--sl-size-borderRadius-default);
  box-sizing: border-box;
  color: var(--sl-color-foreground-inverted-plain);
  font: var(--_font);
  margin: 0;
  max-inline-size: var(--_max-width);
  opacity: 0;
  overflow: visible;
  overflow-wrap: break-word;
  padding-block: var(--sl-size-100);
  padding-inline: var(--sl-size-150);

  @media (prefers-reduced-motion: no-preference) {
    transition: opacity 0.2s cubic-bezier(0.25, 0, 0.3, 1);
  }

  /**
   * Because of :host and the fact that the element is often not inside a shadow root,
   * the popover-polyfill can have a higher specificity. We need to use !important
   * to overwrite the polyfill styling.
   *
   * This is only necessary for Firefox < 125 and older browsers that don't support popover
   */
  @supports not selector(:popover-open) {
    background: var(--_background) !important;
    color: var(--_color) !important;
    margin: 0 !important;
    overflow: visible !important;
    padding-block: var(--sl-size-100) !important;
    padding-inline: var(--sl-size-150) !important;
    position: fixed;
  }
}

.arrow {
  background-color: inherit;
  block-size: var(--_arrow-block-size);

  // z-index: -1;
  clip-path: polygon(0 100%, 100% 100%, 50% 0);
  display: flex;
  inline-size: var(--_arrow-inline-size);
  inset-block-end: calc(var(--_arrow-block-size) * -1);
  position: absolute;
  scale: 1 -1;
}

/* stylelint-disable-next-line selector-class-pattern */
:host(:where(:popover-open, .\\:popover-open)) {
  /* stylelint-disable-next-line scss/at-rule-no-unknown */
  @starting-style {
    display: block;
    opacity: 0;
  }

  opacity: 1;
}

:host([actual-placement^='bottom']) .arrow {
  clip-path: polygon(50% 100%, 100% 0, 0 0);
  inset-block-start: calc(var(--_arrow-block-size) * -1);
}

:host([actual-placement^='left']) .arrow {
  block-size: var(--_arrow-inline-size);
  clip-path: polygon(0 100%, 100% 50%, 0 0);
  inline-size: var(--_arrow-block-size);
  inset-inline-end: calc(var(--_arrow-block-size) * -1);
}

:host([actual-placement^='right']) .arrow {
  block-size: var(--_arrow-inline-size);
  clip-path: polygon(100% 100%, 100% 0, 0 50%);
  inline-size: var(--_arrow-block-size);
  inset-inline-start: calc(var(--_arrow-block-size) * -1);
}

.safe-triangle {
  position: fixed;
}
