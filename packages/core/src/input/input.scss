//@import './../breakpoints';

$sizes: md, lg;
$variants: default, valid, invalid; // TODO: what about readonly?
$variant-selectors: ':not([valid],[invalid])', ':where([valid])', ':where([invalid])';
//$states: default, hover, active, focus, disabled; // TODO: what about readonly? readonly the same as default, but different behaviour

// TODO: default instead of enable?
// TODO: with value and with placeholder filled/unfilled?

// TODO: add tokens for icons

:host {
  //--_border-color: var(--sl-color-text-field-default-enable-border); //#d3d3d3;
  //--_border-radius: 3px;
  --_border-size: var(--sl-border-width-input-border);
  --_border: var(--_border-size) solid var(--_border-color);
  --_border-radius: var(--sl-border-radius-default);
  --_box-shadow: var(--sl-box-shadow-none); //none;
  //--_gap: 0.25rem; // TODO: what about the default values?
}

:host {
  align-items: start;
  display: inline-flex;
  flex-direction: column;
  // gap: var(--_gap); // TODO: token for gap? // --sl-space-text-field-gap-lg / md
  vertical-align: top;
  width: 100%;
}

:host(:focus-visible) {
  outline: none;
  //box-shadow: var(--sl-box-shadow-focus);
}

:host(:disabled) {
  cursor: default;
  pointer-events: none;
}

//:host(:focus-within) {
//  --_border-color: hsl(207, 95%, calc(55% - 8% * 2));
//  --_box-shadow: 0 0 0 3px hsla(207, 95%, calc(55% - 8%), 0.25);
//}

:host(:where(:--invalid, [state--invalid], :invalid)) {
  //--_border-color: #c00;
}

slot[name='input']::slotted(input) {
  appearance: none;
  background: none;
  border: 0;
  color: var(--_color); //inherit;
  flex: 1;
  font: var(--_font); //inherit;
  //font-size: var(--_font-size);
  //line-height: var(--_line-height);
  margin: 0;
  outline: none;
  //padding: var(--_padding); //0;
  padding: 0;

  &:focus {
    outline: none;
  }

  &:invalid {
    //border: 3px solid red;
    background-color: #6b1313;
  }

  &::placeholder {
    color: var(--_placeholder-color);
  }
}

.wrapper {
  background: var(--_background);
  border: var(--_border);
  border-radius: var(--_border-radius);
  box-shadow: var(--_box-shadow);
  display: flex;
  gap: var(--_gap);
  //padding: calc(0.25rem - 1px) 0.5rem;
  padding: var(--_padding);
  transition: 0.2s ease-in-out;
  transition-property: background, border, box-shadow, color, filter;
  width: 100%;
}

/**
 * theming
 */

@each $size in $sizes {
  :host([size='#{$size}']) {
    //--_line-height: var(--sl-text-typeset-line-height-#{$size});
    //--_gap: var(s--sl-space-text-field-gap-#{$size}); //var(--sl-space-input-gap-#{$size});
    //--_size: var(--sl-size-input-#{$size});

    slot[name='input']::slotted(input) {
      --_font: var(--sl-text-input-text-#{$size});
      //--_line-height: var(--sl-text-typeset-line-height-#{$size});

      //--_padding: var(--sl-space-text-field-block-#{$size})
      //var(--sl-space-text-field-inline-#{$size})
      //var(--sl-space-text-field-block-#{$size})
      //var(--sl-space-text-field-inline-#{$size});
      //--_font-size: var(--sl-text-typeset-font-size-#{$size});

      //@include sl-text-input-text-lg;
      //font-family: var(--sl-text-typeset-font-family-body);
      //font-weight: var(--sl-text-typeset-font-weight-regular);
      //line-height: var(--sl-text-typeset-line-height-#{$size});
    }

    .wrapper {
      --_padding: var(--sl-space-text-field-block-#{$size})
        var(--sl-space-text-field-inline-#{$size})
        var(--sl-space-text-field-block-#{$size})
        var(--sl-space-text-field-inline-#{$size});
      --_gap: var(--sl-space-text-field-gap-#{$size});
    }
  }
}

// TODO: what about default values for css variables?

// TODO: styles for different states
@each $variant in $variants {
  //@each $state in $states {
  $i: index($variants, $variant);
  $variant-selector: nth($variant-selectors, $i);

  //@debug $variant;
  //@debug $variant-selector;

  //:host(:where(:#{$variant}, [#{$variant}], [state--invalid])) {
  //  :host(:where(:#{$variant-selector}, [#{$variant-selector}])) {
  :host(#{$variant-selector}) {
    // :host(:where(:--invalid, [state--invalid]))
    --_border-color: var(--sl-color-text-field-#{$variant}-default-border);
    //var(--sl-color-text-field-default-enable-border); //var(--sl-color-text-field-#{$variant}-#{$state}-border); //#c00;
    //--sl-color-text-field-default-enable-border

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-default-input-text);

      /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-default-placeholder);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-default-background);
    }
  }
  //}

  //:host(:where(:#{$variant-selector}, [#{$variant-selector}], [state--invalid]):hover) {
  :host(#{$variant-selector}:hover) {
    --_border-color: var(--sl-color-text-field-#{$variant}-hover-border);
    //--_label-color: var(--sl-color-input-#{$variant}-#{$state}-hover-label);
    //--_stroke: var(--sl-color-input-#{$variant}-#{$state}-hover-icon);
    --_background: var(--sl-color-text-field-#{$variant}-hover-background);

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-hover-input-text);

      /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-hover-placeholder);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-hover-background);
    }
  }

  //:host(:where(:#{$variant-selector}, [#{$variant-selector}], [state--invalid]):active) {
  :host(#{$variant-selector}:focus-within:not([focus-visible-within])) {
    --_border-color: var(--sl-color-text-field-#{$variant}-active-border);
    //--_label-color: var(--sl-color-input-#{$variant}-#{$state}-active-label);
    //--_stroke: var(--sl-color-input-#{$variant}-#{$state}-active-icon);

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-active-input-text);

      /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-active-placeholder);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-active-background);
    }
  }

  //:host(:where(:#{$variant-selector}, [#{$variant-selector}], [state--invalid]):focus-visible) { // :focus-within
  :host(#{$variant-selector}[focus-visible-within]:not([disabled])) {
    --_border-color: var(--sl-color-text-field-#{$variant}-focus-border);
    //--_label-color: var(--sl-color-input-#{$variant}-#{$state}-focus-label);
    //--_stroke: var(--sl-color-input-#{$variant}-#{$state}-focus-icon);
    --_box-shadow: var(--sl-box-shadow-focus);

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-focus-input-text);

      /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-focus-placeholder);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-focus-background);
    }
  }

  slot[name='input']::slotted(input) {
    &:focus-visible {
      --_color: var(--sl-color-text-field-#{$variant}-focus-input-text);
      --_box-shadow: var(--sl-box-shadow-focus);
    }
  }

  //:host(:where(:#{$variant-selector}, [#{$variant-selector}], [state--invalid])[disabled]) {
  :host(#{$variant-selector}[disabled]) {
    --_border-color: var(--sl-color-text-field-#{$variant}-disabled-border);
    //--_label-color: var(--sl-color-input-#{$variant}-#{$state}-disabled-label);
    //--_stroke: var(--sl-color-input-#{$variant}-#{$state}-disabled-icon);

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-disabled-input-text);

      /* stylelint-disable-next-line max-nesting-depth */ /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-disabled-placeholder);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-disabled-background);
    }
  }
}

//:host(:where(:invalid)) {
//  border: 3px solid #6b1313;
//}
