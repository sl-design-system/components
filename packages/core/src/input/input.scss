$sizes: md, lg;
$variants: default, valid, invalid; // TODO: what about readonly?
$variant-selectors: ':not([valid],[invalid])', ':where([valid])', ':where([invalid])';

// TODO: default instead of enable?
// TODO: with value and with placeholder filled/unfilled?

// TODO: add tokens for icons

:host {
  //--_border-color: var(--sl-color-text-field-default-enable-border); //#d3d3d3;
  //--_border-radius: 3px;
  //--_border-size: var(--sl-border-width-input-border); // TODO: or border-width-button-default?
  --_border-size: var(--sl-border-width-button-default);
  --_border: var(--_border-size) solid var(--_border-color);
  --_border-radius: var(--sl-border-radius-default);
  --_box-shadow: var(--sl-box-shadow-none); //none;
  //--_gap: 0.25rem; // TODO: what about the default values?
  --_transition: 200ms ease-in-out;
}

:host {
  align-items: start;
  display: inline-flex;
  flex-direction: column;
  transition: var(--_transition);
  vertical-align: top;
  width: 100%;

  //&:where([invalid], :invalid) {
  //  background-color: #1f97f9 !important;
  //}
}

:host(:focus-visible) {
  outline: none;
  //box-shadow: var(--sl-box-shadow-focus);
}

:host(:disabled) {
  cursor: default;
  pointer-events: none;
}

//:host(:focus-within) {
//  --_border-color: hsl(207, 95%, calc(55% - 8% * 2));
//  --_box-shadow: 0 0 0 3px hsla(207, 95%, calc(55% - 8%), 0.25);
//}

//:host(:where(:--invalid, [state--invalid], :invalid)) {
//  //--_border-color: #c00;
//}

slot[name='input']::slotted(input) {
  appearance: none;
  background: none;
  border: 0;
  color: var(--_color);
  flex: 1;
  font: var(--_font);
  margin: 0;
  outline: none;
  //padding: var(--_padding); //0;
  padding: 0;

  &:focus {
    outline: none;
  }

  //&:invalid {
  //  //border: 3px solid red;
  //  background-color: #6b1313;
  //}

  &::placeholder {
    color: var(--_placeholder-color);
    opacity: 1;
  }

  //&[aria-invalid='true'] {
  //  background-color: #6b1313;
  //}
}

.wrapper {
  align-items: center;
  background: var(--_background);
  border: var(--_border);
  border-radius: var(--_border-radius);
  box-shadow: var(--_box-shadow);
  display: flex;
  gap: var(--_gap);
  padding: var(--_padding);
  transition: var(--_transition);
  transition-property: background, border, box-shadow, color, filter;
  width: 100%;
}

.invalid-icon {
  display: none;
}

:host(:where([invalid])) {
  .invalid-icon {
    display: block;
  }
}

sl-error {
  //color: #1f97f9;
  display: inline-flex;
}

/**
 * theming
 */

@each $size in $sizes {
  :host([size='#{$size}']) {
    slot[name='input']::slotted(input) {
      --_font: var(--sl-text-input-text-#{$size});
    }

    .wrapper {
      --_padding: var(--sl-space-text-field-block-#{$size})
        var(--sl-space-text-field-inline-#{$size})
        var(--sl-space-text-field-block-#{$size})
        var(--sl-space-text-field-inline-#{$size});
      --_gap: var(--sl-space-text-field-gap-#{$size});
    }
  }
}

// TODO: what about default values for css variables?

@each $variant in $variants {
  $i: index($variants, $variant);
  $variant-selector: nth($variant-selectors, $i);

  //@debug $variant;
  //@debug $variant-selector;

  //:host(:where(:#{$variant}, [#{$variant}], [state--invalid])) {
  //  :host(:where(:#{$variant-selector}, [#{$variant-selector}])) {
  :host(#{$variant-selector}) {
    // :host(:where(:--invalid, [state--invalid]))
    --_border-color: var(--sl-color-text-field-#{$variant}-default-border);
    //var(--sl-color-text-field-default-enable-border); //var(--sl-color-text-field-#{$variant}-#{$state}-border); //#c00;
    //--sl-color-text-field-default-enable-border

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-default-input-text);

      /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-default-placeholder);
      }
    }

    slot[name='suffix'] {
      /* stylelint-disable-next-line max-nesting-depth */
      sl-icon {
        fill: var(--sl-color-text-field-#{$variant}-default-icon);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-default-background);
    }
  }
  //}

  //:host(:where(:#{$variant-selector}, [#{$variant-selector}], [state--invalid]):hover) {
  :host(#{$variant-selector}:hover) {
    --_border-color: var(--sl-color-text-field-#{$variant}-hover-border);
    //--_label-color: var(--sl-color-input-#{$variant}-#{$state}-hover-label);
    //--_stroke: var(--sl-color-input-#{$variant}-#{$state}-hover-icon);
    --_background: var(--sl-color-text-field-#{$variant}-hover-background);

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-hover-input-text);

      /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-hover-placeholder);
      }
    }

    slot[name='suffix'] {
      /* stylelint-disable-next-line max-nesting-depth */
      sl-icon {
        fill: var(--sl-color-text-field-#{$variant}-hover-icon);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-hover-background);
    }
  }

  //:host(:where(:#{$variant-selector}, [#{$variant-selector}], [state--invalid]):active) {
  :host(#{$variant-selector}:focus-within:not([focus-visible-within])) {
    --_border-color: var(--sl-color-text-field-#{$variant}-active-border);
    //--_label-color: var(--sl-color-input-#{$variant}-#{$state}-active-label);
    //--_stroke: var(--sl-color-input-#{$variant}-#{$state}-active-icon);

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-active-input-text);

      /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-active-placeholder);
      }
    }

    slot[name='suffix'] {
      /* stylelint-disable-next-line max-nesting-depth */
      sl-icon {
        fill: var(--sl-color-text-field-#{$variant}-active-icon);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-active-background);
    }
  }

  //:host(:where(:#{$variant-selector}, [#{$variant-selector}], [state--invalid]):focus-visible) { // :focus-within
  :host(#{$variant-selector}[focus-visible-within]:not([disabled])) {
    --_border-color: var(--sl-color-text-field-#{$variant}-focus-border);
    //--_label-color: var(--sl-color-input-#{$variant}-#{$state}-focus-label);
    //--_stroke: var(--sl-color-input-#{$variant}-#{$state}-focus-icon);
    --_box-shadow: var(--sl-box-shadow-focus);

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-focus-input-text);

      /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-focus-placeholder);
      }
    }

    slot[name='suffix'] {
      /* stylelint-disable-next-line max-nesting-depth */
      sl-icon {
        fill: var(--sl-color-text-field-#{$variant}-focus-icon);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-focus-background);
    }
  }

  slot[name='input']::slotted(input) {
    &:focus-visible {
      --_color: var(--sl-color-text-field-#{$variant}-focus-input-text);
      --_box-shadow: var(--sl-box-shadow-focus);
    }
  }

  //:host(:where(:#{$variant-selector}, [#{$variant-selector}], [state--invalid])[disabled]) {
  :host(#{$variant-selector}[disabled]) {
    --_border-color: var(--sl-color-text-field-#{$variant}-disabled-border);
    //--_label-color: var(--sl-color-input-#{$variant}-#{$state}-disabled-label);
    //--_stroke: var(--sl-color-input-#{$variant}-#{$state}-disabled-icon);

    slot[name='input']::slotted(input) {
      --_color: var(--sl-color-text-field-#{$variant}-disabled-input-text);

      /* stylelint-disable-next-line max-nesting-depth */ /* stylelint-disable-next-line max-nesting-depth */
      &::placeholder {
        --_placeholder-color: var(--sl-color-text-field-#{$variant}-disabled-placeholder);
      }
    }

    slot[name='suffix'] {
      /* stylelint-disable-next-line max-nesting-depth */
      sl-icon {
        fill: var(--sl-color-text-field-#{$variant}-disabled-icon);
      }
    }

    .wrapper {
      --_background: var(--sl-color-text-field-#{$variant}-disabled-background);
    }
  }
}
