$sizes: md, lg;
$variants: default, valid, invalid; // TODO: what about readonly?
$states: idle, hover, active, focus, disabled; // TODO: what about readonly?

:host {
  --_border-color: var(--sl-color-text-field-default-enable-border); //#d3d3d3;
  //--_border-radius: 3px;
  --_border-size: var(--sl-border-width-input-border);
  --_border: var(--_border-size) solid var(--_border-color);
  --_border-radius: var(--sl-border-radius-default);
  --_box-shadow: var(--sl-box-shadow-none); //none;
  --_gap: 0.25rem;
}

:host {
  align-items: start;
  display: inline-flex;
  flex-direction: column;
  gap: var(--_gap);
  vertical-align: top;
}

:host(:disabled) {
  cursor: default;
  pointer-events: none;
}

:host(:focus-within) {
  --_border-color: hsl(207, 95%, calc(55% - 8% * 2));
  --_box-shadow: 0 0 0 3px hsla(207, 95%, calc(55% - 8%), 0.25);
}

:host(:where(:--invalid, [state--invalid])) {
  --_border-color: #c00;
}

slot[name='input']::slotted(input) {
  appearance: none;
  background: none;
  border: 0;
  color: inherit;
  flex: 1;
  font: inherit;
  //line-height: 24px;
  line-height: var(--_line-height);
  margin: 0;
  outline: none;
  //padding: var(--_padding); //0;
  padding: 0;

  &:focus {
    outline: none;
  }
}

.wrapper {
  border: var(--_border);
  border-radius: var(--_border-radius);
  box-shadow: var(--_box-shadow);
  display: flex;
  //padding: calc(0.25rem - 1px) 0.5rem;
  padding: var(--_padding);
  transition: 0.2s ease-in-out;
  transition-property: background, border, box-shadow, color, filter;
  width: 100%;
}

/**
 * theming
 */

@each $size in $sizes {
  :host([size='#{$size}']) {
    //--_line-height: var(--sl-text-typeset-line-height-#{$size});
    //--_gap: var(--sl-space-input-gap-#{$size});
    //--_size: var(--sl-size-input-#{$size});

    slot[name='input']::slotted(input) {
      --_line-height: var(--sl-text-typeset-line-height-#{$size});
      //--_padding: var(--sl-space-text-field-block-#{$size})
      //var(--sl-space-text-field-inline-#{$size})
      //var(--sl-space-text-field-block-#{$size})
      //var(--sl-space-text-field-inline-#{$size});
    }

    .wrapper {
      --_padding: var(--sl-space-text-field-block-#{$size})
        var(--sl-space-text-field-inline-#{$size})
        var(--sl-space-text-field-block-#{$size})
        var(--sl-space-text-field-inline-#{$size});
    }
  }
}

// TODO: what about default values for css variables?

// TODO: styles for different states
@each $variant in $variants {
  :host(:where(:#{$variant}, [state--invalid])) {
    // :host(:where(:--invalid, [state--invalid]))
    --_border-color: var(--sl-color-text-field-#{$variant}-default-border); //#c00;
  }
}
