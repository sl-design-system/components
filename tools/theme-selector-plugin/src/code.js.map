{"version":3,"file":"code.js","sourceRoot":"","sources":["code.ts"],"names":[],"mappings":";AAAA,+CAA+C;AAE/C,2EAA2E;AAC3E,0DAA0D;AAE1D,6EAA6E;AAC7E,oDAAoD;AACpD,+EAA+E;AAC/E,oFAAoF;AAEpF,yCAAyC;AACzC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAEvB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACrB,4EAA4E;AAC5E,4EAA4E;AAC5E,kBAAkB;AAClB,KAAK,CAAC,EAAE,CAAC,SAAS,GAAG,CAAC,GAAoC,EAAE,EAAE;IAC5D,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACxB,qFAAqF;IACrF,qDAAqD;IAErD,0EAA0E;IAC1E,uEAAuE;IACvE,IAAI,GAAG,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;QAC/B,gDAAgD;QAChD,wCAAwC;QAExC,MAAM,KAAK,GAAgB,EAAE,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3B,MAAM,IAAI,GAAG,KAAK,CAAC,eAAe,EAAE,CAAC;YACrC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAChE,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACpC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC;QACD,KAAK,CAAC,WAAW,CAAC,SAAS,GAAG,KAAK,CAAC;QACpC,KAAK,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACxB,KAAK,CAAC,WAAW,CAAC,oCAAoC,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAC9E,CAAC;IAED,4EAA4E;IAC5E,2EAA2E;IAC3E,uBAAuB;AACzB,CAAC,CAAC","sourcesContent":["/// <reference types=\"@figma/plugin-typings\" />\n\n// This plugin will open a window to prompt the user to enter a number, and\n// it will then create that many rectangles on the screen.\n\n// This file holds the main code for plugins. Code in this file has access to\n// the *figma document* via the figma global object.\n// You can access browser APIs in the <script> tag inside \"ui.html\" which has a\n// full browser environment (See https://www.figma.com/plugin-docs/how-plugins-run).\n\n// This shows the HTML page in \"ui.html\".\nfigma.showUI(__html__);\n\nconsole.log('heeee');\n// Calls to \"parent.postMessage\" from within the HTML page will trigger this\n// callback. The callback will be passed the \"pluginMessage\" property of the\n// posted message.\nfigma.ui.onmessage = (msg: { type: string; count: number }) => {\n  console.log('msg', msg);\n  // const localCollections = await figma.variables.getLocalVariableCollectionsAsync();\n  // console.log('localCollections', localCollections);\n\n  // One way of distinguishing between different types of messages sent from\n  // your HTML page is to use an object with a \"type\" property like this.\n  if (msg.type === 'selectTheme') {\n    // This plugin creates rectangles on the screen.\n    // const numberOfRectangles = msg.count;\n\n    const nodes: SceneNode[] = [];\n    for (let i = 0; i < 5; i++) {\n      const rect = figma.createRectangle();\n      rect.x = i * 150;\n      rect.fills = [{ type: 'SOLID', color: { r: 1, g: 0.5, b: 0 } }];\n      figma.currentPage.appendChild(rect);\n      nodes.push(rect);\n    }\n    figma.currentPage.selection = nodes;\n    figma.viewport.scrollAndZoomIntoView(nodes);\n    console.log('msg', msg);\n    figma.currentPage.setExplicitVariableModeForCollection('theme', 'EXPLICIT');\n  }\n\n  // Make sure to close the plugin when you're done. Otherwise the plugin will\n  // keep running, which shows the cancel button at the bottom of the screen.\n  // figma.closePlugin();\n};\n"]}