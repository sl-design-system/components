{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "../packages/components/accordion/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/accordion.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/accordion-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/accordion/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-accordion",
          "declaration": {
            "name": "Accordion",
            "module": "/packages/components/accordion/src/accordion.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-accordion-item",
          "declaration": {
            "name": "AccordionItem",
            "module": "/packages/components/accordion/src/accordion-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/accordion/src/accordion-item.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/accordion/src/accordion-item.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/accordion/src/accordion-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An accordion item component.",
          "name": "AccordionItem",
          "cssParts": [
            {
              "description": "Header element of the accordion-item",
              "name": "summary"
            }
          ],
          "slots": [
            {
              "description": "Body content for the accordion",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the element is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the details element is opened.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "summary",
              "type": {
                "text": "string | undefined"
              },
              "description": "A text shown in the header - as a title of the accordion item.",
              "attribute": "summary"
            },
            {
              "kind": "event",
              "name": "toggleEvent",
              "type": {
                "text": "EventEmitter<SlToggleEvent<string>>"
              },
              "description": "Emits when the accordion item has been toggled."
            }
          ],
          "events": [
            {
              "name": "toggleEvent",
              "type": {
                "text": "EventEmitter<SlToggleEvent<string>>"
              },
              "description": "Emits when the accordion item has been toggled.",
              "fieldName": "toggleEvent"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the element is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the details element is opened.",
              "fieldName": "open"
            },
            {
              "name": "summary",
              "type": {
                "text": "string | undefined"
              },
              "description": "A text shown in the header - as a title of the accordion item.",
              "fieldName": "summary"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-accordion-item",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionItem",
          "declaration": {
            "name": "AccordionItem",
            "module": "../packages/components/accordion/src/accordion-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/accordion/src/accordion.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/accordion/src/accordion.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/accordion/src/accordion.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An accordion component that can contain accordion-items\n\n```html\n  <sl-accordion>...</sl-accordion>\n```",
          "name": "Accordion",
          "slots": [
            {
              "description": "The place for multiple `<sl-accordion-item>`",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "single",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether only one accordion item can be opened at once. By default, multiple accordion items can be opened.",
              "attribute": "single",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "single",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether only one accordion item can be opened at once. By default, multiple accordion items can be opened.",
              "fieldName": "single"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-accordion",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Accordion",
          "declaration": {
            "name": "Accordion",
            "module": "../packages/components/accordion/src/accordion.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/avatar/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/avatar.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/models.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/avatar/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-avatar",
          "declaration": {
            "name": "Avatar",
            "module": "/packages/components/avatar/src/avatar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/avatar/src/avatar.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/avatar/src/avatar.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/avatar/src/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An avatar component to show a picture, initials or icon, to provide a quickly recognizable representation of a user.\n\n```html\n  <sl-avatar display-name=\"Lynn Smith\" picture=\"http://sanomalearning.design/avatars/lynn.png\"></sl-avatar>\n```",
          "name": "Avatar",
          "cssProperties": [
            {
              "description": "Max inline-size of the container in vertical mode. If not set it will behave like a regular `display: block` element.",
              "name": "--sl-avatar-max-inline-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "badgeText",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text to show on the badge in the top right corner of the avatar.\nBe aware this text should not be more then a few characters.\nTypically this option is used to show a number, for example unread messages.",
              "attribute": "badge-text"
            },
            {
              "kind": "field",
              "name": "displayInitials",
              "type": {
                "text": "string | undefined"
              },
              "description": "The initials that need to be displayed. If none are set they are determined based on the displayName .",
              "attribute": "display-initials"
            },
            {
              "kind": "field",
              "name": "displayName",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name that needs to be displayed.",
              "attribute": "display-name"
            },
            {
              "kind": "field",
              "name": "fallback",
              "type": {
                "text": "'initials' | 'image'"
              },
              "default": "'initials'",
              "description": "The fallback to use when there is no user image present.",
              "attribute": "fallback"
            },
            {
              "kind": "field",
              "name": "imageOnly",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "This hides the name when set to true.",
              "attribute": "image-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Used for the aria-label on the image. You can use `{{badgeText}}` in the string\nto have it replaced by the value set in the badgeText. For example to show \"6 unread messages\", where 6 is also shown in the badge.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the avatar.",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pictureUrl",
              "type": {
                "text": "string | undefined"
              },
              "description": "The url of the avatar image.",
              "attribute": "picture-url"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl'"
              },
              "default": "'md'",
              "description": "The size of the avatar.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "'danger' | 'success' | 'warning' | 'accent' | 'neutral' | 'primary'"
              },
              "description": "Optional user status to show.",
              "attribute": "status",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "badge-text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text to show on the badge in the top right corner of the avatar.\nBe aware this text should not be more then a few characters.\nTypically this option is used to show a number, for example unread messages.",
              "fieldName": "badgeText"
            },
            {
              "name": "fallback",
              "type": {
                "text": "'initials' | 'image'"
              },
              "default": "'initials'",
              "description": "The fallback to use when there is no user image present.",
              "fieldName": "fallback"
            },
            {
              "name": "image-only",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "This hides the name when set to true.",
              "fieldName": "imageOnly"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Used for the aria-label on the image. You can use `{{badgeText}}` in the string\nto have it replaced by the value set in the badgeText. For example to show \"6 unread messages\", where 6 is also shown in the badge.",
              "fieldName": "label"
            },
            {
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the avatar.",
              "fieldName": "orientation"
            },
            {
              "name": "size",
              "type": {
                "text": "'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl'"
              },
              "default": "'md'",
              "description": "The size of the avatar.",
              "fieldName": "size"
            },
            {
              "name": "status",
              "type": {
                "text": "'danger' | 'success' | 'warning' | 'accent' | 'neutral' | 'primary'"
              },
              "description": "Optional user status to show.",
              "fieldName": "status"
            },
            {
              "name": "display-name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name that needs to be displayed.",
              "fieldName": "displayName"
            },
            {
              "name": "display-initials",
              "type": {
                "text": "string | undefined"
              },
              "description": "The initials that need to be displayed. If none are set they are determined based on the displayName .",
              "fieldName": "displayInitials"
            },
            {
              "name": "picture-url",
              "type": {
                "text": "string | undefined"
              },
              "description": "The url of the avatar image.",
              "fieldName": "pictureUrl"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-avatar",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Avatar",
          "declaration": {
            "name": "Avatar",
            "module": "../packages/components/avatar/src/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/avatar/src/models.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/badge/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/badge.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/badge/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-badge",
          "declaration": {
            "name": "Badge",
            "module": "/packages/components/badge/src/badge.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/badge/src/badge.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/badge/src/badge.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/badge/src/badge.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Show totals at a glance or labels contents with a tag.\n\n```html\n<sl-badge>99+</sl-badge>\n```",
          "name": "Badge",
          "slots": [
            {
              "description": "Contents of the badge",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "BadgeSize"
              },
              "default": "'md'",
              "description": "The size of the badge component.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl'"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "BadgeVariant"
              },
              "default": "'neutral'",
              "description": "The variant of the badge.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'neutral' | 'primary' | 'info' | 'danger' | 'success' | 'warning' | 'accent'"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "BadgeSize"
              },
              "default": "'md'",
              "description": "The size of the badge component.",
              "fieldName": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl'"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "BadgeVariant"
              },
              "default": "'neutral'",
              "description": "The variant of the badge.",
              "fieldName": "variant",
              "expandedType": {
                "text": "'neutral' | 'primary' | 'info' | 'danger' | 'success' | 'warning' | 'accent'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-badge",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Badge",
          "declaration": {
            "name": "Badge",
            "module": "../packages/components/badge/src/badge.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/breadcrumbs/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/breadcrumbs.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/breadcrumbs/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-breadcrumbs",
          "declaration": {
            "name": "Breadcrumbs",
            "module": "/packages/components/breadcrumbs/src/breadcrumbs.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/breadcrumbs/src/breadcrumbs.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/breadcrumbs/src/breadcrumbs.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/breadcrumbs/src/breadcrumbs.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A component to display a breadcrumb trail.",
          "name": "Breadcrumbs",
          "slots": [
            {
              "description": "The breadcrumbs to display.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "breadcrumbs",
              "type": {
                "text": "Breadcrumb[]"
              },
              "default": "[]",
              "description": "The slotted breadcrumbs."
            },
            {
              "kind": "field",
              "name": "collapseThreshold",
              "default": "3",
              "description": "The threshold for when breadcrumbs should be collapsed into a menu.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "homeUrl",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'/'",
              "description": "The url for the home link, defaults to the root url.\n\nBy changing this static property you can change the default value for\nall future instances of the component. Changing the static property\nwon't affect already created instances.",
              "attribute": "home-url"
            },
            {
              "kind": "field",
              "name": "homeUrl",
              "description": "The url for the home link, defaults to the root url.\n\nIf you want to change the default value for all future instances of the component,\nyou can change the static property. If you want to change the property of an already\ncreated instance, you need to change this property."
            },
            {
              "kind": "field",
              "name": "noHome",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "false",
              "description": "When true doesn't show a home link as the first breadcrumb.\n\nBy changing this static property you can change the default value for\nall future instances of the component. Changing the static property\nwon't affect already created instances.",
              "attribute": "no-home"
            },
            {
              "kind": "field",
              "name": "noHome",
              "description": "When true doesn't show a home link as the first breadcrumb.\n\nIf you want to change the default value for all future instances of the component,\nyou can change the static property. If you want to change the property of an already\ncreated instance, you need to change this property."
            }
          ],
          "attributes": [
            {
              "name": "home-url",
              "type": {
                "text": "string"
              },
              "default": "'/'",
              "description": "The url for the home link, defaults to the root url.\n\nBy changing this static property you can change the default value for\nall future instances of the component. Changing the static property\nwon't affect already created instances.",
              "fieldName": "homeUrl"
            },
            {
              "name": "no-home",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true doesn't show a home link as the first breadcrumb.\n\nBy changing this static property you can change the default value for\nall future instances of the component. Changing the static property\nwon't affect already created instances.",
              "fieldName": "noHome"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-breadcrumbs",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "breadcrumbs",
              "type": {
                "text": "Breadcrumb[]"
              },
              "default": "[]",
              "description": "The slotted breadcrumbs."
            },
            {
              "kind": "field",
              "name": "collapseThreshold",
              "default": "3",
              "description": "The threshold for when breadcrumbs should be collapsed into a menu.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "homeUrl",
              "description": "The url for the home link, defaults to the root url.\n\nIf you want to change the default value for all future instances of the component,\nyou can change the static property. If you want to change the property of an already\ncreated instance, you need to change this property."
            },
            {
              "kind": "field",
              "name": "noHome",
              "description": "When true doesn't show a home link as the first breadcrumb.\n\nIf you want to change the default value for all future instances of the component,\nyou can change the static property. If you want to change the property of an already\ncreated instance, you need to change this property."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Breadcrumbs",
          "declaration": {
            "name": "Breadcrumbs",
            "module": "../packages/components/breadcrumbs/src/breadcrumbs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button-bar/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/button-bar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button-bar/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-button-bar",
          "declaration": {
            "name": "ButtonBar",
            "module": "/packages/components/button-bar/src/button-bar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button-bar/src/button-bar.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/button-bar/src/button-bar.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button-bar/src/button-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Groups buttons together in a bar separated by whitespace.\n\n```html\n<sl-button-bar>\n  <sl-button>Foo</sl-button>\n  <sl-button>Bar</sl-button>\n</sl-button-bar>\n```",
          "name": "ButtonBar",
          "cssProperties": [
            {
              "description": "The alignment of the buttons within the bar",
              "name": "--sl-button-bar-align"
            },
            {
              "description": "The flex direction of the button container",
              "name": "--sl-button-bar-direction"
            }
          ],
          "slots": [
            {
              "description": "Buttons to be grouped in the bar",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "ButtonBarAlign | undefined"
              },
              "description": "The alignment of the buttons within the bar.",
              "attribute": "align",
              "reflects": true,
              "expandedType": {
                "text": "'start' | 'center' | 'end' | 'space-between' | undefined"
              }
            },
            {
              "kind": "field",
              "name": "reverse",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set to true, the button order is reversed using flex-direction.",
              "attribute": "reverse",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "ButtonBarAlign | undefined"
              },
              "description": "The alignment of the buttons within the bar.",
              "fieldName": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end' | 'space-between' | undefined"
              }
            },
            {
              "name": "reverse",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set to true, the button order is reversed using flex-direction.",
              "fieldName": "reverse"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-button-bar",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonBar",
          "declaration": {
            "name": "ButtonBar",
            "module": "../packages/components/button-bar/src/button-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-button",
          "declaration": {
            "name": "Button",
            "module": "/packages/components/button/src/button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button/src/button.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/button/src/button.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button/src/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A single, simple button, with optionally an icon.\n\n```html\n  <sl-button>Foo</sl-button>\n```",
          "name": "Button",
          "slots": [
            {
              "description": "Text label of the button. Optionally an <code>sl-icon</code> can be added",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the button is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "ButtonFill"
              },
              "default": "'solid'",
              "description": "The fill of the button.",
              "attribute": "fill",
              "reflects": true,
              "expandedType": {
                "text": "'solid' | 'outline' | 'link' | 'ghost'"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'md'",
              "description": "The size of the button.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ButtonType"
              },
              "default": "'button'",
              "description": "The type of the button. Can be used to mimic the functionality of submit and reset buttons in native HTML buttons.",
              "attribute": "type",
              "expandedType": {
                "text": "'button' | 'reset' | 'submit'"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'default'",
              "description": "The variant of the button.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'default' | 'primary' | 'success' | 'warning' | 'danger'"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the button is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "fill",
              "type": {
                "text": "ButtonFill"
              },
              "default": "'solid'",
              "description": "The fill of the button.",
              "fieldName": "fill",
              "expandedType": {
                "text": "'solid' | 'outline' | 'link' | 'ghost'"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'md'",
              "description": "The size of the button.",
              "fieldName": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "ButtonType"
              },
              "default": "'button'",
              "description": "The type of the button. Can be used to mimic the functionality of submit and reset buttons in native HTML buttons.",
              "fieldName": "type",
              "expandedType": {
                "text": "'button' | 'reset' | 'submit'"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'default'",
              "description": "The variant of the button.",
              "fieldName": "variant",
              "expandedType": {
                "text": "'default' | 'primary' | 'success' | 'warning' | 'danger'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-button",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "../packages/components/button/src/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/card/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/card/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-card",
          "declaration": {
            "name": "Card",
            "module": "/packages/components/card/src/card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/card/src/card.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/card/src/card.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/card/src/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Use cards to display media and text in a compact, appealing way.\n\n```html\n<sl-card></sl-card>\n```",
          "name": "Card",
          "cssProperties": [
            {
              "description": "The aspectratio of the media container (default is 4/3). By default this ratio is always maintained, and will cause the media to become smaller when there isn't sufficient space for the full width.",
              "name": "--sl-card-media-aspect-ratio"
            },
            {
              "description": "The width of the media in relation to the text. Can be set in pixels or `fr`.",
              "name": "--sl-card-media-width"
            },
            {
              "description": "X-Focuspoint of the media; this is taken as the center when the media is cropped.",
              "name": "--sl-card-media-x"
            },
            {
              "description": "Y-Focuspoint of the media; this is taken as the center when the media is cropped.",
              "name": "--sl-card-media-y"
            },
            {
              "description": "When card is smaller than this size it will switch from horizontal (when set) to vertical layout.",
              "name": "--sl-card-orientation-breakpoint"
            },
            {
              "description": "Set this to 100% when the aspectratio of the media doesn't matter and you want it to fill the full height of the card.",
              "name": "--sl-card-stretch-image"
            },
            {
              "description": "The width of the text in relation to the media. Can be set in pixels (not recommended) or `fr`.",
              "name": "--sl-card-text-width"
            }
          ],
          "slots": [
            {
              "description": "Title of the card",
              "name": "default"
            },
            {
              "description": "Media, this can be an image or video",
              "name": "media"
            },
            {
              "description": "Subtitle or badges",
              "name": "header"
            },
            {
              "description": "Body text of the card",
              "name": "body"
            },
            {
              "description": "Icon button for actions on the card.",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "explicitHeight",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When the height of the card is set (or constrained) by its container (for example in a grid with fixed rows) this needs to be set to be added in order to assure the correct rendering",
              "attribute": "explicit-height"
            },
            {
              "kind": "field",
              "name": "height",
              "type": {
                "text": "CardHeightOptions"
              },
              "default": "'fixed'",
              "description": "When the height is `fixed` the image will determine the height of the card, when it is `flex` the height of the text will determine the height of the card.",
              "attribute": "height",
              "reflects": true,
              "expandedType": {
                "text": "'fixed' | 'flex'"
              }
            },
            {
              "kind": "field",
              "name": "mediaPosition",
              "type": {
                "text": "CardMediaPosition"
              },
              "default": "'start'",
              "description": "Show the media at the start or at the end.",
              "attribute": "media-position",
              "reflects": true,
              "expandedType": {
                "text": "'start' | 'end'"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "CardOrientation"
              },
              "default": "'horizontal'",
              "description": "The position of the media in relation to the text",
              "attribute": "orientation",
              "reflects": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "padding",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether there is a padding around the media. Recommended to set to true when the `--sl-card-stretch-image` isn't set to 100%",
              "attribute": "padding",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "padding",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether there is a padding around the media. Recommended to set to true when the `--sl-card-stretch-image` isn't set to 100%",
              "fieldName": "padding"
            },
            {
              "name": "explicit-height",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When the height of the card is set (or constrained) by its container (for example in a grid with fixed rows) this needs to be set to be added in order to assure the correct rendering",
              "fieldName": "explicitHeight"
            },
            {
              "name": "height",
              "type": {
                "text": "CardHeightOptions"
              },
              "default": "'fixed'",
              "description": "When the height is `fixed` the image will determine the height of the card, when it is `flex` the height of the text will determine the height of the card.",
              "fieldName": "height",
              "expandedType": {
                "text": "'fixed' | 'flex'"
              }
            },
            {
              "name": "orientation",
              "type": {
                "text": "CardOrientation"
              },
              "default": "'horizontal'",
              "description": "The position of the media in relation to the text",
              "fieldName": "orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "media-position",
              "type": {
                "text": "CardMediaPosition"
              },
              "default": "'start'",
              "description": "Show the media at the start or at the end.",
              "fieldName": "mediaPosition",
              "expandedType": {
                "text": "'start' | 'end'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-card",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "../packages/components/card/src/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/checkbox.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/checkbox-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "/packages/components/checkbox/src/checkbox.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-checkbox-group",
          "declaration": {
            "name": "CheckboxGroup",
            "module": "/packages/components/checkbox/src/checkbox-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/src/checkbox-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/checkbox/src/checkbox-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/src/checkbox-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Checkbox group; treat a group of checkboxes as one form input with validation, hints and errors",
          "name": "CheckboxGroup",
          "slots": [
            {
              "description": "A list of `sl-checkbox` elements.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the group is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "At least one checkbox in the group must be checked if true.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'md' | 'lg'"
              },
              "description": "The size of the checkboxes in the group.",
              "attribute": "size"
            },
            {
              "kind": "event",
              "name": "sl-blur",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the component loses focus."
            },
            {
              "kind": "event",
              "name": "sl-change",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T[]>>"
              },
              "description": "Emits when the value of the group changes."
            },
            {
              "kind": "event",
              "name": "sl-focus",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component receives focus."
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value of the group.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "events": [
            {
              "name": "blurEvent",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the component loses focus.",
              "fieldName": "blurEvent"
            },
            {
              "name": "changeEvent",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T[]>>"
              },
              "description": "Emits when the value of the group changes.",
              "fieldName": "changeEvent"
            },
            {
              "name": "focusEvent",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component receives focus.",
              "fieldName": "focusEvent"
            },
            {
              "type": {
                "text": "ValidateEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the group is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "At least one checkbox in the group must be checked if true.",
              "fieldName": "required"
            },
            {
              "name": "size",
              "type": {
                "text": "'md' | 'lg'"
              },
              "description": "The size of the checkboxes in the group.",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "T[] | undefined"
              },
              "description": "The value of the group.",
              "fieldName": "value"
            },
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/form"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-checkbox-group",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CheckboxGroup",
          "declaration": {
            "name": "CheckboxGroup",
            "module": "../packages/components/checkbox/src/checkbox-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/src/checkbox.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/checkbox/src/checkbox.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/src/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A checkbox with 3 states; unchecked, checked and intermediate.",
          "name": "Checkbox",
          "slots": [
            {
              "description": "Text label of the checkbox. Technically there are no limits what can be put here; text, images, icons etc.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is checked.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox has the indeterminate state.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is required.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "attribute": "show-valid",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CheckboxSize"
              },
              "default": "'md'",
              "description": "The size of the checkbox.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            },
            {
              "kind": "event",
              "name": "sl-blur",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the component loses focus."
            },
            {
              "kind": "event",
              "name": "sl-change",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T | null>>"
              },
              "description": "Emits when the checked state changes."
            },
            {
              "kind": "event",
              "name": "sl-focus",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component receives focus."
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value of the checkbox when the checkbox is checked.\nSee the formValue property for easy access.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "events": [
            {
              "name": "blurEvent",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the component loses focus.",
              "fieldName": "blurEvent"
            },
            {
              "name": "changeEvent",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T | null>>"
              },
              "description": "Emits when the checked state changes.",
              "fieldName": "changeEvent"
            },
            {
              "name": "focusEvent",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component receives focus.",
              "fieldName": "focusEvent"
            },
            {
              "type": {
                "text": "ValidateEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is checked.",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox has the indeterminate state.",
              "fieldName": "indeterminate"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is required.",
              "fieldName": "required"
            },
            {
              "name": "show-valid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "fieldName": "showValid"
            },
            {
              "name": "size",
              "type": {
                "text": "CheckboxSize"
              },
              "default": "'md'",
              "description": "The size of the checkbox.",
              "fieldName": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The value of the checkbox when the checkbox is checked.\nSee the formValue property for easy access.",
              "fieldName": "value"
            },
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/form"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-checkbox",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "../packages/components/checkbox/src/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/dialog/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/dialog/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-dialog",
          "declaration": {
            "name": "Dialog",
            "module": "/packages/components/dialog/src/dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/dialog/src/dialog.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/dialog/src/dialog.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/dialog/src/dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A dialog component for displaying modal UI.",
          "name": "Dialog",
          "cssProperties": [
            {
              "description": "The maximum width of the dialog",
              "name": "--sl-dialog-max-inline-size"
            }
          ],
          "cssParts": [
            {
              "description": "The dialog element",
              "name": "dialog"
            },
            {
              "description": "The container of the title and subtitle",
              "name": "titles"
            },
            {
              "description": "The button bar in the header",
              "name": "header-bar"
            },
            {
              "description": "The button bar in the footer",
              "name": "footer-bar"
            }
          ],
          "slots": [
            {
              "description": "Area where action buttons are placed",
              "name": "actions"
            },
            {
              "description": "Body content for the dialog",
              "name": "default"
            },
            {
              "description": "Footer content for the dialog",
              "name": "footer"
            },
            {
              "description": "Header content for the dialog",
              "name": "header"
            },
            {
              "description": "More space for buttons for the dialog's header",
              "name": "header-buttons"
            },
            {
              "description": "The title of the dialog",
              "name": "title"
            },
            {
              "description": "The subtitle of the dialog",
              "name": "subtitle"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "closeButton",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Determines whether a close button should be shown in the top right corner.",
              "attribute": "close-button"
            },
            {
              "kind": "field",
              "name": "dialogRole",
              "type": {
                "text": "'dialog' | 'alertdialog'"
              },
              "default": "'dialog'",
              "description": "The role for the dialog element.",
              "attribute": "dialog-role"
            },
            {
              "kind": "field",
              "name": "disableCancel",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables the ability to cancel the dialog by pressing the Escape key\nor clicking on the backdrop.",
              "attribute": "disable-cancel"
            },
            {
              "kind": "method",
              "name": "showModal",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "event",
              "name": "sl-cancel",
              "type": {
                "text": "EventEmitter<SlCancelEvent>"
              },
              "description": "Emits when the cancel has been cancelled. This happens when the user closes\nthe dialog using the escape key or clicks on the backdrop."
            },
            {
              "kind": "event",
              "name": "sl-close",
              "type": {
                "text": "EventEmitter<SlCloseEvent>"
              },
              "description": "Emits when the dialog has been closed."
            }
          ],
          "events": [
            {
              "name": "cancelEvent",
              "type": {
                "text": "EventEmitter<SlCancelEvent>"
              },
              "description": "Emits when the cancel has been cancelled. This happens when the user closes\nthe dialog using the escape key or clicks on the backdrop.",
              "fieldName": "cancelEvent"
            },
            {
              "name": "closeEvent",
              "type": {
                "text": "EventEmitter<SlCloseEvent>"
              },
              "description": "Emits when the dialog has been closed.",
              "fieldName": "closeEvent"
            }
          ],
          "attributes": [
            {
              "name": "close-button",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Determines whether a close button should be shown in the top right corner.",
              "fieldName": "closeButton"
            },
            {
              "name": "dialog-role",
              "type": {
                "text": "'dialog' | 'alertdialog'"
              },
              "default": "'dialog'",
              "description": "The role for the dialog element.",
              "fieldName": "dialogRole"
            },
            {
              "name": "disable-cancel",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Disables the ability to cancel the dialog by pressing the Escape key\nor clicking on the backdrop.",
              "fieldName": "disableCancel"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-dialog",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "showModal",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Dialog",
          "declaration": {
            "name": "Dialog",
            "module": "../packages/components/dialog/src/dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/drawer/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/drawer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/drawer/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-drawer",
          "declaration": {
            "name": "Drawer",
            "module": "/packages/components/drawer/src/drawer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/drawer/src/drawer.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/drawer/src/drawer.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/drawer/src/drawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A drawer component for displaying UI at the side of the screen.",
          "name": "Drawer",
          "cssProperties": [
            {
              "description": "The maximum inline size of the drawer",
              "name": "--sl-drawer-max-inline-size"
            }
          ],
          "slots": [
            {
              "description": "Body content for the drawer",
              "name": "default"
            },
            {
              "description": "Header content for the drawer",
              "name": "header"
            },
            {
              "description": "The title of the drawer",
              "name": "title"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attachment",
              "type": {
                "text": "DrawerAttachment"
              },
              "default": "'right'",
              "description": "The side of the screen where the drawer is attached",
              "attribute": "attachment",
              "reflects": true,
              "expandedType": {
                "text": "'right' | 'left' | 'top' | 'bottom'"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "closeButtonSize",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'sm'",
              "description": "The size of the button",
              "attribute": "closeButtonSize",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disableClose",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the ability to close the dialog using the Escape key.",
              "attribute": "disable-close"
            },
            {
              "kind": "method",
              "name": "showModal",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "disable-close",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the ability to close the dialog using the Escape key.",
              "fieldName": "disableClose"
            },
            {
              "name": "attachment",
              "type": {
                "text": "DrawerAttachment"
              },
              "default": "'right'",
              "description": "The side of the screen where the drawer is attached",
              "fieldName": "attachment",
              "expandedType": {
                "text": "'right' | 'left' | 'top' | 'bottom'"
              }
            },
            {
              "name": "closeButtonSize",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'sm'",
              "description": "The size of the button",
              "fieldName": "closeButtonSize",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-drawer",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "showModal",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement | undefined"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Drawer",
          "declaration": {
            "name": "Drawer",
            "module": "../packages/components/drawer/src/drawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/editor.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-editor",
          "declaration": {
            "name": "Editor",
            "module": "/packages/components/editor/src/editor.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/commands.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "setHTML",
          "return": {
            "type": {
              "text": "Command"
            }
          },
          "parameters": [
            {
              "name": "content",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setHTML",
          "declaration": {
            "name": "setHTML",
            "module": "../packages/components/editor/src/commands.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/editor.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/editor/src/editor.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/editor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Editor",
          "members": [
            {
              "kind": "method",
              "name": "createEditor",
              "return": {
                "type": {
                  "text": "EditorView"
                }
              }
            },
            {
              "kind": "method",
              "name": "createSchema",
              "return": {
                "type": {
                  "text": "Schema<EditorNodes, EditorMarks>"
                }
              }
            },
            {
              "kind": "method",
              "name": "createState",
              "return": {
                "type": {
                  "text": "EditorState"
                }
              }
            },
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "plugins",
              "type": {
                "text": "Plugin[] | undefined"
              },
              "description": "Additional plugins."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value for this form control.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            },
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/form"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-editor",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "ValidateEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "createEditor",
              "return": {
                "type": {
                  "text": "EditorView"
                }
              }
            },
            {
              "kind": "method",
              "name": "createSchema",
              "return": {
                "type": {
                  "text": "Schema<EditorNodes, EditorMarks>"
                }
              }
            },
            {
              "kind": "method",
              "name": "createState",
              "return": {
                "type": {
                  "text": "EditorState"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "plugins",
              "type": {
                "text": "Plugin[] | undefined"
              },
              "description": "Additional plugins."
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Editor",
          "declaration": {
            "name": "Editor",
            "module": "../packages/components/editor/src/editor.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/keymap.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "buildKeymap",
          "return": {
            "type": {
              "text": "{ [key: string]: Command }"
            }
          },
          "parameters": [
            {
              "name": "schema",
              "type": {
                "text": "Schema<EditorNodes, EditorMarks>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "buildListKeymap",
          "return": {
            "type": {
              "text": "{ [key: string]: Command }"
            }
          },
          "parameters": [
            {
              "name": "schema",
              "type": {
                "text": "Schema<EditorNodes, EditorMarks>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "buildKeymap",
          "declaration": {
            "name": "buildKeymap",
            "module": "../packages/components/editor/src/keymap.ts"
          }
        },
        {
          "kind": "js",
          "name": "buildListKeymap",
          "declaration": {
            "name": "buildListKeymap",
            "module": "../packages/components/editor/src/keymap.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/list-utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "findAncestorPosition",
          "return": {
            "type": {
              "text": "ResolvedPos"
            }
          },
          "parameters": [
            {
              "name": "doc",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "pos",
              "type": {
                "text": "ResolvedPos"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getAncestorNodesBetween",
          "return": {
            "type": {
              "text": "Node[]"
            }
          },
          "parameters": [
            {
              "name": "doc",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "$from",
              "type": {
                "text": "ResolvedPos"
              }
            },
            {
              "name": "$to",
              "type": {
                "text": "ResolvedPos"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getListLiftTarget",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "schema",
              "type": {
                "text": "Schema"
              }
            },
            {
              "name": "resPos",
              "type": {
                "text": "ResolvedPos"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isRangeOfType",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "doc",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "$from",
              "type": {
                "text": "ResolvedPos"
              }
            },
            {
              "name": "$to",
              "type": {
                "text": "ResolvedPos"
              }
            },
            {
              "name": "nodeType",
              "type": {
                "text": "NodeType"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "liftFollowingList",
          "return": {
            "type": {
              "text": "Transaction"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "from",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "to",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "rootListDepthNum",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "tr",
              "type": {
                "text": "Transaction"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "liftListItems",
          "return": {
            "type": {
              "text": "Command"
            }
          }
        },
        {
          "kind": "function",
          "name": "liftSelectionList",
          "return": {
            "type": {
              "text": "Transaction"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "tr",
              "type": {
                "text": "Transaction"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "rootListDepth",
          "return": {
            "type": {
              "text": "number | undefined"
            }
          },
          "parameters": [
            {
              "name": "pos",
              "type": {
                "text": "ResolvedPos"
              }
            },
            {
              "name": "nodes",
              "type": {
                "text": "{ [key: string]: NodeType }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "splitListItemKeepMarks",
          "parameters": [
            {
              "name": "itemType",
              "type": {
                "text": "NodeType"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "toggleList",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "dispatch",
              "type": {
                "text": "DispatchFn"
              }
            },
            {
              "name": "view",
              "type": {
                "text": "EditorView"
              }
            },
            {
              "name": "listType",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "toggleListCommand",
          "return": {
            "type": {
              "text": "Command"
            }
          },
          "parameters": [
            {
              "name": "listType",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "toggleOrderedList",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "dispatch",
              "type": {
                "text": "DispatchFn"
              }
            },
            {
              "name": "view",
              "type": {
                "text": "EditorView"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "toggleUnorderedList",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "dispatch",
              "type": {
                "text": "DispatchFn"
              }
            },
            {
              "name": "view",
              "type": {
                "text": "EditorView"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "wrapInList",
          "return": {
            "type": {
              "text": "Command"
            }
          },
          "parameters": [
            {
              "name": "nodeType",
              "type": {
                "text": "NodeType"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "rootListDepth",
          "declaration": {
            "name": "rootListDepth",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getListLiftTarget",
          "declaration": {
            "name": "getListLiftTarget",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "liftSelectionList",
          "declaration": {
            "name": "liftSelectionList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleList",
          "declaration": {
            "name": "toggleList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleListCommand",
          "declaration": {
            "name": "toggleListCommand",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "liftFollowingList",
          "declaration": {
            "name": "liftFollowingList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isRangeOfType",
          "declaration": {
            "name": "isRangeOfType",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getAncestorNodesBetween",
          "declaration": {
            "name": "getAncestorNodesBetween",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "findAncestorPosition",
          "declaration": {
            "name": "findAncestorPosition",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "liftListItems",
          "declaration": {
            "name": "liftListItems",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "wrapInList",
          "declaration": {
            "name": "wrapInList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleUnorderedList",
          "declaration": {
            "name": "toggleUnorderedList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleOrderedList",
          "declaration": {
            "name": "toggleOrderedList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "splitListItemKeepMarks",
          "declaration": {
            "name": "splitListItemKeepMarks",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/schema.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "commonAttributes",
          "return": {
            "type": {
              "text": "Attrs"
            }
          }
        },
        {
          "kind": "function",
          "name": "isEmpty",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, unknown>"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "marks",
          "type": {
            "text": "Record<EditorMarks, MarkSpec>"
          },
          "default": "{\n  /**\n   * A link. Has `href` and `title` attributes. `title` defaults to an empty string.\n   * Rendered and parsed as an `<a>` element.\n   */\n  link: {\n    attrs: {\n      href: { default: '' },\n      target: { default: null },\n      title: { default: null }\n    },\n    inclusive: false,\n    parseDOM: [\n      {\n        getAttrs: (node: string | HTMLElement): Attrs | null => {\n          if (typeof node !== 'string') {\n            return {\n              href: node.getAttribute('href'),\n              target: node.getAttribute('target'),\n              title: node.getAttribute('title')\n            };\n          }\n\n          return null;\n        },\n        tag: 'a[href]'\n      }\n    ],\n    toDOM: (mark: Mark): DOMOutputSpec => [\n      'a',\n      // Add default value for href. Otherwise the link is not rendered properly\n      Object.assign({}, { href: '' }, removeEmptyEntries(mark.attrs)),\n      SLOT\n    ]\n  },\n  /**\n   * An emphasis mark. Rendered as an `<em>` element.\n   * Has parse rules that also match `<i>` and `font-style: italic`.\n   */\n  em: {\n    parseDOM: [{ tag: 'i' }, { tag: 'em' }, { style: 'font-style=italic' }],\n    toDOM: (): DOMOutputSpec => ['em', SLOT]\n  },\n  /**\n   * A strong mark. Rendered as `<strong>`, parse rules also match `<b>` and `font-weight: bold`.\n   */\n  strong: {\n    parseDOM: [\n      { tag: 'strong' },\n      // This works around a Google Docs misbehavior where pasted content will be inexplicably\n      // wrapped in `<b>`tags with a font-weight normal\n      {\n        tag: 'b',\n        getAttrs: (node: string | HTMLElement): false | null => {\n          if (typeof node !== 'string') {\n            return node.style.fontWeight !== 'normal' && null;\n          }\n\n          return null;\n        }\n      },\n      {\n        // According to the docs, the value can be a DOM element (for tag rules) or a string (for style rules).\n        getAttrs: (node: string | HTMLElement): false | null => {\n          if (typeof node === 'string') {\n            return /^(bold(er)?|[5-9]\\d{2,})$/.test(node) && null;\n          }\n\n          return null;\n        },\n        style: 'font-weight'\n      }\n    ],\n    toDOM: (): DOMOutputSpec => ['strong', SLOT]\n  },\n  /**\n   * Code font mark. Represented as a `<code>` element.\n   */\n  code: {\n    parseDOM: [\n      { tag: 'span.code', preserveWhitespace: true },\n      { tag: 'code', preserveWhitespace: true },\n      { tag: 'tt', preserveWhitespace: true },\n      {\n        tag: 'span',\n        preserveWhitespace: true,\n        getAttrs: domNode => {\n          const dom = domNode as HTMLSpanElement;\n\n          if (dom.style.whiteSpace === 'pre') {\n            return {};\n          }\n\n          if (dom.style.fontFamily && dom.style.fontFamily.toLowerCase().indexOf('monospace') >= 0) {\n            return {};\n          }\n\n          return false;\n        }\n      }\n    ],\n    toDOM: (): DOMOutputSpec => ['code', SLOT]\n  },\n  /**\n   * An underline mark. Rendered as a `<u>` element. Parse rules also match `text-decoration: underline`.\n   */\n  underline: {\n    parseDOM: [{ tag: 'u' }, { style: 'text-decoration=underline' }],\n    toDOM: (): DOMOutputSpec => ['u', SLOT]\n  },\n  /**\n   * A strikethrough mark. Rendered as a `<del>` element.\n   * Parse rules also match `<s>`, `<strike>`, `text-decoration: line-through`.\n   */\n  strikethrough: {\n    parseDOM: [{ tag: 'del' }, { tag: 's' }, { tag: 'strike' }, { style: 'text-decoration=line-through' }],\n    toDOM: (): DOMOutputSpec => ['del', SLOT]\n  },\n  /**\n   * A subscript mark. Rendered as a `<sub>` element. Parse rules also match `vertical-align: sub`.\n   */\n  subscript: {\n    parseDOM: [{ tag: 'sub' }, { style: 'vertical-align=sub' }],\n    toDOM: (): DOMOutputSpec => ['sub', SLOT]\n  },\n  /**\n   * A superscript mark. Rendered as a `<sup>` element. Parse rules also match `vertical-align: super`.\n   */\n  superscript: {\n    parseDOM: [{ tag: 'sup' }, { style: 'vertical-align=super' }],\n    toDOM: (): DOMOutputSpec => ['sup', SLOT]\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "nodes",
          "type": {
            "text": "Record<EditorNodes, NodeSpec>"
          },
          "default": "{\n  /** The top level document node. */\n  doc: {\n    content: 'block+'\n  },\n  /**\n   * A plain textblock paragraph. Represented as a `<p>` element in the DOM.\n   */\n  paragraph: {\n    attrs: Object.assign({}, commonAttributes()),\n    content: 'inline*',\n    group: 'block',\n    parseDOM: [{ tag: 'p', getAttrs: getAttributes }],\n    toDOM: (node: PMNode): DOMOutputSpec =>\n      isEmpty(node.attrs) ? ['p', SLOT] : ['p', removeEmptyEntries(node.attrs), SLOT]\n  },\n  /**\n   * A blockquote (`<blockquote>`) which wraps one or more blocks.\n   */\n  blockquote: {\n    attrs: Object.assign({}, commonAttributes()),\n    content: 'inline*',\n    defining: true,\n    group: 'block',\n    parseDOM: [{ tag: 'blockquote', getAttrs: getAttributes }],\n    toDOM: (node: PMNode): DOMOutputSpec => ['blockquote', removeEmptyEntries(node.attrs), SLOT]\n  },\n  /**\n   * A horizontal (`<hr>`) rule.\n   */\n  horizontalRule: {\n    group: 'block',\n    parseDOM: [{ tag: 'hr' }],\n    toDOM: (): DOMOutputSpec => ['hr']\n  },\n  /**\n   * A heading textblock with a `level` attribute that has to hold a number from 1 to 6.\n   * Parsed and serialized as an `<h1>` to an `<h6>` element.\n   */\n  heading: {\n    attrs: Object.assign({ level: { default: 1 } }, commonAttributes()),\n    content: 'inline*',\n    defining: true,\n    group: 'block',\n    parseDOM: [\n      { tag: 'h1', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 1 }) },\n      { tag: 'h2', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 2 }) },\n      { tag: 'h3', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 3 }) },\n      { tag: 'h4', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 4 }) },\n      { tag: 'h5', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 5 }) },\n      { tag: 'h6', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 6 }) }\n    ],\n    toDOM: (node: PMNode): DOMOutputSpec => {\n      const attrs = removeEntries(node.attrs, key => key !== 'level'),\n        { level } = node.attrs as Attrs & { level: number };\n\n      return [`h${level}`, removeEmptyEntries(attrs), SLOT];\n    }\n  },\n  /**\n   * A code listing. Prevents marks or non-text inline nodes by default.\n   * Represented as a `<pre>` element with a `<code>` element inside.\n   */\n  codeBlock: {\n    code: true,\n    content: 'text*',\n    defining: true,\n    group: 'block',\n    marks: '',\n    parseDOM: [\n      {\n        preserveWhitespace: 'full',\n        tag: 'pre'\n      }\n    ],\n    toDOM: (): DOMOutputSpec => ['pre', ['code', SLOT]]\n  },\n  /** The text node. */\n  text: {\n    group: 'inline'\n  },\n  /**\n   * An inline image (`<img>`) node. Supports `src`, `alt`, and `href` attributes.\n   * The last two default to an empty string.\n   */\n  image: {\n    attrs: Object.assign({}, commonAttributes(), {\n      alt: { default: null },\n      height: { default: null },\n      src: {},\n      width: { default: null }\n    }),\n    draggable: true,\n    group: 'inline',\n    inline: true,\n    parseDOM: [{ tag: 'img[src]', getAttrs: getAttributes }],\n    toDOM: (node: PMNode): DOMOutputSpec => ['img', removeEmptyEntries(node.attrs)]\n  },\n  /**\n   * A hard line break. Represented as a `<br>` element in the DOM.\n   */\n  hardBreak: {\n    group: 'inline',\n    inline: true,\n    parseDOM: [{ tag: 'br', getAttrs: getAttributes }],\n    selectable: false,\n    toDOM: (): DOMOutputSpec => ['br']\n  },\n  /**\n   * A list item. Represented as a `<li>` element.\n   */\n  listItem: {\n    attrs: Object.assign({}, commonAttributes()),\n    content: 'paragraph block*',\n    marks: '_',\n    parseDOM: [{ tag: 'li', getAttrs: getAttributes }],\n    toDOM: (node: PMNode): DOMOutputSpec => ['li', removeEmptyEntries(node.attrs), SLOT]\n  },\n  /**\n   * An ordered list. Represented as an `<ol>` element. Has a single `order` attribute\n   * which determines the number at which the list starts counting. Defaults to 1.\n   */\n  orderedList: {\n    attrs: {\n      order: {\n        default: 1\n      }\n    },\n    content: 'listItem+',\n    group: 'block',\n    parseDOM: [\n      {\n        getAttrs: (node: string | HTMLElement) => {\n          if (typeof node === 'string') {\n            return {};\n          }\n\n          return {\n            ...getAttributes(node),\n            order: node.hasAttribute('start') ? parseInt(node.getAttribute('start') || '0', 10) : 1\n          };\n        },\n        tag: 'ol'\n      }\n    ],\n    toDOM: (node: PMNode): DOMOutputSpec => {\n      const { order } = node.attrs as Attrs & { order: number };\n\n      return order === 1 ? ['ol', SLOT] : ['ol', { start: order }, SLOT];\n    }\n  },\n  /**\n   * An unordered list. Represented as a `<ul>` element.\n   */\n  bulletList: {\n    content: 'listItem+',\n    group: 'block',\n    parseDOM: [{ tag: 'ul', getAttrs: getAttributes }],\n    toDOM: (): DOMOutputSpec => ['ul', SLOT]\n  }\n}"
        },
        {
          "kind": "function",
          "name": "removeEmptyEntries",
          "return": {
            "type": {
              "text": "Record<string, string>"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, unknown>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeEntries",
          "return": {
            "type": {
              "text": "Record<string, string>"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "name": "predicate",
              "type": {
                "text": "(key: string) => boolean"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isEmpty",
          "declaration": {
            "name": "isEmpty",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeEntries",
          "declaration": {
            "name": "removeEntries",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeEmptyEntries",
          "declaration": {
            "name": "removeEmptyEntries",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "commonAttributes",
          "declaration": {
            "name": "commonAttributes",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "marks",
          "declaration": {
            "name": "marks",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "nodes",
          "declaration": {
            "name": "nodes",
            "module": "../packages/components/editor/src/schema.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createContentNode",
          "return": {
            "type": {
              "text": "Node"
            }
          },
          "parameters": [
            {
              "name": "schema",
              "type": {
                "text": "Schema"
              }
            },
            {
              "name": "value",
              "default": "''"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getHTML",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createContentNode",
          "declaration": {
            "name": "createContentNode",
            "module": "../packages/components/editor/src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getHTML",
          "declaration": {
            "name": "getHTML",
            "module": "../packages/components/editor/src/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/error.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/form-control-mixin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/form-field.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/form.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/hint.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/label.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/update-validity-event.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/validate-event.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-error",
          "declaration": {
            "name": "Error",
            "module": "/packages/components/form/src/error.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-form",
          "declaration": {
            "name": "Form",
            "module": "/packages/components/form/src/form.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-form-field",
          "declaration": {
            "name": "FormField",
            "module": "/packages/components/form/src/form-field.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-hint",
          "declaration": {
            "name": "Hint",
            "module": "/packages/components/form/src/hint.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-label",
          "declaration": {
            "name": "Label",
            "module": "/packages/components/form/src/label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/error.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/form/src/error.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/error.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component for displaying an error message for a form control.",
          "name": "Error",
          "slots": [
            {
              "description": "The error message to display.",
              "name": "error-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "noIcon",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the icon should be hidden. This can be useful when the form control\nalready shows an icon inside the component itself.",
              "attribute": "no-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ErrorSize"
              },
              "default": "'md'",
              "description": "The size at which the error is displayed.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-icon",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the icon should be hidden. This can be useful when the form control\nalready shows an icon inside the component itself.",
              "fieldName": "noIcon"
            },
            {
              "name": "size",
              "type": {
                "text": "ErrorSize"
              },
              "default": "'md'",
              "description": "The size at which the error is displayed.",
              "fieldName": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-error",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Error",
          "declaration": {
            "name": "Error",
            "module": "../packages/components/form/src/error.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/form-control-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin that adds form control functionality to a component.",
          "name": "FormControlMixin",
          "members": [
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form."
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control."
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again."
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown."
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value for this form control."
            }
          ],
          "events": [
            {
              "type": {
                "text": "ValidateEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name"
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity"
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user."
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again."
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value for this form control."
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlMixin",
          "declaration": {
            "name": "FormControlMixin",
            "module": "../packages/components/form/src/form-control-mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/form-field.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/form/src/form-field.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/form-field.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormField",
          "members": [
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLElement & FormControl | undefined"
              },
              "description": "The form control element."
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "A hint that will be shown when there are no validation messages.\nYou can also slot an `<sl-hint>` element.",
              "attribute": "hint"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text for the label. You can also slot an `<sl-label>` element.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "mark",
              "type": {
                "text": "LabelMark | undefined"
              },
              "description": "How to mark this field depending if it is required or not.",
              "attribute": "mark",
              "expandedType": {
                "text": "'optional' | 'required' | undefined"
              }
            },
            {
              "kind": "event",
              "name": "sl-form-field",
              "type": {
                "text": "EventEmitter<SlFormFieldEvent>"
              },
              "description": "Emits when the field is added to a form."
            }
          ],
          "events": [
            {
              "name": "formFieldEvent",
              "type": {
                "text": "EventEmitter<SlFormFieldEvent>"
              },
              "description": "Emits when the field is added to a form.",
              "fieldName": "formFieldEvent"
            }
          ],
          "attributes": [
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "A hint that will be shown when there are no validation messages.\nYou can also slot an `<sl-hint>` element.",
              "fieldName": "hint"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text for the label. You can also slot an `<sl-label>` element.",
              "fieldName": "label"
            },
            {
              "name": "mark",
              "type": {
                "text": "LabelMark | undefined"
              },
              "description": "How to mark this field depending if it is required or not.",
              "fieldName": "mark",
              "expandedType": {
                "text": "'optional' | 'required' | undefined"
              }
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-form-field",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLElement & FormControl | undefined"
              },
              "description": "The form control element."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormField",
          "declaration": {
            "name": "FormField",
            "module": "../packages/components/form/src/form-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/form.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/form/src/form.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/form.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This component is a wrapper for the form controls.\n\nIt is used to provide the ability to report the validity of all the form controls,\nnot just the invalid ones. By calling the `reportValidity()` method, it in turn will\ncall the `reportValidity()` methods of all the form controls.\n\nThis wrapper is necessary because the native form lacks this behavior.\nSee https://github.com/whatwg/html/issues/9878",
          "name": "Form",
          "members": [
            {
              "kind": "field",
              "name": "fields",
              "type": {
                "text": "FormField[]"
              },
              "default": "[]",
              "description": "The fields in the form."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T"
              },
              "readonly": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-form",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "fields",
              "type": {
                "text": "FormField[]"
              },
              "default": "[]",
              "description": "The fields in the form."
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T"
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Form",
          "declaration": {
            "name": "Form",
            "module": "../packages/components/form/src/form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/hint.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/form/src/hint.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/hint.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component for displaying a hint for a form control.",
          "name": "Hint",
          "slots": [
            {
              "description": "The hint to display.",
              "name": "hint-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "HintSize"
              },
              "default": "'md'",
              "description": "The size at which the hint is displayed.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "HintSize"
              },
              "default": "'md'",
              "description": "The size at which the hint is displayed.",
              "fieldName": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-hint",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "../packages/components/form/src/hint.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/label.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/form/src/label.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Label",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the form control is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "The DOM id of the form control this is linked to.",
              "attribute": "for"
            },
            {
              "kind": "field",
              "name": "mark",
              "type": {
                "text": "LabelMark | undefined"
              },
              "description": "Indicates whether the label should indicate if the field is optional or required.",
              "attribute": "mark",
              "expandedType": {
                "text": "'optional' | 'required' | undefined"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "LabelSize"
              },
              "default": "'md'",
              "description": "The size of the label.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the form control is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "The DOM id of the form control this is linked to.",
              "fieldName": "for"
            },
            {
              "name": "mark",
              "type": {
                "text": "LabelMark | undefined"
              },
              "description": "Indicates whether the label should indicate if the field is optional or required.",
              "fieldName": "mark",
              "expandedType": {
                "text": "'optional' | 'required' | undefined"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "LabelSize"
              },
              "default": "'md'",
              "description": "The size of the label.",
              "fieldName": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-label",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "../packages/components/form/src/label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/update-validity-event.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Emits when the validity of the form control changes.",
          "name": "UpdateValidityEvent",
          "members": [
            {
              "description": "What kind of validity should be shown to the user",
              "name": "showValidity",
              "kind": "field"
            },
            {
              "description": "The validity state of the element",
              "name": "valid",
              "kind": "field"
            },
            {
              "description": "The validation message of the element",
              "name": "validationMessage",
              "kind": "field"
            }
          ],
          "events": [
            {
              "name": "sl-update-validity"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "../packages/components/form/src/update-validity-event.ts"
          },
          "methods": [],
          "fields": [
            {
              "description": "The validity state of the element",
              "name": "valid",
              "kind": "field"
            },
            {
              "description": "The validation message of the element",
              "name": "validationMessage",
              "kind": "field"
            },
            {
              "description": "What kind of validity should be shown to the user",
              "name": "showValidity",
              "kind": "field"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UpdateValidityEvent",
          "declaration": {
            "name": "UpdateValidityEvent",
            "module": "../packages/components/form/src/update-validity-event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/form/src/validate-event.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Emits when the form control can be validated.",
          "name": "ValidateEvent",
          "events": [
            {
              "name": "sl-validate"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "../packages/components/form/src/validate-event.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ValidateEvent",
          "declaration": {
            "name": "ValidateEvent",
            "module": "../packages/components/form/src/validate-event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/column-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/drag-handle-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/filter-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/grid.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/selection-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/sort-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/text-field-column.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-grid",
          "declaration": {
            "name": "Grid",
            "module": "/packages/components/grid/src/grid.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-column",
          "declaration": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-column-group",
          "declaration": {
            "name": "GridColumnGroup",
            "module": "/packages/components/grid/src/column-group.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-drag-handle-column",
          "declaration": {
            "name": "GridDragHandleColumn",
            "module": "/packages/components/grid/src/drag-handle-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-filter-column",
          "declaration": {
            "name": "GridFilterColumn",
            "module": "/packages/components/grid/src/filter-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-select-column",
          "declaration": {
            "name": "GridSelectColumn",
            "module": "/packages/components/grid/src/select-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-selection-column",
          "declaration": {
            "name": "GridSelectionColumn",
            "module": "/packages/components/grid/src/selection-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-sort-column",
          "declaration": {
            "name": "GridSortColumn",
            "module": "/packages/components/grid/src/sort-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-text-field-column",
          "declaration": {
            "name": "GridTextFieldColumn",
            "module": "/packages/components/grid/src/text-field-column.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/column-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridColumnGroup",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "default": "[]",
              "description": "The nested columns in the group."
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "The width of the group column is either manually specified, or the sum of the nested columns.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-column-group",
          "customElement": true,
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "events": [
            {
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdateEvent",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "default": "[]",
              "description": "The nested columns in the group."
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridColumnGroup",
          "declaration": {
            "name": "GridColumnGroup",
            "module": "../packages/components/grid/src/column-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width"
            },
            {
              "kind": "event",
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed."
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance."
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow"
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header"
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed."
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts"
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path"
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell."
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid."
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes."
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width"
            }
          ],
          "events": [
            {
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdateEvent"
            }
          ],
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth"
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow"
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header"
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path"
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts"
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky"
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-grid-column",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed."
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes."
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance."
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell."
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridColumn",
          "declaration": {
            "name": "GridColumn",
            "module": "../packages/components/grid/src/column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/drag-handle-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridDragHandleColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-drag-handle-column",
          "customElement": true,
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "events": [
            {
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdateEvent",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridDragHandleColumn",
          "declaration": {
            "name": "GridDragHandleColumn",
            "module": "../packages/components/grid/src/drag-handle-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/filter-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridFilterColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilterFunction<T> | undefined"
              },
              "description": "The filter function if you want to do custom filtering."
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "internalOptions",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The internal options if none are provided."
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "select | text"
              },
              "description": "The mode for the filter:\n- `select`: The filter will allow you to select from a list of options. If none\nare provided, the filter will create a list of options based on the column's values\n- `text`: The filter will be a text field.",
              "attribute": "mode"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The options you can choose from to filter. If not provided,\nthe filter will be a text field."
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[] | undefined"
              },
              "description": "The value for this filter column.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "type": {
                "text": "select | text"
              },
              "description": "The mode for the filter:\n- `select`: The filter will allow you to select from a list of options. If none\nare provided, the filter will create a list of options based on the column's values\n- `text`: The filter will be a text field.",
              "fieldName": "mode"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[] | undefined"
              },
              "description": "The value for this filter column.",
              "fieldName": "value"
            },
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-filter-column",
          "customElement": true,
          "events": [
            {
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdateEvent",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "internalOptions",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The internal options if none are provided."
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilterFunction<T> | undefined"
              },
              "description": "The filter function if you want to do custom filtering."
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The options you can choose from to filter. If not provided,\nthe filter will be a text field."
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridFilterColumn",
          "declaration": {
            "name": "GridFilterColumn",
            "module": "../packages/components/grid/src/filter-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/filter.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/grid/src/filter.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/filter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridFilter",
          "members": [
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn<T>"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilterFunction<T> | undefined"
              },
              "description": "The custom filter"
            },
            {
              "kind": "event",
              "name": "filterChangeEvent",
              "type": {
                "text": "EventEmitter<SlFilterChangeEvent>"
              },
              "description": "Emits when the filter has been added or removed."
            },
            {
              "kind": "event",
              "name": "filterValueChangeEvent",
              "type": {
                "text": "EventEmitter<SlFilterValueChangeEvent<T>>"
              },
              "description": "Emits when the value of the this filter has changed."
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "GridFilterMode | undefined"
              },
              "description": "The mode of the filter.",
              "attribute": "mode",
              "expandedType": {
                "text": "'select' | 'text' | undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The filter options."
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the field to filter on.",
              "attribute": "path"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[] | undefined"
              },
              "attribute": "value"
            }
          ],
          "events": [
            {
              "name": "filterChangeEvent",
              "type": {
                "text": "EventEmitter<SlFilterChangeEvent>"
              },
              "description": "Emits when the filter has been added or removed.",
              "fieldName": "filterChangeEvent"
            },
            {
              "name": "filterValueChangeEvent",
              "type": {
                "text": "EventEmitter<SlFilterValueChangeEvent<T>>"
              },
              "description": "Emits when the value of the this filter has changed.",
              "fieldName": "filterValueChangeEvent"
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "type": {
                "text": "GridFilterMode | undefined"
              },
              "description": "The mode of the filter.",
              "fieldName": "mode",
              "expandedType": {
                "text": "'select' | 'text' | undefined"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the field to filter on.",
              "fieldName": "path"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[] | undefined"
              },
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn<T>"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilterFunction<T> | undefined"
              },
              "description": "The custom filter"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "GridFilterOption[] | undefined"
              },
              "description": "The filter options."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridFilter",
          "declaration": {
            "name": "GridFilter",
            "module": "../packages/components/grid/src/filter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/grid.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/grid/src/grid.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/grid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Grid",
          "members": [
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "T | undefined"
              },
              "description": "The active item in the grid."
            },
            {
              "kind": "event",
              "name": "activeItemChangeEvent",
              "type": {
                "text": "EventEmitter<SlActiveItemChangeEvent<T>>"
              },
              "description": "Emits when the active item changes"
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "DataSource<T> | undefined"
              },
              "description": "Provide your own implementation for getting the data."
            },
            {
              "kind": "event",
              "name": "dragEndEvent",
              "type": {
                "text": "EventEmitter<SlDragEndEvent<T>>"
              },
              "description": "Emits when a drag operation has finished."
            },
            {
              "kind": "event",
              "name": "dragStartEvent",
              "type": {
                "text": "EventEmitter<SlDragStartEvent<T>>"
              },
              "description": "Emits when a drag operation is starting."
            },
            {
              "kind": "field",
              "name": "draggableRows",
              "type": {
                "text": "GridDraggableRows | undefined"
              },
              "description": "Whether you can drag rows in the grid. If you use the drag-handle column,\nthen this property is automatically set by the column to 'between'.",
              "attribute": "draggable-rows",
              "expandedType": {
                "text": "'between' | 'on-top' | 'between-or-on-top' | 'on-grid' | undefined"
              }
            },
            {
              "kind": "event",
              "name": "dropEvent",
              "type": {
                "text": "EventEmitter<SlDropEvent<T>>"
              },
              "description": "Emits when an item has been dropped."
            },
            {
              "kind": "field",
              "name": "dropFilter",
              "type": {
                "text": "GridDropFilter<T> | undefined"
              },
              "description": "Determines if or what kind of drop target the given item is:\n- boolean: the item is valid drop target based on the draggableRows value\n- 'between': the item is a valid drop target between\n- 'on-top': the item is a valid drop target to drop on top of"
            },
            {
              "kind": "field",
              "name": "itemParts",
              "type": {
                "text": "GridItemParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<tr>` so it can be styled externally."
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[] | undefined"
              },
              "description": "An array of items to be displayed in the grid.",
              "attribute": "items"
            },
            {
              "kind": "field",
              "name": "itemsGroupBy",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the attribute to group the items on.",
              "attribute": "items-group-by",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "model",
              "default": "new GridViewModel<T>(this)",
              "description": "The model used for rendering the grid."
            },
            {
              "kind": "field",
              "name": "noBorder",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hide the border around the grid when true.",
              "attribute": "no-border",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noRowBorder",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hides the border between rows when true.",
              "attribute": "no-row-border",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "recalculateColumnWidths",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Updates the `width` of all columns which have `autoWidth` set to `true`."
            },
            {
              "kind": "method",
              "name": "renderGroupRow",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "group",
                  "type": {
                    "text": "GridViewModelGroup"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderItem",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderItemRow",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "readonly": true,
              "default": "new SelectionController<T>(this)",
              "description": "Selection manager."
            },
            {
              "kind": "event",
              "name": "stateChangeEvent",
              "type": {
                "text": "EventEmitter<SlStateChangeEvent<T>>"
              },
              "description": "Emits when the state in the grid has changed."
            },
            {
              "kind": "field",
              "name": "striped",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Uses alternating background colors for the rows when set.",
              "attribute": "striped",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tbody",
              "type": {
                "text": "HTMLTableSectionElement"
              },
              "description": "The `<tbody>` element."
            },
            {
              "kind": "field",
              "name": "thead",
              "type": {
                "text": "HTMLTableSectionElement"
              },
              "description": "The `<thead>` element."
            }
          ],
          "events": [
            {
              "name": "activeItemChangeEvent",
              "type": {
                "text": "EventEmitter<SlActiveItemChangeEvent<T>>"
              },
              "description": "Emits when the active item changes",
              "fieldName": "activeItemChangeEvent"
            },
            {
              "name": "dragStartEvent",
              "type": {
                "text": "EventEmitter<SlDragStartEvent<T>>"
              },
              "description": "Emits when a drag operation is starting.",
              "fieldName": "dragStartEvent"
            },
            {
              "name": "dragEndEvent",
              "type": {
                "text": "EventEmitter<SlDragEndEvent<T>>"
              },
              "description": "Emits when a drag operation has finished.",
              "fieldName": "dragEndEvent"
            },
            {
              "name": "dropEvent",
              "type": {
                "text": "EventEmitter<SlDropEvent<T>>"
              },
              "description": "Emits when an item has been dropped.",
              "fieldName": "dropEvent"
            },
            {
              "name": "stateChangeEvent",
              "type": {
                "text": "EventEmitter<SlStateChangeEvent<T>>"
              },
              "description": "Emits when the state in the grid has changed.",
              "fieldName": "stateChangeEvent"
            }
          ],
          "attributes": [
            {
              "name": "draggable-rows",
              "type": {
                "text": "GridDraggableRows | undefined"
              },
              "description": "Whether you can drag rows in the grid. If you use the drag-handle column,\nthen this property is automatically set by the column to 'between'.",
              "fieldName": "draggableRows",
              "expandedType": {
                "text": "'between' | 'on-top' | 'between-or-on-top' | 'on-grid' | undefined"
              }
            },
            {
              "name": "items",
              "type": {
                "text": "T[] | undefined"
              },
              "description": "An array of items to be displayed in the grid.",
              "fieldName": "items"
            },
            {
              "name": "items-group-by",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the attribute to group the items on.",
              "fieldName": "itemsGroupBy"
            },
            {
              "name": "no-border",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hide the border around the grid when true.",
              "fieldName": "noBorder"
            },
            {
              "name": "no-row-border",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hides the border between rows when true.",
              "fieldName": "noRowBorder"
            },
            {
              "name": "striped",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Uses alternating background colors for the rows when set.",
              "fieldName": "striped"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-grid",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderItem",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderItemRow",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderGroupRow",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "group",
                  "type": {
                    "text": "GridViewModelGroup"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "recalculateColumnWidths",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Updates the `width` of all columns which have `autoWidth` set to `true`."
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "selection",
              "readonly": true,
              "default": "new SelectionController<T>(this)",
              "description": "Selection manager."
            },
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "T | undefined"
              },
              "description": "The active item in the grid."
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "DataSource<T> | undefined"
              },
              "description": "Provide your own implementation for getting the data."
            },
            {
              "kind": "field",
              "name": "dropFilter",
              "type": {
                "text": "GridDropFilter<T> | undefined"
              },
              "description": "Determines if or what kind of drop target the given item is:\n- boolean: the item is valid drop target based on the draggableRows value\n- 'between': the item is a valid drop target between\n- 'on-top': the item is a valid drop target to drop on top of"
            },
            {
              "kind": "field",
              "name": "itemParts",
              "type": {
                "text": "GridItemParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<tr>` so it can be styled externally."
            },
            {
              "kind": "field",
              "name": "model",
              "default": "new GridViewModel<T>(this)",
              "description": "The model used for rendering the grid."
            },
            {
              "kind": "field",
              "name": "tbody",
              "type": {
                "text": "HTMLTableSectionElement"
              },
              "description": "The `<tbody>` element."
            },
            {
              "kind": "field",
              "name": "thead",
              "type": {
                "text": "HTMLTableSectionElement"
              },
              "description": "The `<thead>` element."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Grid",
          "declaration": {
            "name": "Grid",
            "module": "../packages/components/grid/src/grid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/group-header.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/grid/src/group-header.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/group-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridGroupHeader",
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the group is expanded or collapsed.",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The group heading.",
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Wether you can select the entire group.",
              "attribute": "selectable"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "'all' | 'some' | 'none'"
              },
              "default": "'none'",
              "description": "Whether the group is selected.",
              "attribute": "selected"
            },
            {
              "kind": "event",
              "name": "sl-select",
              "type": {
                "text": "EventEmitter<SlSelectEvent<boolean>>"
              },
              "description": "Emits when the user changes the group selection."
            },
            {
              "kind": "event",
              "name": "sl-toggle",
              "type": {
                "text": "EventEmitter<SlToggleEvent<boolean>>"
              },
              "description": "Emits when the user collapses/expands the group."
            }
          ],
          "events": [
            {
              "name": "selectEvent",
              "type": {
                "text": "EventEmitter<SlSelectEvent<boolean>>"
              },
              "description": "Emits when the user changes the group selection.",
              "fieldName": "selectEvent"
            },
            {
              "name": "toggleEvent",
              "type": {
                "text": "EventEmitter<SlToggleEvent<boolean>>"
              },
              "description": "Emits when the user collapses/expands the group.",
              "fieldName": "toggleEvent"
            }
          ],
          "attributes": [
            {
              "name": "expanded",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the group is expanded or collapsed.",
              "fieldName": "expanded"
            },
            {
              "name": "heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The group heading.",
              "fieldName": "heading"
            },
            {
              "name": "selectable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Wether you can select the entire group.",
              "fieldName": "selectable"
            },
            {
              "name": "selected",
              "type": {
                "text": "'all' | 'some' | 'none'"
              },
              "default": "'none'",
              "description": "Whether the group is selected.",
              "fieldName": "selected"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridGroupHeader",
          "declaration": {
            "name": "GridGroupHeader",
            "module": "../packages/components/grid/src/group-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/select-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSelectColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Array<{ label: string; value: unknown }> | string[] | undefined"
              },
              "description": "The options for the select.",
              "attribute": "options"
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "options",
              "type": {
                "text": "Array<{ label: string; value: unknown }> | string[] | undefined"
              },
              "description": "The options for the select.",
              "fieldName": "options"
            },
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-select-column",
          "customElement": true,
          "events": [
            {
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdateEvent",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSelectColumn",
          "declaration": {
            "name": "GridSelectColumn",
            "module": "../packages/components/grid/src/select-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/selection-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSelectionColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoSelect",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, the active rows get selected automatically.",
              "attribute": "auto-select"
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedCount",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSelectionHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectAll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, all items are selected.",
              "attribute": "select-all"
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "auto-select",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, the active rows get selected automatically.",
              "fieldName": "autoSelect"
            },
            {
              "name": "select-all",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, all items are selected.",
              "fieldName": "selectAll"
            },
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-selection-column",
          "customElement": true,
          "events": [
            {
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdateEvent",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSelectionHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedCount",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSelectionColumn",
          "declaration": {
            "name": "GridSelectionColumn",
            "module": "../packages/components/grid/src/selection-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/sort-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSortColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction this columns should be sorted in.",
              "attribute": "direction",
              "expandedType": {
                "text": "'asc' | 'desc' | undefined"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSortFunction<T> | undefined"
              },
              "description": "If you want to provide a custom sort function, you can via this property."
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction this columns should be sorted in.",
              "fieldName": "direction",
              "expandedType": {
                "text": "'asc' | 'desc' | undefined"
              }
            },
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-sort-column",
          "customElement": true,
          "events": [
            {
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdateEvent",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSortFunction<T> | undefined"
              },
              "description": "If you want to provide a custom sort function, you can via this property."
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSortColumn",
          "declaration": {
            "name": "GridSortColumn",
            "module": "../packages/components/grid/src/sort-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/sorter.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/grid/src/sorter.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/sorter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSorter",
          "members": [
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn<T>"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction in which to sort the items.",
              "attribute": "direction",
              "reflects": true,
              "expandedType": {
                "text": "'asc' | 'desc' | undefined"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the field to sort on.",
              "attribute": "path"
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "event",
              "name": "sl-sort-direction-change",
              "type": {
                "text": "EventEmitter<SlSortDirectionChangeEvent<T>>"
              },
              "description": "Emits when the direction has changed."
            },
            {
              "kind": "event",
              "name": "sl-sorter-change",
              "type": {
                "text": "EventEmitter<SlSorterChangeEvent>"
              },
              "description": "Emits when the sorter has been added or removed."
            },
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSortFunction<T> | undefined"
              },
              "description": "An optional custom sort function."
            }
          ],
          "events": [
            {
              "name": "sorterChangeEvent",
              "type": {
                "text": "EventEmitter<SlSorterChangeEvent>"
              },
              "description": "Emits when the sorter has been added or removed.",
              "fieldName": "sorterChangeEvent"
            },
            {
              "name": "sortDirectionChangeEvent",
              "type": {
                "text": "EventEmitter<SlSortDirectionChangeEvent<T>>"
              },
              "description": "Emits when the direction has changed.",
              "fieldName": "sortDirectionChangeEvent"
            }
          ],
          "attributes": [
            {
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction in which to sort the items.",
              "fieldName": "direction",
              "expandedType": {
                "text": "'asc' | 'desc' | undefined"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the field to sort on.",
              "fieldName": "path"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn<T>"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSortFunction<T> | undefined"
              },
              "description": "An optional custom sort function."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSorter",
          "declaration": {
            "name": "GridSorter",
            "module": "../packages/components/grid/src/sorter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/text-field-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridTextFieldColumn",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "event",
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-text-field-column",
          "customElement": true,
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "GridColumnAlignment"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "expandedType": {
                "text": "'start' | 'center' | 'end'"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "events": [
            {
              "name": "columnUpdateEvent",
              "type": {
                "text": "EventEmitter<SlColumnUpdateEvent<T>>"
              },
              "description": "Emits when the column definition has changed.",
              "fieldName": "columnUpdateEvent",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the contents of the grid has changed.\nThis happens when the items property is directly set or when the data source has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "stateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is called when the state of the grid has changed.\nThis happens for examples when a filter or sorting changes.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "CSSResult | void"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "getParts",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridTextFieldColumn",
          "declaration": {
            "name": "GridTextFieldColumn",
            "module": "../packages/components/grid/src/text-field-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/view-model.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridViewModel",
          "members": [
            {
              "kind": "field",
              "name": "columnDefinitions",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "description": "Sets the available columns. Not all columns may be rendered, depending on the view state."
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "description": "Returns an array of visible columns.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "DataSource<T> | undefined"
              }
            },
            {
              "kind": "method",
              "name": "getGroupSelection",
              "return": {
                "type": {
                  "text": "'all' | 'some' | 'none'"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns the selected state of the group."
            },
            {
              "kind": "method",
              "name": "getGroupState",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns true if the group is expanded, false if collapsed."
            },
            {
              "kind": "method",
              "name": "getStickyColumnOffset",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Returns the left offset, taking any sticky columns into account."
            },
            {
              "kind": "field",
              "name": "groups",
              "type": {
                "text": "string[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "headerRows",
              "type": {
                "text": "Array<Array<GridColumn<T>>>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "T[]"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "toggleColumn",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "visible",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the visibility of the column."
            },
            {
              "kind": "method",
              "name": "toggleGroup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collapse",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the visibility of the group."
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "toggleColumn",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "visible",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the visibility of the column."
            },
            {
              "kind": "method",
              "name": "toggleGroup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collapse",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the visibility of the group."
            },
            {
              "kind": "method",
              "name": "getGroupSelection",
              "return": {
                "type": {
                  "text": "'all' | 'some' | 'none'"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns the selected state of the group."
            },
            {
              "kind": "method",
              "name": "getGroupState",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns true if the group is expanded, false if collapsed."
            },
            {
              "kind": "method",
              "name": "getStickyColumnOffset",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Returns the left offset, taking any sticky columns into account."
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "columnDefinitions",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "description": "Sets the available columns. Not all columns may be rendered, depending on the view state."
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "description": "Returns an array of visible columns.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "DataSource<T> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "groups",
              "type": {
                "text": "string[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "headerRows",
              "type": {
                "text": "Array<Array<GridColumn<T>>>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "T[]"
              },
              "readonly": true
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "GridViewModelGroup"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridViewModelGroup",
          "declaration": {
            "name": "GridViewModelGroup",
            "module": "../packages/components/grid/src/view-model.ts"
          }
        },
        {
          "kind": "js",
          "name": "GridViewModel",
          "declaration": {
            "name": "GridViewModel",
            "module": "../packages/components/grid/src/view-model.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/models.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-icon",
          "declaration": {
            "name": "Icon",
            "module": "/packages/components/icon/src/icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/src/icon.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/icon/src/icon.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/src/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An icon that uses either FontAwesome custom svg's straight from Figma.\n\n```html\n  <sl-icon name=\"unicorn\"></sl-icon>\n```",
          "name": "Icon",
          "cssProperties": [
            {
              "description": "The size of the icon container, defaults to md",
              "name": "--sl-icon-container-size"
            },
            {
              "description": "Accent color, only used for multicolor icons",
              "name": "--sl-icon-fill-accent"
            },
            {
              "description": "Default fill color",
              "name": "--sl-icon-fill-default"
            },
            {
              "description": "The size of the svg element, defaults to md",
              "name": "--sl-icon-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the icon; Describes the icon for assistive devices. If not present, the icon is considered\nto be purely presentational.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon; either the name from Font Awesome or the name of the custom icon in Figma.",
              "attribute": "name"
            },
            {
              "kind": "method",
              "name": "register",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "icons",
                  "type": {
                    "text": "IconDefinition | IconDefinition[]"
                  },
                  "description": "One or more IconDefinition that have been imported from FontAwesome"
                }
              ],
              "description": "Add icon(s) to the icon registry"
            },
            {
              "kind": "method",
              "name": "register",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "icons",
                  "type": {
                    "text": "IconLibrary"
                  },
                  "description": "The IconLibrary of the theme"
                }
              ],
              "description": "Store all icons from the IconLibrary of the theme (icons.json) in the icon registry for easy access.\nIs run in the setup method of each theme."
            },
            {
              "kind": "method",
              "name": "register",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "icon",
                  "type": {
                    "text": "IconDefinition | IconLibrary"
                  }
                },
                {
                  "name": "icons",
                  "type": {
                    "text": "IconDefinition[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl'"
              },
              "description": "The size of the icon.",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the icon; Describes the icon for assistive devices. If not present, the icon is considered\nto be purely presentational.",
              "fieldName": "label"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon; either the name from Font Awesome or the name of the custom icon in Figma.",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl'"
              },
              "description": "The size of the icon.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-icon",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "register",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "icons",
                  "type": {
                    "text": "IconDefinition | IconDefinition[]"
                  },
                  "description": "One or more IconDefinition that have been imported from FontAwesome"
                }
              ],
              "description": "Add icon(s) to the icon registry"
            },
            {
              "kind": "method",
              "name": "register",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "icons",
                  "type": {
                    "text": "IconLibrary"
                  },
                  "description": "The IconLibrary of the theme"
                }
              ],
              "description": "Store all icons from the IconLibrary of the theme (icons.json) in the icon registry for easy access.\nIs run in the setup method of each theme."
            },
            {
              "kind": "method",
              "name": "register",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "icon",
                  "type": {
                    "text": "IconDefinition | IconLibrary"
                  }
                },
                {
                  "name": "icons",
                  "type": {
                    "text": "IconDefinition[]"
                  }
                }
              ]
            }
          ],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "../packages/components/icon/src/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/src/models.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/inline-message/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/inline-message.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/inline-message/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-inline-message",
          "declaration": {
            "name": "InlineMessage",
            "module": "/packages/components/inline-message/src/inline-message.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/inline-message/src/inline-message.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/inline-message/src/inline-message.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/inline-message/src/inline-message.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An inline message component for displaying additional information/errors.",
          "name": "InlineMessage",
          "slots": [
            {
              "description": "slot for the main information of the inline-message",
              "name": "default"
            },
            {
              "description": "title content for the inline message",
              "name": "title"
            },
            {
              "description": "slot for more details of the inline-message like list of errors",
              "name": "details"
            },
            {
              "description": "icon shown on the left side of the component",
              "name": "icon"
            },
            {
              "description": "Closing button for the inline message",
              "name": "close-button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dismissible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Determines whether a (default) closing button should be shown in the top right corner.",
              "attribute": "dismissible",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noIcon",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Determines whether the icon should be shown on the left side of the component.",
              "attribute": "no-icon"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'info' | 'success' | 'warning' | 'danger'"
              },
              "default": "'info'",
              "description": "The variant of the inline message.",
              "attribute": "variant",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "dismissible",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Determines whether a (default) closing button should be shown in the top right corner.",
              "fieldName": "dismissible"
            },
            {
              "name": "no-icon",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Determines whether the icon should be shown on the left side of the component.",
              "fieldName": "noIcon"
            },
            {
              "name": "variant",
              "type": {
                "text": "'info' | 'success' | 'warning' | 'danger'"
              },
              "default": "'info'",
              "description": "The variant of the inline message.",
              "fieldName": "variant"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-inline-message",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InlineMessage",
          "declaration": {
            "name": "InlineMessage",
            "module": "../packages/components/inline-message/src/inline-message.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/menu.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/menu-button.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/menu-item.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/menu-item-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-menu",
          "declaration": {
            "name": "Menu",
            "module": "/packages/components/menu/src/menu.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-menu-button",
          "declaration": {
            "name": "MenuButton",
            "module": "/packages/components/menu/src/menu-button.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-menu-item",
          "declaration": {
            "name": "MenuItem",
            "module": "/packages/components/menu/src/menu-item.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-menu-item-group",
          "declaration": {
            "name": "MenuItemGroup",
            "module": "/packages/components/menu/src/menu-item-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/src/menu-button.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/menu/src/menu-button.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/src/menu-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Custom element that combines a button and a menu and automatically wires them up\ntogether.",
          "name": "MenuButton",
          "slots": [
            {
              "description": "The menu items should be slotted in the default slot.",
              "name": "default"
            },
            {
              "description": "Any content for the button should be slotted here.",
              "name": "button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "Button"
              },
              "description": "The button."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the button is disabled; when set no interaction is possible.",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "ButtonFill"
              },
              "default": "'outline'",
              "description": "The fill of the button.",
              "attribute": "fill",
              "expandedType": {
                "text": "'solid' | 'outline' | 'link' | 'ghost'"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "Menu"
              },
              "description": "The menu."
            },
            {
              "kind": "field",
              "name": "pluralize",
              "type": {
                "text": "(count: number) => string | undefined"
              },
              "description": "Returns the string to be used when there is more than 1 item selected."
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "PopoverPosition | undefined"
              },
              "description": "The position of the menu relative to the button.",
              "attribute": "position",
              "expandedType": {
                "text": "'top' | 'right' | 'bottom' | 'left' | AlignedPlacement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text representing the selected menuitem(s)."
            },
            {
              "kind": "field",
              "name": "selects",
              "type": {
                "text": "'single' | 'multiple' | undefined"
              },
              "description": "Determines whether if and how many menu items can be selected.",
              "attribute": "selects"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'md'",
              "description": "The size of the button.",
              "attribute": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'default'",
              "description": "The variant of the button.",
              "attribute": "variant",
              "expandedType": {
                "text": "'default' | 'primary' | 'success' | 'warning' | 'danger'"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the button is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "fill",
              "type": {
                "text": "ButtonFill"
              },
              "default": "'outline'",
              "description": "The fill of the button.",
              "fieldName": "fill",
              "expandedType": {
                "text": "'solid' | 'outline' | 'link' | 'ghost'"
              }
            },
            {
              "name": "position",
              "type": {
                "text": "PopoverPosition | undefined"
              },
              "description": "The position of the menu relative to the button.",
              "fieldName": "position",
              "expandedType": {
                "text": "'top' | 'right' | 'bottom' | 'left' | AlignedPlacement | undefined"
              }
            },
            {
              "name": "selects",
              "type": {
                "text": "'single' | 'multiple' | undefined"
              },
              "description": "Determines whether if and how many menu items can be selected.",
              "fieldName": "selects"
            },
            {
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'md'",
              "description": "The size of the button.",
              "fieldName": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'default'",
              "description": "The variant of the button.",
              "fieldName": "variant",
              "expandedType": {
                "text": "'default' | 'primary' | 'success' | 'warning' | 'danger'"
              }
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-menu-button",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "Button"
              },
              "description": "The button."
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "Menu"
              },
              "description": "The menu."
            },
            {
              "kind": "field",
              "name": "pluralize",
              "type": {
                "text": "(count: number) => string | undefined"
              },
              "description": "Returns the string to be used when there is more than 1 item selected."
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "string | undefined"
              },
              "description": "The text representing the selected menuitem(s)."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuButton",
          "declaration": {
            "name": "MenuButton",
            "module": "../packages/components/menu/src/menu-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/src/menu-item-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/menu/src/menu-item-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/src/menu-item-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A group of menu items, use this if you want to group menu items in a menu with\nother menu items.",
          "name": "MenuItemGroup",
          "slots": [
            {
              "description": "The menu items.",
              "name": "default"
            },
            {
              "description": "The header of the group.",
              "name": "header"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The optional heading for the group.",
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "selects",
              "type": {
                "text": "'single' | 'multiple' | undefined"
              },
              "description": "Determines whether if and how many menu items can be selected.",
              "attribute": "selects"
            }
          ],
          "attributes": [
            {
              "name": "heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The optional heading for the group.",
              "fieldName": "heading"
            },
            {
              "name": "selects",
              "type": {
                "text": "'single' | 'multiple' | undefined"
              },
              "description": "Determines whether if and how many menu items can be selected.",
              "fieldName": "selects"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-menu-item-group",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuItemGroup",
          "declaration": {
            "name": "MenuItemGroup",
            "module": "../packages/components/menu/src/menu-item-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/src/menu-item.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/menu/src/menu-item.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/src/menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Menu item component for use inside a menu.",
          "name": "MenuItem",
          "slots": [
            {
              "description": "Content to display inside the menu item.",
              "name": "default"
            },
            {
              "description": "The menu items that will be displayed when the menu item is shown.",
              "name": "submenu"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this menu item is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this menu item can be selected.",
              "attribute": "selectable"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this menu item has been selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shortcut",
              "type": {
                "text": "string | undefined"
              },
              "description": "Keyboard shortcut for activating this menu item.",
              "attribute": "shortcut"
            },
            {
              "kind": "event",
              "name": "sl-select",
              "type": {
                "text": "EventEmitter<SlSelectEvent>"
              },
              "description": "Emits when the user toggles the selected state."
            },
            {
              "kind": "field",
              "name": "submenu",
              "type": {
                "text": "Menu | undefined"
              },
              "description": "The sub menu, if present."
            },
            {
              "kind": "field",
              "name": "submenuOffset",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "0",
              "description": "The default offset of the submenu to the menu item."
            }
          ],
          "events": [
            {
              "name": "selectEvent",
              "type": {
                "text": "EventEmitter<SlSelectEvent>"
              },
              "description": "Emits when the user toggles the selected state.",
              "fieldName": "selectEvent"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this menu item is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this menu item has been selected.",
              "fieldName": "selected"
            },
            {
              "name": "selectable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this menu item can be selected.",
              "fieldName": "selectable"
            },
            {
              "name": "shortcut",
              "type": {
                "text": "string | undefined"
              },
              "description": "Keyboard shortcut for activating this menu item.",
              "fieldName": "shortcut"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-menu-item",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "submenuOffset",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "0",
              "description": "The default offset of the submenu to the menu item."
            },
            {
              "kind": "field",
              "name": "submenu",
              "type": {
                "text": "Menu | undefined"
              },
              "description": "The sub menu, if present."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuItem",
          "declaration": {
            "name": "MenuItem",
            "module": "../packages/components/menu/src/menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/src/menu.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/menu/src/menu.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/menu/src/menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Menu",
          "members": [
            {
              "kind": "method",
              "name": "focusLastItem",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "4",
              "description": "The default offset of the menu to its anchor.",
              "attribute": "offset"
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number | undefined"
              },
              "description": "The offset of the menu to its anchor. This is a property on this instance so\nthat it can be overridden by the menu item in case of a nested menu. You\nshould not need to set this property yourself."
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "PopoverPosition | undefined"
              },
              "default": "'right-start'",
              "description": "The position of the menu relative to its anchor.",
              "attribute": "position",
              "expandedType": {
                "text": "'top' | 'right' | 'bottom' | 'left' | AlignedPlacement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "selectableChildren",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this menu has any children that can be selected."
            },
            {
              "kind": "field",
              "name": "selects",
              "type": {
                "text": "'single' | 'multiple' | undefined"
              },
              "description": "Determines whether if and how many menu items can be selected.",
              "attribute": "selects"
            },
            {
              "kind": "event",
              "name": "sl-select",
              "type": {
                "text": "EventEmitter<SlSelectEvent<void>>"
              },
              "description": "Emits when the menu item selection changes."
            },
            {
              "kind": "field",
              "name": "viewportMargin",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "8",
              "description": "The default margin between the menu and the viewport."
            }
          ],
          "events": [
            {
              "name": "selectEvent",
              "type": {
                "text": "EventEmitter<SlSelectEvent<void>>"
              },
              "description": "Emits when the menu item selection changes.",
              "fieldName": "selectEvent"
            }
          ],
          "attributes": [
            {
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The default offset of the menu to its anchor.",
              "fieldName": "offset"
            },
            {
              "name": "position",
              "type": {
                "text": "PopoverPosition | undefined"
              },
              "default": "'right-start'",
              "description": "The position of the menu relative to its anchor.",
              "fieldName": "position",
              "expandedType": {
                "text": "'top' | 'right' | 'bottom' | 'left' | AlignedPlacement | undefined"
              }
            },
            {
              "name": "selects",
              "type": {
                "text": "'single' | 'multiple' | undefined"
              },
              "description": "Determines whether if and how many menu items can be selected.",
              "fieldName": "selects"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-menu",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "focusLastItem",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "viewportMargin",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "8",
              "description": "The default margin between the menu and the viewport."
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number | undefined"
              },
              "description": "The offset of the menu to its anchor. This is a property on this instance so\nthat it can be overridden by the menu item in case of a nested menu. You\nshould not need to set this property yourself."
            },
            {
              "kind": "field",
              "name": "selectableChildren",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this menu has any children that can be selected."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Menu",
          "declaration": {
            "name": "Menu",
            "module": "../packages/components/menu/src/menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/message-dialog/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/message-dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/message-dialog/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-message-dialog",
          "declaration": {
            "name": "MessageDialog",
            "module": "/packages/components/message-dialog/src/message-dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/message-dialog/src/message-dialog.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/message-dialog/src/message-dialog.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/message-dialog/src/message-dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A dialog for displaying messages to the user.",
          "name": "MessageDialog",
          "members": [
            {
              "kind": "method",
              "name": "alert",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "title",
                  "default": "msg('Alert')"
                }
              ]
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "config",
              "type": {
                "text": "MessageDialogConfig<T> | undefined"
              }
            },
            {
              "kind": "method",
              "name": "confirm",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<boolean | undefined>"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "title",
                  "default": "msg('Confirm')"
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<T | undefined>"
                }
              },
              "parameters": [
                {
                  "name": "config",
                  "type": {
                    "text": "MessageDialogConfig<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showModal",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-message-dialog",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "alert",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "title",
                  "default": "msg('Alert')"
                }
              ]
            },
            {
              "kind": "method",
              "name": "confirm",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<boolean | undefined>"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "title",
                  "default": "msg('Confirm')"
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<T | undefined>"
                }
              },
              "parameters": [
                {
                  "name": "config",
                  "type": {
                    "text": "MessageDialogConfig<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showModal",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "config",
              "type": {
                "text": "MessageDialogConfig<T> | undefined"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MessageDialog",
          "declaration": {
            "name": "MessageDialog",
            "module": "../packages/components/message-dialog/src/message-dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/popover.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-popover",
          "declaration": {
            "name": "Popover",
            "module": "/packages/components/popover/src/popover.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/popover.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/popover/src/popover.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/popover.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A floating overlay that appears on top of other elements.",
          "name": "Popover",
          "cssParts": [
            {
              "description": "The container for the popover",
              "name": "container"
            }
          ],
          "slots": [
            {
              "description": "Body content for the popover",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "16",
              "description": "The default padding of the arrow."
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "12",
              "description": "The default offset of the popover to its anchor."
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left' | 'top-start' | 'top-end' | 'right-start' | 'right-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end'"
              },
              "default": "'bottom'",
              "description": "The position of popover relative to its anchor.",
              "attribute": "position"
            },
            {
              "kind": "field",
              "name": "viewportMargin",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "8",
              "description": "The default margin between the tooltip and the viewport."
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left' | 'top-start' | 'top-end' | 'right-start' | 'right-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end'"
              },
              "default": "'bottom'",
              "description": "The position of popover relative to its anchor.",
              "fieldName": "position"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-popover",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "16",
              "description": "The default padding of the arrow."
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "12",
              "description": "The default offset of the popover to its anchor."
            },
            {
              "kind": "field",
              "name": "viewportMargin",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "8",
              "description": "The default margin between the tooltip and the viewport."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Popover",
          "declaration": {
            "name": "Popover",
            "module": "../packages/components/popover/src/popover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/radio.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-radio",
          "declaration": {
            "name": "Radio",
            "module": "/packages/components/radio-group/src/radio.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-radio-group",
          "declaration": {
            "name": "RadioGroup",
            "module": "/packages/components/radio-group/src/radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/src/radio-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/radio-group/src/radio-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/src/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A group of radio buttons.\n\n```html\n  <sl-radio-group>\n    <sl-radio value=\"1\">Option 1</sl-radio>\n    <sl-radio value=\"2\">Option 2</sl-radio>\n    <sl-radio value=\"3\">Option 3</sl-radio>\n  </sl-radio-group>\n```",
          "name": "RadioGroup",
          "slots": [
            {
              "description": "A list of `sl-radio` elements.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the group is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "The orientation of the radio options; when true, the radio buttons are displayed next to each other instead of below each other.",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the user is required to select an option in the group.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "attribute": "show-valid",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "RadioButtonSize | undefined"
              },
              "description": "The size of the radio buttons in the group.",
              "attribute": "size",
              "expandedType": {
                "text": "'md' | 'lg' | undefined"
              }
            },
            {
              "kind": "event",
              "name": "sl-blur",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the component loses focus."
            },
            {
              "kind": "event",
              "name": "sl-change",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T | undefined>>"
              },
              "description": "Emits when the value changes."
            },
            {
              "kind": "event",
              "name": "sl-focus",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component receives focus."
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value for the radio group, to be used in forms.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "events": [
            {
              "name": "blurEvent",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the component loses focus.",
              "fieldName": "blurEvent"
            },
            {
              "name": "changeEvent",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T | undefined>>"
              },
              "description": "Emits when the value changes.",
              "fieldName": "changeEvent"
            },
            {
              "name": "focusEvent",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component receives focus.",
              "fieldName": "focusEvent"
            },
            {
              "type": {
                "text": "ValidateEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the group is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "The orientation of the radio options; when true, the radio buttons are displayed next to each other instead of below each other.",
              "fieldName": "horizontal"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the user is required to select an option in the group.",
              "fieldName": "required"
            },
            {
              "name": "show-valid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "fieldName": "showValid"
            },
            {
              "name": "size",
              "type": {
                "text": "RadioButtonSize | undefined"
              },
              "description": "The size of the radio buttons in the group.",
              "fieldName": "size",
              "expandedType": {
                "text": "'md' | 'lg' | undefined"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The value for the radio group, to be used in forms.",
              "fieldName": "value"
            },
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/form"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-radio-group",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RadioGroup",
          "declaration": {
            "name": "RadioGroup",
            "module": "../packages/components/radio-group/src/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/src/radio.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/radio-group/src/radio.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/src/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Radio",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the radio button is checked.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this radio button is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "FormControlShowValidity"
              },
              "description": "Indicates if the radio button shows it is (in)valid.",
              "attribute": "show-validity",
              "reflects": true,
              "expandedType": {
                "text": "'valid' | 'invalid' | "
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "RadioButtonSize"
              },
              "default": "'md'",
              "description": "The size of the radio button.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'md' | 'lg'"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The value for this radio button.",
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the radio button is checked.",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this radio button is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "show-validity",
              "type": {
                "text": "FormControlShowValidity"
              },
              "description": "Indicates if the radio button shows it is (in)valid.",
              "fieldName": "showValidity",
              "expandedType": {
                "text": "'valid' | 'invalid' | "
              }
            },
            {
              "name": "size",
              "type": {
                "text": "RadioButtonSize"
              },
              "default": "'md'",
              "description": "The size of the radio button.",
              "fieldName": "size",
              "expandedType": {
                "text": "'md' | 'lg'"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The value for this radio button.",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-radio",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "../packages/components/radio-group/src/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-option.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-option-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-select",
          "declaration": {
            "name": "Select",
            "module": "/packages/components/select/src/select.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select-option",
          "declaration": {
            "name": "SelectOption",
            "module": "/packages/components/select/src/select-option.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select-option-group",
          "declaration": {
            "name": "SelectOptionGroup",
            "module": "/packages/components/select/src/select-option-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-button.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/select/src/select-button.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectButton",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the button is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "The placeholder for when there is no selected option.s",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "SelectOption | null | undefined"
              },
              "description": "The selected option."
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicates whether the control should indicate it is valid.",
              "attribute": "show-valid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "FormControlShowValidity"
              },
              "description": "Mirrors the same property on the sl-select parent.",
              "attribute": "show-validity",
              "reflects": true,
              "expandedType": {
                "text": "'valid' | 'invalid' | "
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SelectSize | undefined"
              },
              "default": "'md'",
              "description": "The size of the parent select.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'md' | 'lg' | undefined"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the button is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "The placeholder for when there is no selected option.s",
              "fieldName": "placeholder"
            },
            {
              "name": "size",
              "type": {
                "text": "SelectSize | undefined"
              },
              "default": "'md'",
              "description": "The size of the parent select.",
              "fieldName": "size",
              "expandedType": {
                "text": "'md' | 'lg' | undefined"
              }
            },
            {
              "name": "show-valid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Indicates whether the control should indicate it is valid.",
              "fieldName": "showValid"
            },
            {
              "name": "show-validity",
              "type": {
                "text": "FormControlShowValidity"
              },
              "description": "Mirrors the same property on the sl-select parent.",
              "fieldName": "showValidity",
              "expandedType": {
                "text": "'valid' | 'invalid' | "
              }
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "SelectOption | null | undefined"
              },
              "description": "The selected option."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectButton",
          "declaration": {
            "name": "SelectButton",
            "module": "../packages/components/select/src/select-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-option-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/select/src/select-option-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-option-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A way to group options together, with or without a heading.\n\n```html\n <sl-select>\n   <sl-select-option-group heading=\"Europe\">\n     <sl-select-option>Netherlands</sl-select-option>\n     <sl-select-option>Spain</sl-select-option>\n     <sl-select-option>Poland</sl-select-option>\n   </sl-select-option-group>\n   ...\n </sl-select>\n```",
          "name": "SelectOptionGroup",
          "slots": [
            {
              "description": "List of `sl-select-option` elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The heading for the group.",
              "attribute": "heading"
            }
          ],
          "attributes": [
            {
              "name": "heading",
              "type": {
                "text": "string | undefined"
              },
              "description": "The heading for the group.",
              "fieldName": "heading"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select-option-group",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOptionGroup",
          "declaration": {
            "name": "SelectOptionGroup",
            "module": "../packages/components/select/src/select-option-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-option.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/select/src/select-option.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectOption",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the option item is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the option item is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The value for the option item, to be used in forms.",
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the option item is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the option item is selected.",
              "fieldName": "selected"
            },
            {
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The value for the option item, to be used in forms.",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select-option",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOption",
          "declaration": {
            "name": "SelectOption",
            "module": "../packages/components/select/src/select-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/select/src/select.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A form control that allows users to select one option from a list of options.",
          "name": "Select",
          "slots": [
            {
              "description": "Place for `sl-select-option` elements",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "SelectButton"
              },
              "description": "The button in the light DOM."
            },
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the select is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The listbox element."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "6",
              "description": "The default offset of the listbox to the button."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "The placeholder text to show when no option is chosen.",
              "attribute": "placeholder"
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the select is a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "attribute": "show-valid",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SelectSize"
              },
              "default": "'md'",
              "description": "The size of the select.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'md' | 'lg'"
              }
            },
            {
              "kind": "event",
              "name": "sl-blur",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the focus leaves the component."
            },
            {
              "kind": "event",
              "name": "sl-change",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T | undefined>>"
              },
              "description": "Emits when the value changes."
            },
            {
              "kind": "event",
              "name": "sl-focus",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component gains focus."
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value for the select, to be used in forms.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "viewportMargin",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "8",
              "description": "The default margin between the tooltip and the viewport."
            }
          ],
          "events": [
            {
              "name": "blurEvent",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the focus leaves the component.",
              "fieldName": "blurEvent"
            },
            {
              "name": "changeEvent",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T | undefined>>"
              },
              "description": "Emits when the value changes.",
              "fieldName": "changeEvent"
            },
            {
              "name": "focusEvent",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component gains focus.",
              "fieldName": "focusEvent"
            },
            {
              "type": {
                "text": "ValidateEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the select is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "The placeholder text to show when no option is chosen.",
              "fieldName": "placeholder"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the select is a required field.",
              "fieldName": "required"
            },
            {
              "name": "show-valid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "fieldName": "showValid"
            },
            {
              "name": "size",
              "type": {
                "text": "SelectSize"
              },
              "default": "'md'",
              "description": "The size of the select.",
              "fieldName": "size",
              "expandedType": {
                "text": "'md' | 'lg'"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The value for the select, to be used in forms.",
              "fieldName": "value"
            },
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/form"
            },
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "6",
              "description": "The default offset of the listbox to the button."
            },
            {
              "kind": "field",
              "name": "viewportMargin",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "8",
              "description": "The default margin between the tooltip and the viewport."
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "SelectButton"
              },
              "description": "The button in the light DOM."
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The listbox element."
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "../packages/components/select/src/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/browser.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/config.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/controllers/anchor.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/controllers/events.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/controllers/focus-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/controllers/roving-tabindex.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/controllers/selection.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/controllers/shortcut.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/css.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/data-source/array-data-source.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/data-source/data-source.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/decorators/base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/decorators/event.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/decorators/observe.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/directives/anchor.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/events.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/path.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/popover.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/string.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/breakpoints.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/shared/src/breakpoints.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/browser.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "isSafari"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isSafari",
          "declaration": {
            "name": "isSafari",
            "module": "../packages/components/shared/src/browser.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/config.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Config",
          "members": [
            {
              "kind": "method",
              "name": "getConfigSetting",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<T>"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "keyof ConfigSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setConfig",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "settings",
                  "type": {
                    "text": "ConfigSettings"
                  }
                }
              ]
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "setConfig",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "settings",
                  "type": {
                    "text": "ConfigSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getConfigSetting",
              "static": true,
              "return": {
                "type": {
                  "text": "Promise<T>"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "keyof ConfigSettings"
                  }
                }
              ]
            }
          ],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Config",
          "declaration": {
            "name": "Config",
            "module": "../packages/components/shared/src/config.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/anchor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnchorController",
          "members": [
            {
              "kind": "field",
              "name": "arrowElement",
              "type": {
                "text": "string | HTMLElement | undefined"
              },
              "description": "The arrow pointing from the popover to the anchor element."
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number | undefined"
              },
              "description": "The padding of the arrow."
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "maxWidth",
              "type": {
                "text": "number | undefined"
              },
              "description": "The max width of the popover."
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number | undefined"
              },
              "description": "The offset of the popover to its anchor."
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "PopoverPosition | undefined"
              },
              "description": "The main position of the popover relative to the anchor.",
              "expandedType": {
                "text": "'top' | 'right' | 'bottom' | 'left' | AlignedPlacement | undefined"
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "arrowElement",
              "type": {
                "text": "string | HTMLElement | undefined"
              },
              "description": "The arrow pointing from the popover to the anchor element."
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number | undefined"
              },
              "description": "The padding of the arrow."
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number | undefined"
              },
              "description": "The offset of the popover to its anchor."
            },
            {
              "kind": "field",
              "name": "maxWidth",
              "type": {
                "text": "number | undefined"
              },
              "description": "The max width of the popover."
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "PopoverPosition | undefined"
              },
              "description": "The main position of the popover relative to the anchor.",
              "expandedType": {
                "text": "'top' | 'right' | 'bottom' | 'left' | AlignedPlacement | undefined"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnchorController",
          "declaration": {
            "name": "AnchorController",
            "module": "../packages/components/shared/src/controllers/anchor.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/events.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventsController",
          "members": [
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "window",
                  "type": {
                    "text": "Window"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: Window, ev: WindowEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "Document"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: Document, ev: DocumentEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: HTMLElementEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "ShadowRoot"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: ShadowRoot, ev: ShadowRootEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "MediaQueryList"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: ShadowRoot, ev: MediaQueryListEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: Element, ev: GlobalEventHandlersEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Window | Document | Element | HTMLElement | ShadowRoot | MediaQueryList"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "window",
                  "type": {
                    "text": "Window"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: Window, ev: WindowEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "Document"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: Document, ev: DocumentEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: HTMLElementEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "ShadowRoot"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: ShadowRoot, ev: ShadowRootEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "MediaQueryList"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: ShadowRoot, ev: MediaQueryListEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: Element, ev: GlobalEventHandlersEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Window | Document | Element | HTMLElement | ShadowRoot | MediaQueryList"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            }
          ],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventsController",
          "declaration": {
            "name": "EventsController",
            "module": "../packages/components/shared/src/controllers/events.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/focus-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FocusGroupController",
          "members": [
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical' | 'both' | 'grid'"
              }
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              },
              "default": "5"
            },
            {
              "kind": "field",
              "name": "elementEnterAction"
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focusToElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elementIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "handleFocusin"
            },
            {
              "kind": "field",
              "name": "handleFocusout"
            },
            {
              "kind": "field",
              "name": "handleKeydown"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "default": "host"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "isFocusableElement"
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusToElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elementIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical' | 'both' | 'grid'"
              }
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "elementEnterAction"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              },
              "default": "5"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "default": "host"
            },
            {
              "kind": "field",
              "name": "isFocusableElement"
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "handleFocusin"
            },
            {
              "kind": "field",
              "name": "handleFocusout"
            },
            {
              "kind": "field",
              "name": "handleKeydown"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusGroupController",
          "declaration": {
            "name": "FocusGroupController",
            "module": "../packages/components/shared/src/controllers/focus-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/roving-tabindex.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RovingTabindexController",
          "members": [
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "default": "0"
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical' | 'both' | 'grid'"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              },
              "default": "5",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementEnterAction",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusToElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elementIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusin",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusout",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleKeydown",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "default": "host",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "manageTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "getTabIndex",
                  "type": {
                    "text": "(el: HTMLElement) => UpdateTabIndexes"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "FocusGroupController",
            "module": "/packages/components/shared/src/controllers/focus-group.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "default": "0"
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "manageTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "getTabIndex",
                  "type": {
                    "text": "(el: HTMLElement) => UpdateTabIndexes"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusToElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elementIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical' | 'both' | 'grid'"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementEnterAction",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              },
              "default": "5",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "default": "host",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusin",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusout",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleKeydown",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RovingTabindexController",
          "declaration": {
            "name": "RovingTabindexController",
            "module": "../packages/components/shared/src/controllers/roving-tabindex.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/selection.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectionController",
          "members": [
            {
              "kind": "method",
              "name": "areAllSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "areSomeSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "deselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSelectAllToggled",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "!!options?.multiple",
              "description": "Whether more than 1 item can be selected at a time."
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "Set<T>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The total number of items in the selection."
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "deselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "areAllSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "areSomeSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isSelectAllToggled",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The total number of items in the selection."
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "!!options?.multiple",
              "description": "Whether more than 1 item can be selected at a time."
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "Set<T>"
              },
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectionController",
          "declaration": {
            "name": "SelectionController",
            "module": "../packages/components/shared/src/controllers/selection.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/shortcut.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ShortcutController",
          "members": [
            {
              "kind": "method",
              "name": "bind",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "shortcuts",
                  "type": {
                    "text": "KeyBindingMap"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "unbind",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "unbind",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "bind",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "shortcuts",
                  "type": {
                    "text": "KeyBindingMap"
                  }
                }
              ]
            }
          ],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ShortcutController",
          "declaration": {
            "name": "ShortcutController",
            "module": "../packages/components/shared/src/controllers/shortcut.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/css.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "firstFocusableSelector",
          "type": {
            "text": "string"
          },
          "default": "'button:not([tabindex=\"-1\"]), [href]:not([tabindex=\"-1\"]), input:not([tabindex=\"-1\"]), select:not([tabindex=\"-1\"]), textarea:not([tabindex=\"-1\"]), [tabindex]:not([tabindex=\"-1\"]), [focusable]:not([tabindex=\"-1\"])'"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "breakpoints",
          "declaration": {
            "name": "breakpoints",
            "module": "../packages/components/shared/src/css.ts"
          }
        },
        {
          "kind": "js",
          "name": "firstFocusableSelector",
          "declaration": {
            "name": "firstFocusableSelector",
            "module": "../packages/components/shared/src/css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/data-source/array-data-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ArrayDataSource",
          "members": [
            {
              "kind": "method",
              "name": "addFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrFilter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The filtered & sorted array of items.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "Map<string, DataSourceFilter<T>>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "groupBy",
              "type": {
                "text": "DataSourceGroupBy<T> | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of all items.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeGroupBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Remove the groupBy attribute. This will cause the data to be sorted as if it was not grouped.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "setGroupBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  },
                  "description": "Path to group by attribute."
                },
                {
                  "name": "sorter",
                  "optional": true,
                  "type": {
                    "text": "DataSourceSortFunction<T>"
                  },
                  "description": "Optional sorter function."
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "DataSourceSortDirection"
                  },
                  "description": "Optional sort direction."
                }
              ],
              "description": "Group the items by the given path. Optionally, you can provide a sorter and direction.\n\nThis is part of the DataSource interface, because it changes how the data is sorted. You\nmay want to pass the groupBy attribute to the server, so it can sort the data for you.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrSorter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "DataSourceSortDirection"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Total number of items in this data source.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "sort",
              "type": {
                "text": "DataSourceSort<T> | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            }
          ],
          "events": [
            {
              "name": "sl-update",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "DataSource",
            "module": "/packages/components/shared/src/data-source/data-source.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "addFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrFilter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "setGroupBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  },
                  "description": "Path to group by attribute."
                },
                {
                  "name": "sorter",
                  "optional": true,
                  "type": {
                    "text": "DataSourceSortFunction<T>"
                  },
                  "description": "Optional sorter function."
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "DataSourceSortDirection"
                  },
                  "description": "Optional sort direction."
                }
              ],
              "description": "Group the items by the given path. Optionally, you can provide a sorter and direction.\n\nThis is part of the DataSource interface, because it changes how the data is sorted. You\nmay want to pass the groupBy attribute to the server, so it can sort the data for you.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeGroupBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Remove the groupBy attribute. This will cause the data to be sorted as if it was not grouped.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrSorter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "DataSourceSortDirection"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The filtered & sorted array of items.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of all items.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Total number of items in this data source.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "Map<string, DataSourceFilter<T>>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "groupBy",
              "type": {
                "text": "DataSourceGroupBy<T> | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "sort",
              "type": {
                "text": "DataSourceSort<T> | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArrayDataSource",
          "declaration": {
            "name": "ArrayDataSource",
            "module": "../packages/components/shared/src/data-source/array-data-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/data-source/data-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DataSource",
          "members": [
            {
              "kind": "method",
              "name": "addFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrFilter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The filtered & sorted array of items."
            },
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "Map<string, DataSourceFilter<T>>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "groupBy",
              "type": {
                "text": "DataSourceGroupBy<T> | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of all items."
            },
            {
              "kind": "method",
              "name": "removeFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeGroupBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Remove the groupBy attribute. This will cause the data to be sorted as if it was not grouped."
            },
            {
              "kind": "method",
              "name": "removeSort",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setGroupBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  },
                  "description": "Path to group by attribute."
                },
                {
                  "name": "sorter",
                  "optional": true,
                  "type": {
                    "text": "DataSourceSortFunction<T>"
                  },
                  "description": "Optional sorter function."
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "DataSourceSortDirection"
                  },
                  "description": "Optional sort direction."
                }
              ],
              "description": "Group the items by the given path. Optionally, you can provide a sorter and direction.\n\nThis is part of the DataSource interface, because it changes how the data is sorted. You\nmay want to pass the groupBy attribute to the server, so it can sort the data for you."
            },
            {
              "kind": "method",
              "name": "setSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrSorter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "DataSourceSortDirection"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Total number of items in this data source."
            },
            {
              "kind": "field",
              "name": "sort",
              "type": {
                "text": "DataSourceSort<T> | undefined"
              },
              "readonly": true
            }
          ],
          "superclass": {
            "name": "EventTarget",
            "module": "../packages/components/shared/src/data-source/data-source.ts"
          },
          "methods": [
            {
              "kind": "method",
              "name": "addFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrFilter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setGroupBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  },
                  "description": "Path to group by attribute."
                },
                {
                  "name": "sorter",
                  "optional": true,
                  "type": {
                    "text": "DataSourceSortFunction<T>"
                  },
                  "description": "Optional sorter function."
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "DataSourceSortDirection"
                  },
                  "description": "Optional sort direction."
                }
              ],
              "description": "Group the items by the given path. Optionally, you can provide a sorter and direction.\n\nThis is part of the DataSource interface, because it changes how the data is sorted. You\nmay want to pass the groupBy attribute to the server, so it can sort the data for you."
            },
            {
              "kind": "method",
              "name": "removeGroupBy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Remove the groupBy attribute. This will cause the data to be sorted as if it was not grouped."
            },
            {
              "kind": "method",
              "name": "setSort",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pathOrSorter",
                  "type": {
                    "text": "U"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "DataSourceSortDirection"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeSort",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "filters",
              "type": {
                "text": "Map<string, DataSourceFilter<T>>"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "groupBy",
              "type": {
                "text": "DataSourceGroupBy<T> | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "sort",
              "type": {
                "text": "DataSourceSort<T> | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The filtered & sorted array of items."
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of all items."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Total number of items in this data source."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DataSource",
          "declaration": {
            "name": "DataSource",
            "module": "../packages/components/shared/src/data-source/data-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/decorators/base.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "decorateProperty",
          "parameters": [
            {
              "name": "{\n    finisher,\n    descriptor\n  }",
              "type": {
                "text": "{\n    finisher?: ((ctor: typeof ReactiveElement, property: PropertyKey) => void) | null;\n    descriptor?(property: PropertyKey): PropertyDescriptor;\n  }"
              }
            },
            {
              "description": "Optional finisher method; receives the element\nconstructor and property key as arguments and has no return value.",
              "name": "finisher",
              "type": {
                "text": "function"
              }
            },
            {
              "description": "Optional descriptor method; receives the\nproperty key as an argument and returns a property descriptor to define for\nthe given property.",
              "name": "descriptor",
              "type": {
                "text": "function"
              }
            }
          ],
          "description": "Helper for decorating a property that is compatible with both TypeScript\nand Babel decorators. The optional `finisher` can be used to perform work on\nthe class. The optional `descriptor` should return a PropertyDescriptor\nto install for the given property.",
          "return": {
            "type": {
              "text": "ClassElement|void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "decorateProperty",
            "module": "../packages/components/shared/src/decorators/base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/decorators/event.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventEmitter",
          "members": [
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T | T['detail']"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "EventOptions"
                  }
                }
              ]
            }
          ],
          "methods": [
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T | T['detail']"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "EventOptions"
                  }
                }
              ]
            }
          ],
          "fields": []
        },
        {
          "kind": "variable",
          "name": "event",
          "type": {
            "text": "Event"
          }
        },
        {
          "kind": "function",
          "name": "event",
          "return": {
            "type": {
              "text": "any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "EventOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventEmitter",
          "declaration": {
            "name": "EventEmitter",
            "module": "../packages/components/shared/src/decorators/event.ts"
          }
        },
        {
          "kind": "js",
          "name": "event",
          "declaration": {
            "name": "event",
            "module": "../packages/components/shared/src/decorators/event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/decorators/observe.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "observe",
          "parameters": [
            {
              "name": "propertyName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lifecycle",
              "default": "'update'",
              "type": {
                "text": "ObserveLifecycle"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observe",
          "declaration": {
            "name": "observe",
            "module": "../packages/components/shared/src/decorators/observe.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/directives/anchor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnchorDirective",
          "members": [],
          "superclass": {
            "name": "Directive",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "anchor"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnchorDirective",
          "declaration": {
            "name": "AnchorDirective",
            "module": "../packages/components/shared/src/directives/anchor.ts"
          }
        },
        {
          "kind": "js",
          "name": "anchor",
          "declaration": {
            "name": "anchor",
            "module": "../packages/components/shared/src/directives/anchor.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/events.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "SlBlurEvent",
          "declaration": {
            "name": "SlBlurEvent",
            "module": "./events/blur.js"
          }
        },
        {
          "kind": "js",
          "name": "SlChangeEvent",
          "declaration": {
            "name": "SlChangeEvent",
            "module": "./events/change.js"
          }
        },
        {
          "kind": "js",
          "name": "SlFocusEvent",
          "declaration": {
            "name": "SlFocusEvent",
            "module": "./events/focus.js"
          }
        },
        {
          "kind": "js",
          "name": "SlSelectEvent",
          "declaration": {
            "name": "SlSelectEvent",
            "module": "./events/select.js"
          }
        },
        {
          "kind": "js",
          "name": "SlToggleEvent",
          "declaration": {
            "name": "SlToggleEvent",
            "module": "./events/toggle.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/events/blur.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/events/change.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/events/focus.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/events/select.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/events/toggle.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/path.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getNameByPath",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "path",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getStringByPath",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "object",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "path",
              "default": "''"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getValueByPath",
          "return": {
            "type": {
              "text": "unknown"
            }
          },
          "parameters": [
            {
              "name": "object",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "path",
              "default": "''"
            }
          ]
        },
        {
          "kind": "function",
          "name": "setValueByPath",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "object",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "path",
              "default": "''"
            },
            {
              "name": "value",
              "type": {
                "text": "unknown"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getNameByPath",
          "declaration": {
            "name": "getNameByPath",
            "module": "../packages/components/shared/src/path.ts"
          }
        },
        {
          "kind": "js",
          "name": "getStringByPath",
          "declaration": {
            "name": "getStringByPath",
            "module": "../packages/components/shared/src/path.ts"
          }
        },
        {
          "kind": "js",
          "name": "getValueByPath",
          "declaration": {
            "name": "getValueByPath",
            "module": "../packages/components/shared/src/path.ts"
          }
        },
        {
          "kind": "js",
          "name": "setValueByPath",
          "declaration": {
            "name": "setValueByPath",
            "module": "../packages/components/shared/src/path.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/popover.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isPopoverOpen",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "element",
              "optional": true,
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "positionPopover",
          "return": {
            "type": {
              "text": "(() => void)"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "anchor",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "PositionPopoverOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isPopoverOpen",
          "declaration": {
            "name": "isPopoverOpen",
            "module": "../packages/components/shared/src/popover.ts"
          }
        },
        {
          "kind": "js",
          "name": "positionPopover",
          "declaration": {
            "name": "positionPopover",
            "module": "../packages/components/shared/src/popover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/string.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "camelize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to camelize."
            }
          ],
          "description": "Returns the lowerCamelCase form of a string.\n\n```javascript\ncamelize('innerHTML')          // 'innerHTML'\ncamelize('action_name')        // 'actionName'\ncamelize('css-class-name')     // 'cssClassName'\ncamelize('object.path.name')   // 'objectPathName'\ncamelize('my favorite items')  // 'myFavoriteItems'\ncamelize('My Favorite Items')  // 'myFavoriteItems'\n```"
        },
        {
          "kind": "function",
          "name": "capitalize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to capitalize."
            }
          ],
          "description": "Returns the Capitalized form of a string\n\n```javascript\ncapitalize('innerHTML')         // 'InnerHTML'\ncapitalize('action_name')       // 'Action_name'\ncapitalize('css-class-name')    // 'Css-class-name'\ncapitalize('my favorite items') // 'My favorite items'\n```"
        },
        {
          "kind": "function",
          "name": "classify",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "the string to classify"
            }
          ],
          "description": "Returns the UpperCamelCase form of a string.\n\n```javascript\nclassify('innerHTML')          // 'InnerHTML'\nclassify('action_name')        // 'ActionName'\nclassify('css-class-name')     // 'CssClassName'\nclassify('my favorite items')  // 'MyFavoriteItems'\n```"
        },
        {
          "kind": "function",
          "name": "dasherize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to dasherize."
            }
          ],
          "description": "Replaces underscores, spaces, or camelCase with dashes.\n\n```javascript\ndasherize('innerHTML')         // 'inner-html'\ndasherize('action_name')       // 'action-name'\ndasherize('css-class-name')    // 'css-class-name'\ndasherize('my favorite items') // 'my-favorite-items'\n```"
        },
        {
          "kind": "function",
          "name": "decamelize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to decamelize."
            }
          ],
          "description": "Converts a camelized string into all lower case separated by underscores.\n\n```javascript\ndecamelize('innerHTML')         // 'inner_html'\ndecamelize('action_name')       // 'action_name'\ndecamelize('css-class-name')    // 'css-class-name'\ndecamelize('my favorite items') // 'my favorite items'\n```"
        },
        {
          "kind": "function",
          "name": "humanize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to humanize."
            }
          ],
          "description": "Returns the Humanized form of a string\n\n```javascript\nhumanize('innerHTML')         // 'Inner html'\nhumanize('action_name')       // 'Action name'\nhumanize('css-class-name')    // 'Css class name'\nhumanize('my favorite items') // 'My favorite items'\n```"
        },
        {
          "kind": "function",
          "name": "underscore",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to underscore."
            }
          ],
          "description": "More general than decamelize. Returns the lower\\_case\\_and\\_underscored\nform of a string.\n\n```javascript\nunderscore('innerHTML')          // 'inner_html'\nunderscore('action_name')        // 'action_name'\nunderscore('css-class-name')     // 'css_class_name'\nunderscore('my favorite items')  // 'my_favorite_items'\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "camelize",
          "declaration": {
            "name": "camelize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "capitalize",
          "declaration": {
            "name": "capitalize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "classify",
          "declaration": {
            "name": "classify",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "dasherize",
          "declaration": {
            "name": "dasherize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "decamelize",
          "declaration": {
            "name": "decamelize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "humanize",
          "declaration": {
            "name": "humanize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "underscore",
          "declaration": {
            "name": "underscore",
            "module": "../packages/components/shared/src/string.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/vendor/tinykeys.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createKeybindingsHandler",
          "return": {
            "type": {
              "text": "EventListener"
            }
          },
          "parameters": [
            {
              "name": "keyBindingMap",
              "type": {
                "text": "KeyBindingMap"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "KeyBindingHandlerOptions"
              }
            }
          ],
          "description": "Creates an event listener for handling keybindings."
        },
        {
          "kind": "function",
          "name": "parseKeybinding",
          "return": {
            "type": {
              "text": "KeyBindingPress[]"
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Parses a \"Key Binding String\" into its parts\n\ngrammar    = `<sequence>`\n<sequence> = `<press> <press> <press> ...`\n<press>    = `<key>` or `<mods>+<key>`\n<mods>     = `<mod>+<mod>+...`"
        },
        {
          "kind": "function",
          "name": "tinykeys",
          "return": {
            "type": {
              "text": "() => void"
            }
          },
          "parameters": [
            {
              "name": "target",
              "type": {
                "text": "Window | HTMLElement"
              }
            },
            {
              "name": "keyBindingMap",
              "type": {
                "text": "KeyBindingMap"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "KeyBindingOptions"
              }
            }
          ],
          "description": "Subscribes to keybindings.\n\nReturns an unsubscribe method."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseKeybinding",
          "declaration": {
            "name": "parseKeybinding",
            "module": "../packages/components/shared/src/vendor/tinykeys.ts"
          }
        },
        {
          "kind": "js",
          "name": "createKeybindingsHandler",
          "declaration": {
            "name": "createKeybindingsHandler",
            "module": "../packages/components/shared/src/vendor/tinykeys.ts"
          }
        },
        {
          "kind": "js",
          "name": "tinykeys",
          "declaration": {
            "name": "tinykeys",
            "module": "../packages/components/shared/src/vendor/tinykeys.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/skeleton/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/skeleton.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/skeleton/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-skeleton",
          "declaration": {
            "name": "Skeleton",
            "module": "/packages/components/skeleton/src/skeleton.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/skeleton/src/skeleton.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/skeleton/src/skeleton.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/skeleton/src/skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Skeleton",
          "members": [
            {
              "kind": "field",
              "name": "effect",
              "type": {
                "text": "'none' | 'shimmer' | 'pulse' | 'sheen'"
              },
              "default": "'shimmer'",
              "description": "Skeleton's effect.",
              "attribute": "effect",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'circle' | 'default'"
              },
              "default": "'default'",
              "description": "Skeleton's variant.",
              "attribute": "variant",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "effect",
              "type": {
                "text": "'none' | 'shimmer' | 'pulse' | 'sheen'"
              },
              "default": "'shimmer'",
              "description": "Skeleton's effect.",
              "fieldName": "effect"
            },
            {
              "name": "variant",
              "type": {
                "text": "'circle' | 'default'"
              },
              "default": "'default'",
              "description": "Skeleton's variant.",
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-skeleton",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Skeleton",
          "declaration": {
            "name": "Skeleton",
            "module": "../packages/components/skeleton/src/skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/spinner/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/spinner.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/spinner/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-spinner",
          "declaration": {
            "name": "Spinner",
            "module": "/packages/components/spinner/src/spinner.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/spinner/src/spinner.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/spinner/src/spinner.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/spinner/src/spinner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Let the user know you are processing their data or that the (part of the) page is loading.\n\n```html\n<sl-spinner></sl-spinner>\n```",
          "name": "Spinner",
          "cssProperties": [
            {
              "description": "The size of the spinner, defaults to `md` if not set.",
              "name": "--sl-spinner-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SpinnerSize | undefined"
              },
              "description": "The size of the spinner. Defaults to `md` with css properties if not attribute is not set.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | undefined"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "SpinnerVariant | undefined"
              },
              "description": "The spinner variant.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'accent' | 'info' | 'danger' | 'success' | 'warning' | undefined"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "SpinnerSize | undefined"
              },
              "description": "The size of the spinner. Defaults to `md` with css properties if not attribute is not set.",
              "fieldName": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | undefined"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "SpinnerVariant | undefined"
              },
              "description": "The spinner variant.",
              "fieldName": "variant",
              "expandedType": {
                "text": "'accent' | 'info' | 'danger' | 'success' | 'warning' | undefined"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-spinner",
          "customElement": true,
          "methods": [],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Spinner",
          "declaration": {
            "name": "Spinner",
            "module": "../packages/components/spinner/src/spinner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/switch/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/switch/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-switch",
          "declaration": {
            "name": "Switch",
            "module": "/packages/components/switch/src/switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/switch/src/switch.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/switch/src/switch.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/switch/src/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A toggle switch.\n\n```html\n  <sl-switch>Foo</sl-switch>\n```",
          "name": "Switch",
          "slots": [
            {
              "description": "Text label of the checkbox. Technically there are no limits what can be put here; text, images, icons etc.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the switch is on or off.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the switch is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconOff",
              "type": {
                "text": "string | undefined"
              },
              "description": "Custom icon in \"off\" state.",
              "attribute": "icon-off",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconOn",
              "type": {
                "text": "string | undefined"
              },
              "description": "Custom icon in \"on\" state.",
              "attribute": "icon-on",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "reverse",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the toggle should be shown *after* the text.",
              "attribute": "reverse",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SwitchSize"
              },
              "default": "'md'",
              "description": "The size of the switch.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            },
            {
              "kind": "event",
              "name": "sl-blur",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the component loses focus."
            },
            {
              "kind": "event",
              "name": "sl-change",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T | null>>"
              },
              "description": "Emits when the checked state changes."
            },
            {
              "kind": "event",
              "name": "sl-focus",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component receives focus."
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value of the switch when the switch is checked.\nSee the formValue property for easy access.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "events": [
            {
              "name": "blurEvent",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the component loses focus.",
              "fieldName": "blurEvent"
            },
            {
              "name": "changeEvent",
              "type": {
                "text": "EventEmitter<SlChangeEvent<T | null>>"
              },
              "description": "Emits when the checked state changes.",
              "fieldName": "changeEvent"
            },
            {
              "name": "focusEvent",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component receives focus.",
              "fieldName": "focusEvent"
            },
            {
              "type": {
                "text": "ValidateEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the switch is on or off.",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the switch is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "icon-off",
              "type": {
                "text": "string | undefined"
              },
              "description": "Custom icon in \"off\" state.",
              "fieldName": "iconOff"
            },
            {
              "name": "icon-on",
              "type": {
                "text": "string | undefined"
              },
              "description": "Custom icon in \"on\" state.",
              "fieldName": "iconOn"
            },
            {
              "name": "reverse",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the toggle should be shown *after* the text.",
              "fieldName": "reverse"
            },
            {
              "name": "size",
              "type": {
                "text": "SwitchSize"
              },
              "default": "'md'",
              "description": "The size of the switch.",
              "fieldName": "size",
              "expandedType": {
                "text": "'sm' | 'md' | 'lg'"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "T | undefined"
              },
              "description": "The value of the switch when the switch is checked.\nSee the formValue property for easy access.",
              "fieldName": "value"
            },
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/form"
            },
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-switch",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional property to indicate the valid state should be shown.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "Switch",
            "module": "../packages/components/switch/src/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tab-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tab-panel.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tab.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-tab",
          "declaration": {
            "name": "Tab",
            "module": "/packages/components/tabs/src/tab.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab-group",
          "declaration": {
            "name": "TabGroup",
            "module": "/packages/components/tabs/src/tab-group.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab-panel",
          "declaration": {
            "name": "TabPanel",
            "module": "/packages/components/tabs/src/tab-panel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/tabs/src/tab-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A tab group component that can contain tabs and tab panels.\n\n```html\n   <sl-tab-group>\n        <sl-tab selected>First tab</sl-tab>\n        <sl-tab-panel>Content of the tab 1</sl-tab-panel>\n\n        <sl-tab>Second tab</sl-tab>\n        <sl-tab-panel>Content of the tab 2</sl-tab-panel>\n   </sl-tab-group>\n```",
          "name": "TabGroup",
          "slots": [
            {
              "description": "a place for the tab group content.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "type": {
                "text": "TabsAlignment"
              },
              "default": "'start'",
              "description": "The alignment of tabs inside sl-tab-group",
              "attribute": "alignment",
              "reflects": true,
              "expandedType": {
                "text": "'start' | 'filled'"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The listbox element with all tabs list."
            },
            {
              "kind": "event",
              "name": "tabChange",
              "type": {
                "text": "EventEmitter<SlTabChangeEvent>"
              },
              "description": "Emits when the tab has been selected/changed."
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "Tab[] | undefined"
              },
              "description": "The slotted tabs."
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Renders the tabs vertically instead of the default horizontal",
              "attribute": "vertical",
              "reflects": true
            }
          ],
          "events": [
            {
              "name": "tabChange",
              "type": {
                "text": "EventEmitter<SlTabChangeEvent>"
              },
              "description": "Emits when the tab has been selected/changed.",
              "fieldName": "tabChange"
            }
          ],
          "attributes": [
            {
              "name": "vertical",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Renders the tabs vertically instead of the default horizontal",
              "fieldName": "vertical"
            },
            {
              "name": "alignment",
              "type": {
                "text": "TabsAlignment"
              },
              "default": "'start'",
              "description": "The alignment of tabs inside sl-tab-group",
              "fieldName": "alignment",
              "expandedType": {
                "text": "'start' | 'filled'"
              }
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-tab-group",
          "customElement": true,
          "methods": [],
          "fields": [
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "Tab[] | undefined"
              },
              "description": "The slotted tabs."
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The listbox element with all tabs list."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabGroup",
          "declaration": {
            "name": "TabGroup",
            "module": "../packages/components/tabs/src/tab-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab-panel.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/tabs/src/tab-panel.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A tab panel component - part of the tab group component, place for a tab content.\n\n```html\n     <sl-tab-panel>\n       Content of the tab\n     </sl-tab-panel>\n```",
          "name": "TabPanel",
          "slots": [
            {
              "description": "a place for the tab panel content.",
              "name": "default"
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-tab-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabPanel",
          "declaration": {
            "name": "TabPanel",
            "module": "../packages/components/tabs/src/tab-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/tabs/src/tab.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A tab component - part of the tab group component.\n\n```html\n     <sl-tab>\n        <sl-icon slot=\"icon\" name=\"star\" size=\"md\"></sl-icon>\n        Tab label\n        <span slot=\"subtitle\">Tab subtitle</span>\n        <sl-badge slot=\"badge\" size=\"lg\" variant=\"danger\">4</sl-badge>\n     </sl-tab>\n```",
          "name": "Tab",
          "slots": [
            {
              "description": "a place for the tab group content.",
              "name": "default"
            },
            {
              "description": "icon shown on the left side of the component.",
              "name": "icon"
            },
            {
              "description": "a place for badge component.",
              "name": "badge"
            },
            {
              "description": "subtitle of the tab, containing additional information",
              "name": "subtitle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the tab item is disabled",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSelectionChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Apply accessible attributes and values to the tab button.\nObserve the selected property if it changes"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the tab item is selected",
              "attribute": "selected",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the tab item is selected",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the tab item is disabled",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-tab",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "handleSelectionChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Apply accessible attributes and values to the tab button.\nObserve the selected property if it changes"
            }
          ],
          "fields": []
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tab",
          "declaration": {
            "name": "Tab",
            "module": "../packages/components/tabs/src/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/text-field/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/text-field.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/text-field/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-text-field",
          "declaration": {
            "name": "TextField",
            "module": "/packages/components/text-field/src/text-field.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/text-field/src/text-field.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/text-field/src/text-field.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/text-field/src/text-field.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Single line text field component.",
          "name": "TextField",
          "cssParts": [
            {
              "description": "The input's wrapper",
              "name": "wrapper"
            }
          ],
          "slots": [
            {
              "description": "Content shown before the input",
              "name": "prefix"
            },
            {
              "description": "The slot for the input element",
              "name": "input"
            },
            {
              "description": "Content shown after the input",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "typeof HTMLInputElement.prototype.autocomplete | undefined"
              },
              "description": "Specifies which type of data the browser can use to pre-fill the input.\n\nNOTE: Declare the type this way so it is backwards compatible with 4.9.5,\nwhich we still use in `@sl-design-system/angular`.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the text field is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "description": "The input element in the light DOM."
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum length (number of characters).",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Minimum length (number of characters).",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "This will validate the value of the input using the given pattern.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Placeholder text in the input.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether you can interact with the input or if it is just a static, readonly display.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the text field is a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "attribute": "show-valid",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "TextFieldSize"
              },
              "default": "'md'",
              "description": "The size of the input.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'md' | 'lg'"
              }
            },
            {
              "kind": "event",
              "name": "sl-blur",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the focus leaves the component."
            },
            {
              "kind": "event",
              "name": "sl-change",
              "type": {
                "text": "EventEmitter<SlChangeEvent<string>>"
              },
              "description": "Emits when the value changes."
            },
            {
              "kind": "event",
              "name": "sl-focus",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component gains focus."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'email' | 'number' | 'tel' | 'text' | 'url' | 'password'"
              },
              "default": "'text'",
              "description": "The input type. Only text types are valid here. For other types,\nsee their respective components.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value for the input, to be used in forms.",
              "default": "''",
              "attribute": "value",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "events": [
            {
              "name": "blurEvent",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the focus leaves the component.",
              "fieldName": "blurEvent"
            },
            {
              "name": "changeEvent",
              "type": {
                "text": "EventEmitter<SlChangeEvent<string>>"
              },
              "description": "Emits when the value changes.",
              "fieldName": "changeEvent"
            },
            {
              "name": "focusEvent",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component gains focus.",
              "fieldName": "focusEvent"
            },
            {
              "type": {
                "text": "ValidateEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "typeof HTMLInputElement.prototype.autocomplete | undefined"
              },
              "description": "Specifies which type of data the browser can use to pre-fill the input.\n\nNOTE: Declare the type this way so it is backwards compatible with 4.9.5,\nwhich we still use in `@sl-design-system/angular`.",
              "fieldName": "autocomplete"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the text field is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum length (number of characters).",
              "fieldName": "maxLength"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Minimum length (number of characters).",
              "fieldName": "minLength"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "This will validate the value of the input using the given pattern.",
              "fieldName": "pattern"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Placeholder text in the input.",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether you can interact with the input or if it is just a static, readonly display.",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the text field is a required field.",
              "fieldName": "required"
            },
            {
              "name": "show-valid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "fieldName": "showValid"
            },
            {
              "name": "size",
              "type": {
                "text": "TextFieldSize"
              },
              "default": "'md'",
              "description": "The size of the input.",
              "fieldName": "size",
              "expandedType": {
                "text": "'md' | 'lg'"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "'email' | 'number' | 'tel' | 'text' | 'url' | 'password'"
              },
              "default": "'text'",
              "description": "The input type. Only text types are valid here. For other types,\nsee their respective components.",
              "fieldName": "type"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value for the input, to be used in forms.",
              "fieldName": "value"
            },
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/form"
            },
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-text-field",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "description": "The input element in the light DOM."
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextField",
          "declaration": {
            "name": "TextField",
            "module": "../packages/components/text-field/src/text-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/textarea/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/textarea.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/textarea/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-textarea",
          "declaration": {
            "name": "Textarea",
            "module": "/packages/components/textarea/src/textarea.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/textarea/src/textarea.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/textarea/src/textarea.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/textarea/src/textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Multi line text area component.",
          "name": "Textarea",
          "cssProperties": [
            {
              "description": "The number of rows initially visible in the textarea",
              "name": "--sl-textarea-rows"
            }
          ],
          "slots": [
            {
              "description": "The slot for the textarea element",
              "name": "textarea"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "typeof HTMLTextAreaElement.prototype.autocomplete | undefined"
              },
              "description": "Specifies which type of data the browser can use to pre-fill the textarea.\n\nNOTE: Declare the type this way so it is backwards compatible with 4.9.5,\nwhich we still use in `@sl-design-system/angular`.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "customValidity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "attribute": "custom-validity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the textarea is disabled; when set no interaction is possible.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum length (number of characters).",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Minimum length (number of characters).",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Placeholder text in the input.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether you can interact with the textarea or if it is just a static, readonly display.",
              "attribute": "readonly"
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the textarea is a required field.",
              "attribute": "required"
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "ResizeType"
              },
              "default": "'vertical'",
              "description": "The way the textarea can be resized.",
              "attribute": "resize",
              "reflects": true,
              "expandedType": {
                "text": "'none' | 'vertical' | 'auto'"
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number | undefined"
              },
              "description": "The number of rows the textarea should initially have.\nIf not set, the browser defaults to 2 rows.",
              "attribute": "rows"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "attribute": "show-valid",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "attribute": "show-validity",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "TextareaSize"
              },
              "default": "'md'",
              "description": "The size of the textarea.",
              "attribute": "size",
              "reflects": true,
              "expandedType": {
                "text": "'md' | 'lg'"
              }
            },
            {
              "kind": "event",
              "name": "sl-blur",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the focus leaves the component."
            },
            {
              "kind": "event",
              "name": "sl-change",
              "type": {
                "text": "EventEmitter<SlChangeEvent<string>>"
              },
              "description": "Emits when the value changes."
            },
            {
              "kind": "event",
              "name": "sl-focus",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component gains focus."
            },
            {
              "kind": "field",
              "name": "textarea",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "description": "The textarea in the light DOM."
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "unknown | undefined"
              },
              "description": "The value for the textarea.",
              "default": "''",
              "attribute": "value",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "wrap",
              "type": {
                "text": "WrapType"
              },
              "default": "'soft'",
              "description": "The way text should be wrapped during form submission.",
              "attribute": "wrap",
              "expandedType": {
                "text": "'soft' | 'hard'"
              }
            }
          ],
          "events": [
            {
              "name": "blurEvent",
              "type": {
                "text": "EventEmitter<SlBlurEvent>"
              },
              "description": "Emits when the focus leaves the component.",
              "fieldName": "blurEvent"
            },
            {
              "name": "changeEvent",
              "type": {
                "text": "EventEmitter<SlChangeEvent<string>>"
              },
              "description": "Emits when the value changes.",
              "fieldName": "changeEvent"
            },
            {
              "name": "focusEvent",
              "type": {
                "text": "EventEmitter<SlFocusEvent>"
              },
              "description": "Emits when the component gains focus.",
              "fieldName": "focusEvent"
            },
            {
              "type": {
                "text": "ValidateEvent"
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "typeof HTMLTextAreaElement.prototype.autocomplete | undefined"
              },
              "description": "Specifies which type of data the browser can use to pre-fill the textarea.\n\nNOTE: Declare the type this way so it is backwards compatible with 4.9.5,\nwhich we still use in `@sl-design-system/angular`.",
              "fieldName": "autocomplete"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the textarea is disabled; when set no interaction is possible.",
              "fieldName": "disabled"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum length (number of characters).",
              "fieldName": "maxLength"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Minimum length (number of characters).",
              "fieldName": "minLength"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Placeholder text in the input.",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether you can interact with the textarea or if it is just a static, readonly display.",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the textarea is a required field.",
              "fieldName": "required"
            },
            {
              "name": "resize",
              "type": {
                "text": "ResizeType"
              },
              "default": "'vertical'",
              "description": "The way the textarea can be resized.",
              "fieldName": "resize",
              "expandedType": {
                "text": "'none' | 'vertical' | 'auto'"
              }
            },
            {
              "name": "rows",
              "type": {
                "text": "number | undefined"
              },
              "description": "The number of rows the textarea should initially have.\nIf not set, the browser defaults to 2 rows.",
              "fieldName": "rows"
            },
            {
              "name": "show-valid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set will cause the control to show it is valid after reportValidity is called.",
              "fieldName": "showValid"
            },
            {
              "name": "size",
              "type": {
                "text": "TextareaSize"
              },
              "default": "'md'",
              "description": "The size of the textarea.",
              "fieldName": "size",
              "expandedType": {
                "text": "'md' | 'lg'"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value for the textarea.",
              "fieldName": "value"
            },
            {
              "name": "wrap",
              "type": {
                "text": "WrapType"
              },
              "default": "'soft'",
              "description": "The way text should be wrapped during form submission.",
              "fieldName": "wrap",
              "expandedType": {
                "text": "'soft' | 'hard'"
              }
            },
            {
              "name": "custom-validity",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the control is invalid.",
              "fieldName": "customValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "name": "show-validity",
              "type": {
                "text": "'valid' | 'invalid' | undefined"
              },
              "description": "Whether to show the validity state.",
              "fieldName": "showValidity",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/form"
            },
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-textarea",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "getLocalizedValidationMessage",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "This returns a localized validation message. It does not support all `ValidityState` properties,\nsince some require more context than we have here. If you need to support more, you can override\nthis method in your own form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns whether the control is valid. If the control is invalid, calling this will\nalso cause an `invalid` event to be dispatched. After calling this, the control\nwill also report the validity to the user.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string | Promise<string>"
                  },
                  "description": "The validation message."
                }
              ],
              "description": "Sets a custom validation message for the form control. If the message\nis not an empty string, that will make the control invalid. By setting it to\nan empty string again, you can make the control valid again.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "textarea",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "description": "The textarea in the light DOM."
            },
            {
              "kind": "field",
              "name": "formValue",
              "type": {
                "text": "unknown"
              },
              "description": "The value used when submitting the form.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "description": "The form associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "`NodeListOf<HTMLLabelElement>` | null"
              },
              "description": "The labels associated with the control.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeFormValue",
              "type": {
                "text": "FormValue"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "description": "Returns whether the form control is valid or not.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "String representing a localized (by the browser) message that describes the validation\nconstraints that the control does not satisfy (if any). The string is empty if the control\nis not a candidate for constraint validation, or it satisfies its constraints.\n\nFor true localization, see `getLocalizedValidationMessage()` instead.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Returns the validity state the control is in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityState",
              "type": {
                "text": "'valid' | 'invalid' | 'pending'"
              },
              "description": "Returns the current validity state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/form/src/form-control-mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Textarea",
          "declaration": {
            "name": "Textarea",
            "module": "../packages/components/textarea/src/textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tooltip.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tooltip-directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "/packages/components/tooltip/src/tooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/src/tooltip-directive.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TooltipDirective",
          "members": [
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "unknown | undefined"
              }
            },
            {
              "kind": "field",
              "name": "didSetupLazy",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "part",
              "type": {
                "text": "ElementPart | undefined"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "Tooltip | undefined"
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "package": "lit/directive.js"
          },
          "methods": [
            {
              "kind": "method",
              "name": "renderContent",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "unknown | undefined"
              }
            },
            {
              "kind": "field",
              "name": "didSetupLazy",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "part",
              "type": {
                "text": "ElementPart | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "Tooltip | undefined"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "tooltip"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TooltipDirective",
          "declaration": {
            "name": "TooltipDirective",
            "module": "../packages/components/tooltip/src/tooltip-directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "tooltip",
          "declaration": {
            "name": "tooltip",
            "module": "../packages/components/tooltip/src/tooltip-directive.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/src/tooltip.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/tooltip/src/tooltip.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/src/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tooltip component.",
          "name": "Tooltip",
          "slots": [
            {
              "description": "The slot for the tooltip content.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "16",
              "description": "The default padding of the arrow."
            },
            {
              "kind": "method",
              "name": "lazy",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(target: Tooltip) => void"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "type": {
                    "text": "TooltipOptions"
                  }
                }
              ],
              "description": "To attach the `sl-tooltip` to the DOM tree and anchor element"
            },
            {
              "kind": "field",
              "name": "maxWidth",
              "type": {
                "text": "number | undefined"
              },
              "description": "The maximum width of the tooltip.",
              "attribute": "max-width"
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "12",
              "description": "The default offset of the tooltip to its anchor."
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left' | 'top-start' | 'top-end' | 'right-start' | 'right-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end'"
              },
              "default": "'top'",
              "description": "Position of the tooltip relative to its anchor.",
              "attribute": "position"
            },
            {
              "kind": "field",
              "name": "viewportMargin",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "8",
              "description": "The default margin between the tooltip and the viewport."
            }
          ],
          "attributes": [
            {
              "name": "max-width",
              "type": {
                "text": "number | undefined"
              },
              "description": "The maximum width of the tooltip.",
              "fieldName": "maxWidth"
            },
            {
              "name": "position",
              "type": {
                "text": "'top' | 'right' | 'bottom' | 'left' | 'top-start' | 'top-end' | 'right-start' | 'right-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end'"
              },
              "default": "'top'",
              "description": "Position of the tooltip relative to its anchor.",
              "fieldName": "position"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-tooltip",
          "customElement": true,
          "methods": [
            {
              "kind": "method",
              "name": "lazy",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(target: Tooltip) => void"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "type": {
                    "text": "TooltipOptions"
                  }
                }
              ],
              "description": "To attach the `sl-tooltip` to the DOM tree and anchor element"
            }
          ],
          "fields": [
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "16",
              "description": "The default padding of the arrow."
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "12",
              "description": "The default offset of the tooltip to its anchor."
            },
            {
              "kind": "field",
              "name": "viewportMargin",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "8",
              "description": "The default margin between the tooltip and the viewport."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "../packages/components/tooltip/src/tooltip.ts"
          }
        }
      ]
    }
  ]
}
