{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "../packages/components/avatar/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/avatar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/avatar/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-avatar",
          "declaration": {
            "name": "Avatar",
            "module": "/packages/components/avatar/src/avatar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button-bar/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/button-bar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button-bar/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-button-bar",
          "declaration": {
            "name": "ButtonBar",
            "module": "/packages/components/button-bar/src/button-bar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-button",
          "declaration": {
            "name": "Button",
            "module": "/packages/components/button/src/button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/checkbox.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/checkbox-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "/packages/components/checkbox/src/checkbox.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-checkbox-group",
          "declaration": {
            "name": "CheckboxGroup",
            "module": "/packages/components/checkbox/src/checkbox-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/dialog/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/dialog/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-dialog",
          "declaration": {
            "name": "Dialog",
            "module": "/packages/components/dialog/src/dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/drawer/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/drawer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/drawer/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-drawer",
          "declaration": {
            "name": "Drawer",
            "module": "/packages/components/drawer/src/drawer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/editor.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-editor",
          "declaration": {
            "name": "Editor",
            "module": "/packages/components/editor/src/editor.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/column-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/filter-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/grid.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/selection-column.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/sort-column.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-grid",
          "declaration": {
            "name": "Grid",
            "module": "/packages/components/grid/src/grid.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-column",
          "declaration": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-column-group",
          "declaration": {
            "name": "GridColumnGroup",
            "module": "/packages/components/grid/src/column-group.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-filter-column",
          "declaration": {
            "name": "GridFilterColumn",
            "module": "/packages/components/grid/src/filter-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-selection-column",
          "declaration": {
            "name": "GridSelectionColumn",
            "module": "/packages/components/grid/src/selection-column.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-grid-sort-column",
          "declaration": {
            "name": "GridSortColumn",
            "module": "/packages/components/grid/src/sort-column.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/icon.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/models.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-icon",
          "declaration": {
            "name": "Icon",
            "module": "/packages/components/icon/src/icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/input/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/input/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-input",
          "declaration": {
            "name": "Input",
            "module": "/packages/components/input/src/input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/label/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/label/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-label",
          "declaration": {
            "name": "Label",
            "module": "/packages/components/label/src/label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/mixins/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/popover.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-popover",
          "declaration": {
            "name": "Popover",
            "module": "/packages/components/popover/src/popover.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/radio.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-radio",
          "declaration": {
            "name": "Radio",
            "module": "/packages/components/radio-group/src/radio.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-radio-group",
          "declaration": {
            "name": "RadioGroup",
            "module": "/packages/components/radio-group/src/radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-option.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/select-option-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-select",
          "declaration": {
            "name": "Select",
            "module": "/packages/components/select/src/select.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select-option",
          "declaration": {
            "name": "SelectOption",
            "module": "/packages/components/select/src/select-option.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select-option-group",
          "declaration": {
            "name": "SelectOptionGroup",
            "module": "/packages/components/select/src/select-option-group.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select-overlay",
          "declaration": {
            "name": "SelectOverlay",
            "module": "/packages/components/select/src/select-overlay.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/controllers/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/data-source/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/decorators/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/mixins/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/css.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/path.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/string.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/types.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/validators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tab-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tab-panel.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tab.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-tab",
          "declaration": {
            "name": "Tab",
            "module": "/packages/components/tabs/src/tab.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab-group",
          "declaration": {
            "name": "TabGroup",
            "module": "/packages/components/tabs/src/tab-group.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab-panel",
          "declaration": {
            "name": "TabPanel",
            "module": "/packages/components/tabs/src/tab-panel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/textarea/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/textarea.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/textarea/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-textarea",
          "declaration": {
            "name": "Textarea",
            "module": "/packages/components/textarea/src/textarea.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/avatar/src/avatar.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/avatar/src/avatar.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/avatar/src/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Avatar",
          "members": [
            {
              "kind": "field",
              "name": "uniqueProfileId",
              "type": {
                "text": "string"
              },
              "default": "'slds'",
              "description": "Renders the tabs vertically instead of the default horizontal",
              "attribute": "uniqueProfileId"
            },
            {
              "kind": "field",
              "name": "user",
              "type": {
                "text": "UserProfile | undefined"
              }
            },
            {
              "kind": "field",
              "name": "profileName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_getUserDetails",
              "return": {
                "type": {
                  "text": "Promise<UserProfile>"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "uniqueProfileId",
              "type": {
                "text": "string"
              },
              "default": "'slds'",
              "description": "Renders the tabs vertically instead of the default horizontal",
              "fieldName": "uniqueProfileId"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Avatar",
          "declaration": {
            "name": "Avatar",
            "module": "../packages/components/avatar/src/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tooltip.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./src/tooltip-directive.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/register.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sl-tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "/packages/components/tooltip/src/tooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button-bar/src/button-bar.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/button-bar/src/button-bar.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button-bar/src/button-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Groups buttons together in a bar separated by whitespace.\n\n```html\n<dna-button-bar>\n  <dna-button>Foo</dna-button>\n  <dna-button>Bar</dna-button>\n</dna-button-bar>\n```",
          "name": "ButtonBar",
          "slots": [
            {
              "description": "Buttons to be grouped in the bar",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "start | center | end | 'space-between'"
              },
              "default": "'start'",
              "description": "How the buttons are aligned with the bar.",
              "attribute": "align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconOnly",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the bar only contains icon-only buttons.",
              "attribute": "icon-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "reverse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If set, the button order is reversed.",
              "attribute": "reverse",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "start | center | end | 'space-between'"
              },
              "default": "'start'",
              "description": "How the buttons are aligned with the bar.",
              "fieldName": "align"
            },
            {
              "name": "icon-only",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the bar only contains icon-only buttons.",
              "fieldName": "iconOnly"
            },
            {
              "name": "reverse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If set, the button order is reversed.",
              "fieldName": "reverse"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-button-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonBar",
          "declaration": {
            "name": "ButtonBar",
            "module": "../packages/components/button-bar/src/button-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button/src/button.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/button/src/button.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/button/src/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Button",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "description": "Event controller."
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "originalTabIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "The original tabIndex before disabled."
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "ButtonFill"
              },
              "default": "'default'",
              "description": "The button fill.",
              "attribute": "fill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'md'",
              "description": "Button size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "button | reset | submit"
              },
              "default": "'button'",
              "description": "The button type. Defaults to `button`, but can be set to `submit` when used in a form.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'default'",
              "description": "The button variant. If no variant is specified, it uses the default button style.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#hasOnlyIconAsChild",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setIconProperties",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "assignedNodes",
                  "type": {
                    "text": "Node[]"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "fill",
              "type": {
                "text": "ButtonFill"
              },
              "default": "'default'",
              "description": "The button fill.",
              "fieldName": "fill"
            },
            {
              "name": "size",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'md'",
              "description": "Button size.",
              "fieldName": "size"
            },
            {
              "name": "type",
              "type": {
                "text": "button | reset | submit"
              },
              "default": "'button'",
              "description": "The button type. Defaults to `button`, but can be set to `submit` when used in a form.",
              "fieldName": "type"
            },
            {
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'default'",
              "description": "The button variant. If no variant is specified, it uses the default button style.",
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "../packages/components/button/src/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/dialog/src/dialog.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/dialog/src/dialog.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/dialog/src/dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A dialog component for displaying modal UI.",
          "name": "Dialog",
          "slots": [
            {
              "description": "Area where action buttons are placed",
              "name": "action"
            },
            {
              "description": "Body content for the dialog",
              "name": "default"
            },
            {
              "description": "Footer content for the dialog",
              "name": "footer"
            },
            {
              "description": "Header content for the dialog",
              "name": "header"
            },
            {
              "description": "The title of the dialog",
              "name": "title"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disableClose",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the ability to close the dialog using the Escape key.",
              "attribute": "disable-close"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "'dialog' | 'alertdialog'"
              },
              "default": "'dialog'",
              "description": "The ARIA role of the dialog.",
              "attribute": "role"
            },
            {
              "kind": "method",
              "name": "showModal",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onCancel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent & { target: HTMLElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onClose",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "disable-close",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the ability to close the dialog using the Escape key.",
              "fieldName": "disableClose"
            },
            {
              "name": "role",
              "type": {
                "text": "'dialog' | 'alertdialog'"
              },
              "default": "'dialog'",
              "description": "The ARIA role of the dialog.",
              "fieldName": "role"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Dialog",
          "declaration": {
            "name": "Dialog",
            "module": "../packages/components/dialog/src/dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/src/checkbox-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/checkbox/src/checkbox-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/src/checkbox-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CheckboxGroup",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this, { click: this.#onClick })",
              "description": "Events controller."
            },
            {
              "kind": "field",
              "name": "#mutation",
              "privacy": "private",
              "default": "new MutationController(this, {\n    callback: () => {\n      const value = this.boxes\n        ?.map(box => (box.checked ? box.value : null))\n        .filter(Boolean)\n        .join(', ');\n\n      this.#validation.validate(value);\n    },\n    config: { attributeFilter: ['checked'], attributeOldValue: true, subtree: true }\n  })",
              "description": "Observe changes to the checkboxes."
            },
            {
              "kind": "field",
              "name": "#rovingTabindexController",
              "privacy": "private",
              "default": "new RovingTabindexController<Checkbox>(this, {\n    focusInIndex: (elements: Checkbox[]) => elements.findIndex(el => !el.disabled),\n    elements: () => this.boxes || [],\n    isFocusableElement: (el: Checkbox) => !el.disabled\n  })",
              "description": "Manage the keyboard navigation."
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    validators: [requiredValidator]\n  })",
              "description": "Support validation that at least 1 checkbox is required in the group."
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "description": "Element internals."
            },
            {
              "kind": "field",
              "name": "boxes",
              "type": {
                "text": "Checkbox[] | undefined"
              },
              "description": "The slotted checkboxes."
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[] | undefined"
              },
              "description": "Custom validators."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name of the form element",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#updateHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#removeHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name of the form element",
              "fieldName": "name"
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "fieldName": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HintMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-checkbox-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CheckboxGroup",
          "declaration": {
            "name": "CheckboxGroup",
            "module": "../packages/components/checkbox/src/checkbox-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/src/checkbox.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/checkbox/src/checkbox.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/checkbox/src/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Checkbox",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this, {\n    click: this.#onClick,\n    keydown: this.#onKeydown\n  })"
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    validators: [requiredValidator]\n  })"
            },
            {
              "kind": "field",
              "name": "#initialState",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "default": "this.attachInternals()",
              "description": "Element internals."
            },
            {
              "kind": "field",
              "name": "change",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "description": "Emits when the checked state changes."
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is checked.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is invalid.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the checkbox has the indeterminate state.",
              "attribute": "indeterminate"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CheckboxSize"
              },
              "default": "'md'",
              "description": "Button size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the checkbox.",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onToggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#cachedValue",
              "privacy": "private",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The cached value for the form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, or an `<input>` or `<textarea>`.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControlElement",
              "type": {
                "text": "FormControlElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement> | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "FormControlValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#updateHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#removeHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is checked.",
              "fieldName": "checked"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the checkbox is invalid.",
              "fieldName": "invalid"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the checkbox has the indeterminate state.",
              "fieldName": "indeterminate"
            },
            {
              "name": "size",
              "type": {
                "text": "CheckboxSize"
              },
              "default": "'md'",
              "description": "Button size.",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the checkbox.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "fieldName": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            },
            {
              "name": "HintMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "../packages/components/checkbox/src/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/drawer/src/drawer.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/drawer/src/drawer.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/drawer/src/drawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A drawer component for displaying UI at the side of the screen.",
          "name": "Drawer",
          "slots": [
            {
              "description": "Body content for the drawer",
              "name": "default"
            },
            {
              "description": "Header content for the drawer",
              "name": "header"
            },
            {
              "description": "The title of the drawer",
              "name": "title"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disableClose",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the ability to close the dialog using the Escape key.",
              "attribute": "disable-close"
            },
            {
              "kind": "field",
              "name": "attachment",
              "type": {
                "text": "DrawerAttachment"
              },
              "default": "'right'",
              "description": "The side of the screen where the drawer is attached",
              "attribute": "attachment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closeButtonSize",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'sm'",
              "description": "The size of the button",
              "attribute": "closeButtonSize"
            },
            {
              "kind": "method",
              "name": "showModal",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onCancel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent & { target: HTMLElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onClose",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "disable-close",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the ability to close the dialog using the Escape key.",
              "fieldName": "disableClose"
            },
            {
              "name": "attachment",
              "type": {
                "text": "DrawerAttachment"
              },
              "default": "'right'",
              "description": "The side of the screen where the drawer is attached",
              "fieldName": "attachment"
            },
            {
              "name": "closeButtonSize",
              "type": {
                "text": "ButtonSize"
              },
              "default": "'sm'",
              "description": "The size of the button",
              "fieldName": "closeButtonSize"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-drawer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Drawer",
          "declaration": {
            "name": "Drawer",
            "module": "../packages/components/drawer/src/drawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/commands.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "setHTML",
          "return": {
            "type": {
              "text": "Command"
            }
          },
          "parameters": [
            {
              "name": "content",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "setHTML",
          "declaration": {
            "name": "setHTML",
            "module": "../packages/components/editor/src/commands.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/editor.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/editor/src/editor.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/editor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Editor",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)",
              "description": "Manage events."
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    validators: [requiredValidator]\n  })"
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value of the content in the editor."
            },
            {
              "kind": "field",
              "name": "#view",
              "privacy": "private",
              "type": {
                "text": "EditorView | undefined"
              },
              "description": "The ProseMirror editor view instance."
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "description": "Element internals."
            },
            {
              "kind": "field",
              "name": "plugins",
              "type": {
                "text": "Plugin[] | undefined"
              },
              "description": "Additional plugins."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "createEditor",
              "return": {
                "type": {
                  "text": "EditorView"
                }
              }
            },
            {
              "kind": "method",
              "name": "createSchema",
              "return": {
                "type": {
                  "text": "Schema<EditorNodes, EditorMarks>"
                }
              }
            },
            {
              "kind": "method",
              "name": "createState",
              "return": {
                "type": {
                  "text": "EditorState"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onFocusout",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "#cachedValue",
              "privacy": "private",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The cached value for the form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, or an `<input>` or `<textarea>`.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControlElement",
              "type": {
                "text": "FormControlElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement> | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "FormControlValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#updateHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#removeHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "fieldName": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            },
            {
              "name": "HintMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-editor",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Editor",
          "declaration": {
            "name": "Editor",
            "module": "../packages/components/editor/src/editor.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/keymap.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "buildKeymap",
          "return": {
            "type": {
              "text": "{ [key: string]: Command }"
            }
          },
          "parameters": [
            {
              "name": "schema",
              "type": {
                "text": "Schema<EditorNodes, EditorMarks>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "buildListKeymap",
          "return": {
            "type": {
              "text": "{ [key: string]: Command }"
            }
          },
          "parameters": [
            {
              "name": "schema",
              "type": {
                "text": "Schema<EditorNodes, EditorMarks>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "buildKeymap",
          "declaration": {
            "name": "buildKeymap",
            "module": "../packages/components/editor/src/keymap.ts"
          }
        },
        {
          "kind": "js",
          "name": "buildListKeymap",
          "declaration": {
            "name": "buildListKeymap",
            "module": "../packages/components/editor/src/keymap.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/list-utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "rootListDepth",
          "return": {
            "type": {
              "text": "number | undefined"
            }
          },
          "parameters": [
            {
              "name": "pos",
              "type": {
                "text": "ResolvedPos"
              }
            },
            {
              "name": "nodes",
              "type": {
                "text": "{ [key: string]: NodeType }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getListLiftTarget",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "schema",
              "type": {
                "text": "Schema"
              }
            },
            {
              "name": "resPos",
              "type": {
                "text": "ResolvedPos"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "liftSelectionList",
          "return": {
            "type": {
              "text": "Transaction"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "tr",
              "type": {
                "text": "Transaction"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "toggleList",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "dispatch",
              "type": {
                "text": "DispatchFn"
              }
            },
            {
              "name": "view",
              "type": {
                "text": "EditorView"
              }
            },
            {
              "name": "listType",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "toggleListCommand",
          "return": {
            "type": {
              "text": "Command"
            }
          },
          "parameters": [
            {
              "name": "listType",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "liftFollowingList",
          "return": {
            "type": {
              "text": "Transaction"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "from",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "to",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "rootListDepthNum",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "tr",
              "type": {
                "text": "Transaction"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isRangeOfType",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "doc",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "$from",
              "type": {
                "text": "ResolvedPos"
              }
            },
            {
              "name": "$to",
              "type": {
                "text": "ResolvedPos"
              }
            },
            {
              "name": "nodeType",
              "type": {
                "text": "NodeType"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getAncestorNodesBetween",
          "return": {
            "type": {
              "text": "Node[]"
            }
          },
          "parameters": [
            {
              "name": "doc",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "$from",
              "type": {
                "text": "ResolvedPos"
              }
            },
            {
              "name": "$to",
              "type": {
                "text": "ResolvedPos"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "findAncestorPosition",
          "return": {
            "type": {
              "text": "ResolvedPos"
            }
          },
          "parameters": [
            {
              "name": "doc",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "pos",
              "type": {
                "text": "ResolvedPos"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "liftListItems",
          "return": {
            "type": {
              "text": "Command"
            }
          }
        },
        {
          "kind": "function",
          "name": "wrapInList",
          "return": {
            "type": {
              "text": "Command"
            }
          },
          "parameters": [
            {
              "name": "nodeType",
              "type": {
                "text": "NodeType"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "toggleUnorderedList",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "dispatch",
              "type": {
                "text": "DispatchFn"
              }
            },
            {
              "name": "view",
              "type": {
                "text": "EditorView"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "toggleOrderedList",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            },
            {
              "name": "dispatch",
              "type": {
                "text": "DispatchFn"
              }
            },
            {
              "name": "view",
              "type": {
                "text": "EditorView"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "splitListItemKeepMarks",
          "parameters": [
            {
              "name": "itemType",
              "type": {
                "text": "NodeType"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "rootListDepth",
          "declaration": {
            "name": "rootListDepth",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getListLiftTarget",
          "declaration": {
            "name": "getListLiftTarget",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "liftSelectionList",
          "declaration": {
            "name": "liftSelectionList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleList",
          "declaration": {
            "name": "toggleList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleListCommand",
          "declaration": {
            "name": "toggleListCommand",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "liftFollowingList",
          "declaration": {
            "name": "liftFollowingList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isRangeOfType",
          "declaration": {
            "name": "isRangeOfType",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getAncestorNodesBetween",
          "declaration": {
            "name": "getAncestorNodesBetween",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "findAncestorPosition",
          "declaration": {
            "name": "findAncestorPosition",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "liftListItems",
          "declaration": {
            "name": "liftListItems",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "wrapInList",
          "declaration": {
            "name": "wrapInList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleUnorderedList",
          "declaration": {
            "name": "toggleUnorderedList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleOrderedList",
          "declaration": {
            "name": "toggleOrderedList",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "splitListItemKeepMarks",
          "declaration": {
            "name": "splitListItemKeepMarks",
            "module": "../packages/components/editor/src/list-utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/schema.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isEmpty",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, unknown>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeEntries",
          "return": {
            "type": {
              "text": "Record<string, string>"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "name": "predicate",
              "type": {
                "text": "(key: string) => boolean"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeEmptyEntries",
          "return": {
            "type": {
              "text": "Record<string, string>"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "Record<string, unknown>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "commonAttributes",
          "return": {
            "type": {
              "text": "Attrs"
            }
          }
        },
        {
          "kind": "variable",
          "name": "marks",
          "type": {
            "text": "Record<EditorMarks, MarkSpec>"
          },
          "default": "{\n  /**\n   * A link. Has `href` and `title` attributes. `title` defaults to an empty string.\n   * Rendered and parsed as an `<a>` element.\n   */\n  link: {\n    attrs: {\n      href: { default: '' },\n      target: { default: null },\n      title: { default: null }\n    },\n    inclusive: false,\n    parseDOM: [\n      {\n        getAttrs: (node: string | HTMLElement): Attrs | null => {\n          if (typeof node !== 'string') {\n            return {\n              href: node.getAttribute('href'),\n              target: node.getAttribute('target'),\n              title: node.getAttribute('title')\n            };\n          }\n\n          return null;\n        },\n        tag: 'a[href]'\n      }\n    ],\n    toDOM: (mark: Mark): DOMOutputSpec => [\n      'a',\n      // Add default value for href. Otherwise the link is not rendered properly\n      Object.assign({}, { href: '' }, removeEmptyEntries(mark.attrs)),\n      SLOT\n    ]\n  },\n  /**\n   * An emphasis mark. Rendered as an `<em>` element.\n   * Has parse rules that also match `<i>` and `font-style: italic`.\n   */\n  em: {\n    parseDOM: [{ tag: 'i' }, { tag: 'em' }, { style: 'font-style=italic' }],\n    toDOM: (): DOMOutputSpec => ['em', SLOT]\n  },\n  /**\n   * A strong mark. Rendered as `<strong>`, parse rules also match `<b>` and `font-weight: bold`.\n   */\n  strong: {\n    parseDOM: [\n      { tag: 'strong' },\n      // This works around a Google Docs misbehavior where pasted content will be inexplicably\n      // wrapped in `<b>`tags with a font-weight normal\n      {\n        tag: 'b',\n        getAttrs: (node: string | HTMLElement): false | null => {\n          if (typeof node !== 'string') {\n            return node.style.fontWeight !== 'normal' && null;\n          }\n\n          return null;\n        }\n      },\n      {\n        // According to the docs, the value can be a DOM element (for tag rules) or a string (for style rules).\n        getAttrs: (node: string | HTMLElement): false | null => {\n          if (typeof node === 'string') {\n            return /^(bold(er)?|[5-9]\\d{2,})$/.test(node) && null;\n          }\n\n          return null;\n        },\n        style: 'font-weight'\n      }\n    ],\n    toDOM: (): DOMOutputSpec => ['strong', SLOT]\n  },\n  /**\n   * Code font mark. Represented as a `<code>` element.\n   */\n  code: {\n    parseDOM: [\n      { tag: 'span.code', preserveWhitespace: true },\n      { tag: 'code', preserveWhitespace: true },\n      { tag: 'tt', preserveWhitespace: true },\n      {\n        tag: 'span',\n        preserveWhitespace: true,\n        getAttrs: domNode => {\n          const dom = domNode as HTMLSpanElement;\n\n          if (dom.style.whiteSpace === 'pre') {\n            return {};\n          }\n\n          if (dom.style.fontFamily && dom.style.fontFamily.toLowerCase().indexOf('monospace') >= 0) {\n            return {};\n          }\n\n          return false;\n        }\n      }\n    ],\n    toDOM: (): DOMOutputSpec => ['code', SLOT]\n  },\n  /**\n   * An underline mark. Rendered as a `<u>` element. Parse rules also match `text-decoration: underline`.\n   */\n  underline: {\n    parseDOM: [{ tag: 'u' }, { style: 'text-decoration=underline' }],\n    toDOM: (): DOMOutputSpec => ['u', SLOT]\n  },\n  /**\n   * A strikethrough mark. Rendered as a `<del>` element.\n   * Parse rules also match `<s>`, `<strike>`, `text-decoration: line-through`.\n   */\n  strikethrough: {\n    parseDOM: [{ tag: 'del' }, { tag: 's' }, { tag: 'strike' }, { style: 'text-decoration=line-through' }],\n    toDOM: (): DOMOutputSpec => ['del', SLOT]\n  },\n  /**\n   * A subscript mark. Rendered as a `<sub>` element. Parse rules also match `vertical-align: sub`.\n   */\n  subscript: {\n    parseDOM: [{ tag: 'sub' }, { style: 'vertical-align=sub' }],\n    toDOM: (): DOMOutputSpec => ['sub', SLOT]\n  },\n  /**\n   * A superscript mark. Rendered as a `<sup>` element. Parse rules also match `vertical-align: super`.\n   */\n  superscript: {\n    parseDOM: [{ tag: 'sup' }, { style: 'vertical-align=super' }],\n    toDOM: (): DOMOutputSpec => ['sup', SLOT]\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "nodes",
          "type": {
            "text": "Record<EditorNodes, NodeSpec>"
          },
          "default": "{\n  /** The top level document node. */\n  doc: {\n    content: 'block+'\n  },\n  /**\n   * A plain textblock paragraph. Represented as a `<p>` element in the DOM.\n   */\n  paragraph: {\n    attrs: Object.assign({}, commonAttributes()),\n    content: 'inline*',\n    group: 'block',\n    parseDOM: [{ tag: 'p', getAttrs: getAttributes }],\n    toDOM: (node: PMNode): DOMOutputSpec =>\n      isEmpty(node.attrs) ? ['p', SLOT] : ['p', removeEmptyEntries(node.attrs), SLOT]\n  },\n  /**\n   * A blockquote (`<blockquote>`) which wraps one or more blocks.\n   */\n  blockquote: {\n    attrs: Object.assign({}, commonAttributes()),\n    content: 'inline*',\n    defining: true,\n    group: 'block',\n    parseDOM: [{ tag: 'blockquote', getAttrs: getAttributes }],\n    toDOM: (node: PMNode): DOMOutputSpec => ['blockquote', removeEmptyEntries(node.attrs), SLOT]\n  },\n  /**\n   * A horizontal (`<hr>`) rule.\n   */\n  horizontalRule: {\n    group: 'block',\n    parseDOM: [{ tag: 'hr' }],\n    toDOM: (): DOMOutputSpec => ['hr']\n  },\n  /**\n   * A heading textblock with a `level` attribute that has to hold a number from 1 to 6.\n   * Parsed and serialized as an `<h1>` to an `<h6>` element.\n   */\n  heading: {\n    attrs: Object.assign({ level: { default: 1 } }, commonAttributes()),\n    content: 'inline*',\n    defining: true,\n    group: 'block',\n    parseDOM: [\n      { tag: 'h1', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 1 }) },\n      { tag: 'h2', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 2 }) },\n      { tag: 'h3', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 3 }) },\n      { tag: 'h4', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 4 }) },\n      { tag: 'h5', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 5 }) },\n      { tag: 'h6', getAttrs: (node: string | HTMLElement) => ({ ...getAttributes(node), level: 6 }) }\n    ],\n    toDOM: (node: PMNode): DOMOutputSpec => {\n      const attrs = removeEntries(node.attrs, key => key !== 'level'),\n        { level } = node.attrs as Attrs & { level: number };\n\n      return [`h${level}`, removeEmptyEntries(attrs), SLOT];\n    }\n  },\n  /**\n   * A code listing. Prevents marks or non-text inline nodes by default.\n   * Represented as a `<pre>` element with a `<code>` element inside.\n   */\n  codeBlock: {\n    code: true,\n    content: 'text*',\n    defining: true,\n    group: 'block',\n    marks: '',\n    parseDOM: [\n      {\n        preserveWhitespace: 'full',\n        tag: 'pre'\n      }\n    ],\n    toDOM: (): DOMOutputSpec => ['pre', ['code', SLOT]]\n  },\n  /** The text node. */\n  text: {\n    group: 'inline'\n  },\n  /**\n   * An inline image (`<img>`) node. Supports `src`, `alt`, and `href` attributes.\n   * The last two default to an empty string.\n   */\n  image: {\n    attrs: Object.assign({}, commonAttributes(), {\n      alt: { default: null },\n      height: { default: null },\n      src: {},\n      width: { default: null }\n    }),\n    draggable: true,\n    group: 'inline',\n    inline: true,\n    parseDOM: [{ tag: 'img[src]', getAttrs: getAttributes }],\n    toDOM: (node: PMNode): DOMOutputSpec => ['img', removeEmptyEntries(node.attrs)]\n  },\n  /**\n   * A hard line break. Represented as a `<br>` element in the DOM.\n   */\n  hardBreak: {\n    group: 'inline',\n    inline: true,\n    parseDOM: [{ tag: 'br', getAttrs: getAttributes }],\n    selectable: false,\n    toDOM: (): DOMOutputSpec => ['br']\n  },\n  /**\n   * A list item. Represented as a `<li>` element.\n   */\n  listItem: {\n    attrs: Object.assign({}, commonAttributes()),\n    content: 'paragraph block*',\n    marks: '_',\n    parseDOM: [{ tag: 'li', getAttrs: getAttributes }],\n    toDOM: (node: PMNode): DOMOutputSpec => ['li', removeEmptyEntries(node.attrs), SLOT]\n  },\n  /**\n   * An ordered list. Represented as an `<ol>` element. Has a single `order` attribute\n   * which determines the number at which the list starts counting. Defaults to 1.\n   */\n  orderedList: {\n    attrs: {\n      order: {\n        default: 1\n      }\n    },\n    content: 'listItem+',\n    group: 'block',\n    parseDOM: [\n      {\n        getAttrs: (node: string | HTMLElement) => {\n          if (typeof node === 'string') {\n            return {};\n          }\n\n          return {\n            ...getAttributes(node),\n            order: node.hasAttribute('start') ? parseInt(node.getAttribute('start') || '0', 10) : 1\n          };\n        },\n        tag: 'ol'\n      }\n    ],\n    toDOM: (node: PMNode): DOMOutputSpec => {\n      const { order } = node.attrs as Attrs & { order: number };\n\n      return order === 1 ? ['ol', SLOT] : ['ol', { start: order }, SLOT];\n    }\n  },\n  /**\n   * An unordered list. Represented as a `<ul>` element.\n   */\n  bulletList: {\n    content: 'listItem+',\n    group: 'block',\n    parseDOM: [{ tag: 'ul', getAttrs: getAttributes }],\n    toDOM: (): DOMOutputSpec => ['ul', SLOT]\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isEmpty",
          "declaration": {
            "name": "isEmpty",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeEntries",
          "declaration": {
            "name": "removeEntries",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeEmptyEntries",
          "declaration": {
            "name": "removeEmptyEntries",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "commonAttributes",
          "declaration": {
            "name": "commonAttributes",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "marks",
          "declaration": {
            "name": "marks",
            "module": "../packages/components/editor/src/schema.ts"
          }
        },
        {
          "kind": "js",
          "name": "nodes",
          "declaration": {
            "name": "nodes",
            "module": "../packages/components/editor/src/schema.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/editor/src/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createContentNode",
          "return": {
            "type": {
              "text": "Node"
            }
          },
          "parameters": [
            {
              "name": "schema",
              "type": {
                "text": "Schema"
              }
            },
            {
              "name": "value",
              "default": "''"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getHTML",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "state",
              "type": {
                "text": "EditorState"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createContentNode",
          "declaration": {
            "name": "createContentNode",
            "module": "../packages/components/editor/src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getHTML",
          "declaration": {
            "name": "getHTML",
            "module": "../packages/components/editor/src/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/src/icon.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/icon/src/icon.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/src/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Icon",
          "members": [
            {
              "kind": "field",
              "name": "availableStyles",
              "type": {
                "text": "IconStyle[]"
              },
              "static": true,
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "iconNotDef",
              "privacy": "private",
              "default": "`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" class=\"icon-not-def\"><path d=\"M64 390.3L153.5 256 64 121.7V390.3zM102.5 448H281.5L192 313.7 102.5 448zm128-192L320 390.3V121.7L230.5 256zM281.5 64H102.5L192 198.3 281.5 64zM0 48C0 21.5 21.5 0 48 0H336c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V48z\"/></svg>`"
            },
            {
              "kind": "method",
              "name": "registerIcon",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "faIcons",
                  "type": {
                    "text": "IconDefinition | IconDefinition[]"
                  },
                  "description": "One or more IconDefinition that have been imported from FontAwesome"
                }
              ],
              "description": "Add icon(s) to the icon registry"
            },
            {
              "kind": "method",
              "name": "registerIcons",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "icons",
                  "type": {
                    "text": "IconLibrary"
                  }
                }
              ],
              "description": "store all icons from the IconLibrary of the theme in the icon registry for easy access"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Describes the icon for assistive devices. If not present, the icon is considered\nto be purely presentational.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to show.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "'md'",
              "description": "Icon size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icons",
              "type": {
                "text": "IconLibrary"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#resolve",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Describes the icon for assistive devices. If not present, the icon is considered\nto be purely presentational.",
              "fieldName": "label"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to show.",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "'md'",
              "description": "Icon size.",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "../packages/components/icon/src/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/icon/src/models.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/column-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridColumnGroup",
          "members": [
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "default": "[]",
              "description": "The nested columns in the group."
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "The width of the group column is either manually specified, or the sum of the nested columns.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-column-group",
          "customElement": true,
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridColumnGroup",
          "declaration": {
            "name": "GridColumnGroup",
            "module": "../packages/components/grid/src/column-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridColumn",
          "members": [
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align"
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width"
            },
            {
              "kind": "field",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emits when the column definition has changed."
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance."
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow"
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header"
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path"
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts"
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell."
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid."
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width"
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align"
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth"
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow"
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header"
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path"
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts"
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky"
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-grid-column",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridColumn",
          "declaration": {
            "name": "GridColumn",
            "module": "../packages/components/grid/src/column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/filter-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridFilterColumn",
          "members": [
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-filter-column",
          "customElement": true,
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridFilterColumn",
          "declaration": {
            "name": "GridFilterColumn",
            "module": "../packages/components/grid/src/filter-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/filter.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/grid/src/filter.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/filter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridFilterValueChangeEvent",
          "superclass": {
            "name": "Event",
            "module": "../packages/components/grid/src/filter.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "GridFilter",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filter value."
            },
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "filterChange",
              "type": {
                "text": "EventEmitter<GridFilterChange>"
              }
            },
            {
              "kind": "field",
              "name": "filterValueChange",
              "type": {
                "text": "EventEmitter<GridFilterValueChangeEvent>"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "#onInput",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event & { target: Input }"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridFilterValueChangeEvent",
          "declaration": {
            "name": "GridFilterValueChangeEvent",
            "module": "../packages/components/grid/src/filter.ts"
          }
        },
        {
          "kind": "js",
          "name": "GridFilter",
          "declaration": {
            "name": "GridFilter",
            "module": "../packages/components/grid/src/filter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/grid.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/grid/src/grid.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/grid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridActiveItemChangeEvent",
          "superclass": {
            "name": "Event",
            "module": "../packages/components/grid/src/grid.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "Grid",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#filters",
              "privacy": "private",
              "type": {
                "text": "GridFilter[]"
              },
              "default": "[]",
              "description": "The filters for this grid."
            },
            {
              "kind": "field",
              "name": "#initialColumnWidthsCalculated",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag for calculating the column widths only once."
            },
            {
              "kind": "field",
              "name": "#sorters",
              "privacy": "private",
              "type": {
                "text": "GridSorter[]"
              },
              "default": "[]",
              "description": "The sorters for this grid."
            },
            {
              "kind": "field",
              "name": "selection",
              "readonly": true,
              "default": "new SelectionController<T>(this)",
              "description": "Selection manager."
            },
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "T | undefined"
              },
              "description": "The active item in the grid."
            },
            {
              "kind": "field",
              "name": "activeItemChange",
              "type": {
                "text": "EventEmitter<GridActiveItemChangeEvent<T>>"
              },
              "description": "Emits when the active item changes"
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "Array<GridColumn<T>>"
              },
              "default": "[]",
              "description": "The columns in the grid."
            },
            {
              "kind": "field",
              "name": "dataSource",
              "type": {
                "text": "DataSource<T> | undefined"
              },
              "description": "Provide your own implementation for getting the data."
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[] | undefined"
              },
              "description": "An array of items to be displayed in the grid.",
              "attribute": "items"
            },
            {
              "kind": "field",
              "name": "itemParts",
              "type": {
                "text": "GridItemParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<tr>` so it can be styled externally."
            },
            {
              "kind": "field",
              "name": "noBorder",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hide the border around the grid when true.",
              "attribute": "no-border",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noRowBorder",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hides the border between rows when true.",
              "attribute": "no-row-border",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "striped",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Uses alternating background colors for the rows when set.",
              "attribute": "striped",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "renderStyles",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderItem",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "recalculateColumnWidths",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Updates the `width` of all columns which have `autoWidth` set to `true`."
            },
            {
              "kind": "method",
              "name": "#onClickRow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onColumnUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: GridColumn<T> }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onDirectionChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "CustomEvent<DataSourceSortDirection | undefined> & { target: GridSorter }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onFilterChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail, target }",
                  "type": {
                    "text": "CustomEvent<GridFilterChange> & { target: GridFilter }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onFilterValueChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSorterChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail, target }",
                  "type": {
                    "text": "CustomEvent<GridSorterChange> & { target: GridSorter }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onVisibilityChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#addScopedElements",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "col",
                  "type": {
                    "text": "GridColumn<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#applyFilters",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#applySorters",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getHeaderRows",
              "return": {
                "type": {
                  "text": "Array<Array<GridColumn<T>>>"
                }
              },
              "parameters": [
                {
                  "name": "columns",
                  "type": {
                    "text": "Array<GridColumn<T>>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getStickyColumnOffset",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "items",
              "type": {
                "text": "T[] | undefined"
              },
              "description": "An array of items to be displayed in the grid.",
              "fieldName": "items"
            },
            {
              "name": "no-border",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hide the border around the grid when true.",
              "fieldName": "noBorder"
            },
            {
              "name": "no-row-border",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Hides the border between rows when true.",
              "fieldName": "noRowBorder"
            },
            {
              "name": "striped",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Uses alternating background colors for the rows when set.",
              "fieldName": "striped"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-grid",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridActiveItemChangeEvent",
          "declaration": {
            "name": "GridActiveItemChangeEvent",
            "module": "../packages/components/grid/src/grid.ts"
          }
        },
        {
          "kind": "js",
          "name": "Grid",
          "declaration": {
            "name": "Grid",
            "module": "../packages/components/grid/src/grid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/selection-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSelectionColumn",
          "members": [
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)"
            },
            {
              "kind": "field",
              "name": "autoSelect",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, the active rows get selected automatically.",
              "attribute": "auto-select"
            },
            {
              "kind": "field",
              "name": "selectAll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, all items are selected.",
              "attribute": "select-all"
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "#onActiveItemChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ item, relatedEvent }",
                  "type": {
                    "text": "GridActiveItemChangeEvent<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onToggleSelect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onToggleSelectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "auto-select",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, the active rows get selected automatically.",
              "fieldName": "autoSelect"
            },
            {
              "name": "select-all",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When true, all items are selected.",
              "fieldName": "selectAll"
            },
            {
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-selection-column",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSelectionColumn",
          "declaration": {
            "name": "GridSelectionColumn",
            "module": "../packages/components/grid/src/selection-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/sort-column.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSortColumn",
          "members": [
            {
              "kind": "method",
              "name": "renderHeader",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "#width",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "attribute": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "attribute": "auto-width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "columnUpdate",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emits when the column definition has changed.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grid",
              "type": {
                "text": "Grid<T> | undefined"
              },
              "description": "The parent grid instance.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "attribute": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "attribute": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "attribute": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "attribute": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "renderer",
              "type": {
                "text": "GridColumnDataRenderer<T> | undefined"
              },
              "description": "Renderer function for the column value of each cell.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "Record<string, typeof HTMLElement> | undefined"
              },
              "description": "The custom elements used for rendering this column. Since the rendering the column cells is done\nin the parent grid component, the custom elements need to be registered in the parent grid.",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "attribute": "sticky",
              "reflects": true,
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "attribute": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderData",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ],
          "superclass": {
            "name": "GridColumn",
            "module": "/packages/components/grid/src/column.js"
          },
          "tagName": "sl-grid-sort-column",
          "customElement": true,
          "attributes": [
            {
              "name": "align",
              "type": {
                "text": "'start' | 'center' | 'end'"
              },
              "default": "'start'",
              "description": "The alignment of the content within the column.",
              "fieldName": "align",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "auto-width",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `grow` is not 0.",
              "fieldName": "autoWidth",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "grow",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The ratio with which the column will grow relative to the other columns.\nA ratio of 0 means the column width is fixed.",
              "fieldName": "grow",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "header",
              "type": {
                "text": "string | GridColumnHeaderRenderer | undefined"
              },
              "description": "The label for the column header.",
              "fieldName": "header",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "path",
              "type": {
                "text": "string | undefined"
              },
              "description": "The path to the value for this column.",
              "fieldName": "path",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "parts",
              "type": {
                "text": "string | GridColumnParts<T> | undefined"
              },
              "description": "Custom parts to be set on the `<td>` so it can be styled externally.",
              "fieldName": "parts",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this column is sticky when the user scrolls horizontally.",
              "fieldName": "sticky",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            },
            {
              "name": "width",
              "type": {
                "text": "number | undefined"
              },
              "description": "Width of the cells for this column in pixels.",
              "fieldName": "width",
              "inheritedFrom": {
                "name": "GridColumn",
                "module": "../packages/components/grid/src/column.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSortColumn",
          "declaration": {
            "name": "GridSortColumn",
            "module": "../packages/components/grid/src/sort-column.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/sorter.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/grid/src/sorter.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/grid/src/sorter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridSorter",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)"
            },
            {
              "kind": "field",
              "name": "column",
              "type": {
                "text": "GridColumn"
              },
              "description": "The grid column."
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction in which to sort the items.",
              "attribute": "direction",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "directionChange",
              "type": {
                "text": "EventEmitter<DataSourceSortDirection | undefined>"
              }
            },
            {
              "kind": "field",
              "name": "sorterChange",
              "type": {
                "text": "EventEmitter<GridSorterChange>"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#toggleDirection",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "direction",
              "type": {
                "text": "DataSourceSortDirection | undefined"
              },
              "description": "The direction in which to sort the items.",
              "fieldName": "direction"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSorter",
          "declaration": {
            "name": "GridSorter",
            "module": "../packages/components/grid/src/sorter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/input/src/input.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/input/src/input.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/input/src/input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Single line text input component.",
          "name": "Input",
          "slots": [
            {
              "description": "Content shown before the input",
              "name": "prefix"
            },
            {
              "description": "The slot for the input element",
              "name": "input"
            },
            {
              "description": "Content shown after the input",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this, {\n    click: this.#onClick\n  })"
            },
            {
              "kind": "field",
              "name": "#onKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    target: () => this.input\n  })"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "description": "The input element in the light DOM."
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "description": "Element internals."
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies which type of data the browser can use to pre-fill the input.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum length (number of characters).",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Minimum length (number of characters).",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "Validation using pattern.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Placeholder text in the input.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'email' | 'number' | 'password' | 'tel' | 'text' | 'url'"
              },
              "default": "'text'",
              "description": "The input type. Only text types are valid here. For other types,\nsee their respective components.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[] | undefined"
              },
              "description": "Custom validators specified by the user."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the input.",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onInput",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event & { target: HTMLInputElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#cachedValue",
              "privacy": "private",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The cached value for the form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, or an `<input>` or `<textarea>`.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControlElement",
              "type": {
                "text": "FormControlElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement> | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "FormControlValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#updateHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#removeHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "string | undefined"
              },
              "description": "Specifies which type of data the browser can use to pre-fill the input.",
              "fieldName": "autocomplete"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum length (number of characters).",
              "fieldName": "maxLength"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Minimum length (number of characters).",
              "fieldName": "minLength"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "Validation using pattern.",
              "fieldName": "pattern"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Placeholder text in the input.",
              "fieldName": "placeholder"
            },
            {
              "name": "type",
              "type": {
                "text": "'email' | 'number' | 'password' | 'tel' | 'text' | 'url'"
              },
              "default": "'text'",
              "description": "The input type. Only text types are valid here. For other types,\nsee their respective components.",
              "fieldName": "type"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the input.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "fieldName": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            },
            {
              "name": "HintMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Input",
          "declaration": {
            "name": "Input",
            "module": "../packages/components/input/src/input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/label/src/label.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/label/src/label.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/label/src/label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Label",
          "members": [
            {
              "kind": "field",
              "name": "#formControlId",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              },
              "description": "The actual form control id this label links to."
            },
            {
              "kind": "field",
              "name": "#label",
              "privacy": "private",
              "type": {
                "text": "HTMLLabelElement | undefined"
              },
              "description": "The label instance in the light DOM."
            },
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "default": "new MutationObserver(() => void this.#update())",
              "description": "Observe the form control for changes to the required attribute."
            },
            {
              "kind": "field",
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "The DOM id of the form control this is linked to.",
              "attribute": "for"
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "(HTMLElement & FormControlInterface) | null"
              },
              "default": "null",
              "description": "The associated form control."
            },
            {
              "kind": "field",
              "name": "optional",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this label should be marked as optional."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this label should be marked as required."
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#update",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "for",
              "type": {
                "text": "string | undefined"
              },
              "description": "The DOM id of the form control this is linked to.",
              "fieldName": "for"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "../packages/components/label/src/label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/src/radio-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/radio-group/src/radio-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/src/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RadioGroup",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this, {\n    click: this.#onClick,\n    focusout: this.#onFocusout\n  })",
              "description": "Events controller."
            },
            {
              "kind": "field",
              "name": "#mutation",
              "privacy": "private",
              "default": "new MutationController(this, {\n    callback: mutations => {\n      const { target } = mutations.find(m => m.attributeName === 'checked' && m.oldValue === null) || {};\n\n      if (target instanceof Radio && target.value) {\n        this.buttons?.forEach(radio => (radio.checked = radio.value === target.value));\n        this.value = target.value;\n      }\n    },\n    config: {\n      attributeFilter: ['checked'],\n      attributeOldValue: true,\n      subtree: true\n    }\n  })",
              "description": "Observe the state of the radios."
            },
            {
              "kind": "field",
              "name": "#rovingTabindexController",
              "privacy": "private",
              "default": "new RovingTabindexController<Radio>(this, {\n    focusInIndex: (elements: Radio[]) => {\n      return elements.findIndex(el => {\n        return this.value ? !el.disabled && el.value === this.value : !el.disabled;\n      });\n    },\n    elementEnterAction: (el: Radio) => {\n      this.value = el.value;\n    },\n    elements: () => this.buttons,\n    isFocusableElement: (el: Radio) => !el.disabled\n  })",
              "description": "Manage the keyboard navigation."
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    validators: [requiredValidator]\n  })"
            },
            {
              "kind": "field",
              "name": "#initialState",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "description": "Element internals."
            },
            {
              "kind": "field",
              "name": "defaultNodes",
              "type": {
                "text": "Node[] | undefined"
              },
              "description": "The assigned nodes."
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, displays the radio buttons next to each other instead of below.",
              "attribute": "horizontal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[] | undefined"
              },
              "description": "Custom validators specified by the user."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for this group.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "buttons",
              "type": {
                "text": "Radio[]"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onFocusout",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "#cachedValue",
              "privacy": "private",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The cached value for the form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, or an `<input>` or `<textarea>`.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControlElement",
              "type": {
                "text": "FormControlElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement> | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "FormControlValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#updateHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#removeHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, displays the radio buttons next to each other instead of below.",
              "fieldName": "horizontal"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for this group.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "fieldName": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            },
            {
              "name": "HintMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-radio-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RadioGroup",
          "declaration": {
            "name": "RadioGroup",
            "module": "../packages/components/radio-group/src/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/src/radio.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/radio-group/src/radio.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/radio-group/src/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Radio",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this, {\n    click: this.#onClick,\n    keydown: this.#onKeydown\n  })",
              "description": "Events controller."
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "description": "Element internals."
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the radio is selected.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value for this radio button.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "RadioButtonSize"
              },
              "default": "'md'",
              "description": "Button size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#cachedValue",
              "privacy": "private",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The cached value for the form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, or an `<input>` or `<textarea>`.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControlElement",
              "type": {
                "text": "FormControlElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement> | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "FormControlValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the radio is selected.",
              "fieldName": "checked"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value for this radio button.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "RadioButtonSize"
              },
              "default": "'md'",
              "description": "Button size.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "../packages/components/radio-group/src/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/popover.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/popover/src/popover.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/popover.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Base popover web component.",
          "name": "Popover",
          "cssParts": [
            {
              "description": "The container for the popover",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#onAnchorClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "The arrow linking the popover to the anchor element.",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "'top'",
              "description": "Popover placement relative to the anchor.",
              "attribute": "placement",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListenersToAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListenersFromAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#onPopoverHide",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "cleanupFloatingUI",
              "type": {
                "text": "() => void | undefined"
              },
              "description": "Cleanup callback for floating-ui.",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "positionPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "cleanupPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#anchorElement",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "#resolveAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "field",
              "name": "#popoverOpen",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#onDocumentClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#onDocumentKeydown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "attribute": "open",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "receivesFocus",
              "type": {
                "text": "'auto' | undefined"
              },
              "attribute": "receives-focus",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "popoverOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "showPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "hidePopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setup",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Setup light dismiss handlers if no top-layer and not a manual popover.",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "#cleanup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Cleanup light dismiss handlers.",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "'top'",
              "description": "Popover placement relative to the anchor.",
              "fieldName": "placement"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "name": "receives-focus",
              "type": {
                "text": "'auto' | undefined"
              },
              "fieldName": "receivesFocus",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "AnchoredPopoverMixin",
              "module": "/packages/components/popover/src/mixins/anchored-popover.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-popover",
          "customElement": true,
          "events": [
            {
              "name": "popovershow",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "name": "popoverhide",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Popover",
          "declaration": {
            "name": "Popover",
            "module": "../packages/components/popover/src/popover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/css.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "supportsTopLayer"
        },
        {
          "kind": "variable",
          "name": "supportsHas"
        },
        {
          "kind": "variable",
          "name": "supportsAnchor",
          "type": {
            "text": "boolean"
          },
          "default": "false"
        },
        {
          "kind": "variable",
          "name": "firstFocusableSelector",
          "type": {
            "text": "string"
          },
          "default": "'button:not([tabindex=\"-1\"]), [href]:not([tabindex=\"-1\"]), input:not([tabindex=\"-1\"]), select:not([tabindex=\"-1\"]), textarea:not([tabindex=\"-1\"]), [tabindex]:not([tabindex=\"-1\"]), [focusable]:not([tabindex=\"-1\"])'"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "supportsTopLayer",
          "declaration": {
            "name": "supportsTopLayer",
            "module": "../packages/components/shared/src/css.ts"
          }
        },
        {
          "kind": "js",
          "name": "supportsHas",
          "declaration": {
            "name": "supportsHas",
            "module": "../packages/components/shared/src/css.ts"
          }
        },
        {
          "kind": "js",
          "name": "supportsAnchor",
          "declaration": {
            "name": "supportsAnchor",
            "module": "../packages/components/shared/src/css.ts"
          }
        },
        {
          "kind": "js",
          "name": "firstFocusableSelector",
          "declaration": {
            "name": "firstFocusableSelector",
            "module": "../packages/components/shared/src/css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/path.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getNameByPath",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "path",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getStringByPath",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "object",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "path",
              "default": "''"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getValueByPath",
          "return": {
            "type": {
              "text": "unknown"
            }
          },
          "parameters": [
            {
              "name": "object",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "path",
              "default": "''"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getNameByPath",
          "declaration": {
            "name": "getNameByPath",
            "module": "../packages/components/shared/src/path.ts"
          }
        },
        {
          "kind": "js",
          "name": "getStringByPath",
          "declaration": {
            "name": "getStringByPath",
            "module": "../packages/components/shared/src/path.ts"
          }
        },
        {
          "kind": "js",
          "name": "getValueByPath",
          "declaration": {
            "name": "getValueByPath",
            "module": "../packages/components/shared/src/path.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/string.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "camelize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to camelize."
            }
          ],
          "description": "Returns the lowerCamelCase form of a string.\n\n```javascript\ncamelize('innerHTML')          // 'innerHTML'\ncamelize('action_name')        // 'actionName'\ncamelize('css-class-name')     // 'cssClassName'\ncamelize('my favorite items')  // 'myFavoriteItems'\ncamelize('My Favorite Items')  // 'myFavoriteItems'\n```"
        },
        {
          "kind": "function",
          "name": "capitalize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to capitalize."
            }
          ],
          "description": "Returns the Capitalized form of a string\n\n```javascript\ncapitalize('innerHTML')         // 'InnerHTML'\ncapitalize('action_name')       // 'Action_name'\ncapitalize('css-class-name')    // 'Css-class-name'\ncapitalize('my favorite items') // 'My favorite items'\n```"
        },
        {
          "kind": "function",
          "name": "classify",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "the string to classify"
            }
          ],
          "description": "Returns the UpperCamelCase form of a string.\n\n```javascript\nclassify('innerHTML')          // 'InnerHTML'\nclassify('action_name')        // 'ActionName'\nclassify('css-class-name')     // 'CssClassName'\nclassify('my favorite items')  // 'MyFavoriteItems'\n```"
        },
        {
          "kind": "function",
          "name": "dasherize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to dasherize."
            }
          ],
          "description": "Replaces underscores, spaces, or camelCase with dashes.\n\n```javascript\ndasherize('innerHTML')         // 'inner-html'\ndasherize('action_name')       // 'action-name'\ndasherize('css-class-name')    // 'css-class-name'\ndasherize('my favorite items') // 'my-favorite-items'\n```"
        },
        {
          "kind": "function",
          "name": "decamelize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to decamelize."
            }
          ],
          "description": "Converts a camelized string into all lower case separated by underscores.\n\n```javascript\ndecamelize('innerHTML')         // 'inner_html'\ndecamelize('action_name')       // 'action_name'\ndecamelize('css-class-name')    // 'css-class-name'\ndecamelize('my favorite items') // 'my favorite items'\n```"
        },
        {
          "kind": "function",
          "name": "humanize",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to humanize."
            }
          ],
          "description": "Returns the Humanized form of a string\n\n```javascript\nhumanize('innerHTML')         // 'Inner HTML'\nhumanize('action_name')       // 'Action name'\nhumanize('css-class-name')    // 'Css class name'\nhumanize('my favorite items') // 'My favorite items'\n```"
        },
        {
          "kind": "function",
          "name": "underscore",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The string to underscore."
            }
          ],
          "description": "More general than decamelize. Returns the lower\\_case\\_and\\_underscored\nform of a string.\n\n```javascript\nunderscore('innerHTML')          // 'inner_html'\nunderscore('action_name')        // 'action_name'\nunderscore('css-class-name')     // 'css_class_name'\nunderscore('my favorite items')  // 'my_favorite_items'\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "camelize",
          "declaration": {
            "name": "camelize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "capitalize",
          "declaration": {
            "name": "capitalize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "classify",
          "declaration": {
            "name": "classify",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "dasherize",
          "declaration": {
            "name": "dasherize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "decamelize",
          "declaration": {
            "name": "decamelize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "humanize",
          "declaration": {
            "name": "humanize",
            "module": "../packages/components/shared/src/string.ts"
          }
        },
        {
          "kind": "js",
          "name": "underscore",
          "declaration": {
            "name": "underscore",
            "module": "../packages/components/shared/src/string.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "requiredValidator",
          "type": {
            "text": "Validator"
          },
          "default": "{\n  attribute: 'required',\n  key: 'valueMissing',\n  message: 'Please fill out this field',\n  isValid(instance: HTMLElement & { required: boolean }, value: ValidationValue): boolean {\n    let valid = true;\n\n    if ((instance.hasAttribute('required') || instance.required) && !value) {\n      valid = false;\n    }\n\n    return valid;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "programmaticValidator",
          "type": {
            "text": "Validator"
          },
          "default": "{\n  attribute: 'error',\n  message(instance: HTMLElement & { error: string }): string {\n    return instance.error;\n  },\n  isValid(instance: HTMLElement & { error: string }): boolean {\n    return !instance.error;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "minLengthValidator",
          "type": {
            "text": "Validator"
          },
          "default": "{\n  attribute: 'minlength',\n  key: 'rangeUnderflow',\n  message(instance: { minLength: number }, value: ValidationValue): string {\n    const _value = (value as string) || '';\n    return `Please use at least ${instance.minLength} characters (you are currently using ${_value.length} characters).`;\n  },\n  isValid(instance: HTMLElement & { minLength: number }, value: string): boolean {\n    /** If no value is provided, this validator should return true */\n    if (!value) {\n      return true;\n    }\n\n    if (value && instance.minLength > value.length) {\n      return false;\n    }\n\n    return true;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "maxLengthValidator",
          "type": {
            "text": "Validator"
          },
          "default": "{\n  attribute: 'maxlength',\n  key: 'rangeOverflow',\n  message(instance: { maxLength: number }, value: ValidationValue): string {\n    const _value = (value as string) || '';\n    return `Please use no more than ${instance.maxLength} characters (you are currently using ${_value.length} characters).`;\n  },\n  isValid(instance: HTMLElement & { maxLength: number }, value: string): boolean {\n    /** If maxLength isn't set, this is valid */\n    if (!instance.maxLength) {\n      return true;\n    }\n\n    if (!!value && instance.maxLength < value.length) {\n      return false;\n    }\n\n    return true;\n  }\n}"
        },
        {
          "kind": "variable",
          "name": "patternValidator",
          "type": {
            "text": "Validator"
          },
          "default": "{\n  attribute: 'pattern',\n  key: 'patternMismatch',\n  message: 'Please match the requested format',\n  isValid(instance: HTMLElement & { pattern: string }, value: string): boolean {\n    /** If no value is provided, this validator should return true */\n    if (!value || !instance.pattern) {\n      return true;\n    }\n\n    const regExp = new RegExp(instance.pattern);\n    return !!regExp.exec(value);\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requiredValidator",
          "declaration": {
            "name": "requiredValidator",
            "module": "../packages/components/shared/src/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "programmaticValidator",
          "declaration": {
            "name": "programmaticValidator",
            "module": "../packages/components/shared/src/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "minLengthValidator",
          "declaration": {
            "name": "minLengthValidator",
            "module": "../packages/components/shared/src/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxLengthValidator",
          "declaration": {
            "name": "maxLengthValidator",
            "module": "../packages/components/shared/src/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "patternValidator",
          "declaration": {
            "name": "patternValidator",
            "module": "../packages/components/shared/src/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-option-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/select/src/select-option-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-option-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectOptionGroup",
          "members": [
            {
              "kind": "field",
              "name": "groupTitle",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "group-title"
            }
          ],
          "attributes": [
            {
              "name": "group-title",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "groupTitle"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select-option-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOptionGroup",
          "declaration": {
            "name": "SelectOptionGroup",
            "module": "../packages/components/select/src/select-option-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-option.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/select/src/select-option.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectOption",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "Whether the option item is selected",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is selected",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is disabled",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contentType",
              "type": {
                "text": "'string' | 'element' | undefined"
              },
              "description": "Whether the content of the option item is a node",
              "attribute": "contentType",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "{ width: number; height: number }"
              },
              "default": "{ width: 0, height: 0 }",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "type": {
                "text": "ResizeObserver | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#tabIndex",
              "privacy": "private",
              "type": {
                "text": "string | null"
              },
              "description": "Get the selected tab button, or the first tab button.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleSelectionChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Apply accessible attributes and values to the tab button.\nObserve the selected property if it changes"
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleResize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mutations",
                  "type": {
                    "text": "ResizeObserverEntry[]"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "Whether the option item is selected",
              "fieldName": "value"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is selected",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the option item is disabled",
              "fieldName": "disabled"
            },
            {
              "name": "contentType",
              "type": {
                "text": "'string' | 'element' | undefined"
              },
              "description": "Whether the content of the option item is a node",
              "fieldName": "contentType"
            },
            {
              "name": "size",
              "type": {
                "text": "{ width: number; height: number }"
              },
              "default": "{ width: 0, height: 0 }",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOption",
          "declaration": {
            "name": "SelectOption",
            "module": "../packages/components/select/src/select-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-overlay.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/select/src/select-overlay.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select-overlay.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectOverlay",
          "members": [
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "'bottom-start'",
              "description": "Tooltip placement.",
              "attribute": "placement",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)"
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#onPopoverHide",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "The arrow pointing to the anchor element.",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "cleanupFloatingUI",
              "type": {
                "text": "() => void | undefined"
              },
              "description": "Cleanup callback for floating-ui.",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "positionPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "cleanupPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#anchorElement",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListenersToAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListenersFromAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "#resolveAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "field",
              "name": "#popoverOpen",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#onDocumentClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#onDocumentKeydown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "attribute": "open",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "receivesFocus",
              "type": {
                "text": "'auto' | undefined"
              },
              "attribute": "receives-focus",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "popoverOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "showPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "hidePopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setup",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Setup light dismiss handlers if no top-layer and not a manual popover.",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "#cleanup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Cleanup light dismiss handlers.",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "'bottom-start'",
              "description": "Tooltip placement.",
              "fieldName": "placement"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "name": "receives-focus",
              "type": {
                "text": "'auto' | undefined"
              },
              "fieldName": "receivesFocus",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "AnchoredPopoverMixin",
              "package": "@sl-design-system/popover"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select-overlay",
          "customElement": true,
          "events": [
            {
              "name": "popovershow",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "name": "popoverhide",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOverlay",
          "declaration": {
            "name": "SelectOverlay",
            "module": "../packages/components/select/src/select-overlay.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/select/src/select.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/select/src/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Select",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#observerOptions",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n    attributes: true,\n    subtree: true,\n    attributeFilter: ['selected', 'size'],\n    attributeOldValue: true\n  }"
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "SelectOverlay | undefined"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptionPlaceholder",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "SelectOption[] | undefined"
              },
              "description": "The slotted options."
            },
            {
              "kind": "field",
              "name": "optionGroups",
              "type": {
                "text": "SelectOptionGroup[] | undefined"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "{ width: string; height: string } | undefined"
              },
              "default": "{ width: '500px', height: '32px' }",
              "description": "render helpers",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "maxOverlayHeight",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "maxOverlayHeight"
            },
            {
              "kind": "field",
              "name": "#rovingTabindexController",
              "privacy": "private",
              "default": "new RovingTabindexController<SelectOption>(this, {\n    focusInIndex: (elements: SelectOption[]) => elements.findIndex(el => el.selected && !!this.overlay?.popoverOpen),\n    elements: () => this.allOptions || [],\n    isFocusableElement: (el: SelectOption) => !el.disabled\n  })"
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    validators: [requiredValidator]\n  })"
            },
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "type": {
                "text": "MutationObserver | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#selectId",
              "privacy": "private",
              "default": "`sl-select-${nextUniqueId++}`"
            },
            {
              "kind": "field",
              "name": "allOptions",
              "type": {
                "text": "SelectOption[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "description": "Element internals."
            },
            {
              "kind": "field",
              "name": "selectedOption",
              "type": {
                "text": "SelectOption | null | undefined"
              },
              "privacy": "private",
              "description": "The current tab node selected in the tab group."
            },
            {
              "kind": "method",
              "name": "openSelect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#closeSelect",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleOptionsSlotChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleMutation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mutations",
                  "type": {
                    "text": "MutationRecord[]"
                  }
                }
              ],
              "description": "If an option is selected programmatically update all the options or the size of the select itself"
            },
            {
              "kind": "method",
              "name": "#handleOptionChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "One of the options in the select has been clicked, get the right target and update the selection"
            },
            {
              "kind": "method",
              "name": "#updateSelectedOption",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selectedOption",
                  "type": {
                    "text": "SelectOption"
                  }
                }
              ],
              "description": "Update the selected option with attributes and values."
            },
            {
              "kind": "method",
              "name": "#updateSize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Find the largest option and set the select to that width"
            },
            {
              "kind": "method",
              "name": "#setSelectedOptionVisible",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SelectOption"
                  }
                }
              ],
              "description": "Copy the value/represenation of the selected option to the placeholder"
            },
            {
              "kind": "method",
              "name": "#handleOverlayKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handle keyboard accessible controls."
            },
            {
              "kind": "method",
              "name": "#handleOverallKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent & { target: HTMLElement }"
                  }
                }
              ],
              "description": "Handle keyboard accessible controls."
            },
            {
              "kind": "field",
              "name": "#cachedValue",
              "privacy": "private",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The cached value for the form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, or an `<input>` or `<textarea>`.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControlElement",
              "type": {
                "text": "FormControlElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement> | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "FormControlValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "{ width: string; height: string } | undefined"
              },
              "default": "{ width: '500px', height: '32px' }",
              "description": "render helpers",
              "fieldName": "size"
            },
            {
              "name": "maxOverlayHeight",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "maxOverlayHeight"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "../packages/components/select/src/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab-group.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/tabs/src/tab-group.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TabGroup",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "type": {
                "text": "ScopedElementsMap"
              },
              "static": true,
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#tabGroupId",
              "privacy": "private",
              "default": "`sl-tab-group-${nextUniqueId++}`",
              "description": "Unique ID for each tab group component present."
            },
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "type": {
                "text": "MutationObserver | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#rovingTabindexController",
              "privacy": "private",
              "default": "new RovingTabindexController<Tab>(this, {\n    focusInIndex: (elements: Tab[]) => elements.findIndex(el => el.selected),\n    elements: () => this.tabs || [],\n    isFocusableElement: (el: Tab) => !el.disabled\n  })"
            },
            {
              "kind": "field",
              "name": "#observerOptions",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n    attributes: true,\n    subtree: true,\n    attributeFilter: ['selected'],\n    attributeOldValue: true\n  }"
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "Tab[] | undefined"
              },
              "description": "The slotted tabs."
            },
            {
              "kind": "field",
              "name": "selectedTab",
              "type": {
                "text": "Tab | null"
              },
              "privacy": "private",
              "description": "The current tab node selected in the tab group."
            },
            {
              "kind": "field",
              "name": "tabChange",
              "type": {
                "text": "EventEmitter<number>"
              }
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Renders the tabs vertically instead of the default horizontal",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#initialSelectedTab",
              "privacy": "private",
              "type": {
                "text": "Tab | null"
              },
              "description": "Get the selected tab button, or the first tab button.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#updateSlots",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "#handleMutation",
              "privacy": "private",
              "description": "If the selected tab is selected programmatically update all the tabs."
            },
            {
              "kind": "method",
              "name": "#setupTabs",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Apply accessible attributes and values to the tab buttons."
            },
            {
              "kind": "method",
              "name": "#setupPanels",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Apply accessible attributes and values to the tab panels."
            },
            {
              "kind": "method",
              "name": "#handleTabChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#updateSelectedTab",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selectedTab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ],
              "description": "Update the selected tab button with attributes and values.\nUpdate the tab group state."
            },
            {
              "kind": "method",
              "name": "#handleKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handle keyboard accessible controls."
            },
            {
              "kind": "method",
              "name": "#updateSelectionIndicator",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Renders the tabs vertically instead of the default horizontal",
              "fieldName": "vertical"
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-tab-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabGroup",
          "declaration": {
            "name": "TabGroup",
            "module": "../packages/components/tabs/src/tab-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab-panel.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/tabs/src/tab-panel.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TabPanel",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-tab-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabPanel",
          "declaration": {
            "name": "TabPanel",
            "module": "../packages/components/tabs/src/tab-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/tabs/src/tab.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tabs/src/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Tab",
          "members": [
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the tab item is selected",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the tab item is disabled",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSelectionChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Apply accessible attributes and values to the tab button.\nObserve the selected property if it changes"
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the tab item is selected",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the tab item is disabled",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tab",
          "declaration": {
            "name": "Tab",
            "module": "../packages/components/tabs/src/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/textarea/src/textarea.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/textarea/src/textarea.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/textarea/src/textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Textarea",
          "members": [
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this, {\n    click: this.#onClick\n  })"
            },
            {
              "kind": "field",
              "name": "#validation",
              "privacy": "private",
              "default": "new ValidationController(this, {\n    target: () => this.textarea\n  })"
            },
            {
              "kind": "field",
              "name": "internals",
              "readonly": true,
              "description": "Element internals."
            },
            {
              "kind": "field",
              "name": "textarea",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "description": "The textarea in the light DOM."
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum length (number of characters).",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Minimum length (number of characters).",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Placeholder text in the input.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[] | undefined"
              },
              "description": "Custom validators specified by the user."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the textarea.",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "#onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onInput",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event & { target: HTMLTextAreaElement }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: HTMLSlotElement }"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#cachedValue",
              "privacy": "private",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The cached value for the form control.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, or an `<input>` or `<textarea>`.",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControlElement",
              "type": {
                "text": "FormControlElement"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement> | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "FormControlValue"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "attribute": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHint",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#updateHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            },
            {
              "kind": "method",
              "name": "#removeHint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Maximum length (number of characters).",
              "fieldName": "maxLength"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Minimum length (number of characters).",
              "fieldName": "minLength"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Placeholder text in the input.",
              "fieldName": "placeholder"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The value for the textarea.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "FormControlMixin",
                "module": "../packages/components/shared/src/mixins/form-control.ts"
              }
            },
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "fieldName": "hint",
              "inheritedFrom": {
                "name": "HintMixin",
                "module": "../packages/components/shared/src/mixins/hint.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormControlMixin",
              "package": "@sl-design-system/shared"
            },
            {
              "name": "HintMixin",
              "package": "@sl-design-system/shared"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-textarea",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Textarea",
          "declaration": {
            "name": "Textarea",
            "module": "../packages/components/textarea/src/textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/src/tooltip-directive.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TooltipDirective",
          "members": [
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "unknown | undefined"
              }
            },
            {
              "kind": "field",
              "name": "didSetupLazy",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "part",
              "type": {
                "text": "ElementPart | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "Tooltip | undefined"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setupLazy",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Directive",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "tooltip"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TooltipDirective",
          "declaration": {
            "name": "TooltipDirective",
            "module": "../packages/components/tooltip/src/tooltip-directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "tooltip",
          "declaration": {
            "name": "tooltip",
            "module": "../packages/components/tooltip/src/tooltip-directive.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/src/tooltip.scss.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "../packages/components/tooltip/src/tooltip.scss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/tooltip/src/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tooltip component.",
          "name": "Tooltip",
          "members": [
            {
              "kind": "method",
              "name": "lazy",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(target: Tooltip) => void"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#events",
              "privacy": "private",
              "default": "new EventsController(this)"
            },
            {
              "kind": "field",
              "name": "#matchesAnchor",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#onHide",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#onShow",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "'bottom'",
              "description": "Tooltip placement.",
              "attribute": "placement",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#onPopoverHide",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "The arrow pointing to the anchor element.",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "cleanupFloatingUI",
              "type": {
                "text": "() => void | undefined"
              },
              "description": "Cleanup callback for floating-ui.",
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "positionPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "cleanupPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredPopoverMixin",
                "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#anchorElement",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListenersToAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListenersFromAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "#resolveAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "field",
              "name": "#popoverOpen",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#onDocumentClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#onDocumentKeydown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "attribute": "open",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "receivesFocus",
              "type": {
                "text": "'auto' | undefined"
              },
              "attribute": "receives-focus",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "popoverOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "showPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "hidePopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setup",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Setup light dismiss handlers if no top-layer and not a manual popover.",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "#cleanup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Cleanup light dismiss handlers.",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "'bottom'",
              "description": "Tooltip placement.",
              "fieldName": "placement"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "name": "receives-focus",
              "type": {
                "text": "'auto' | undefined"
              },
              "fieldName": "receivesFocus",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "AnchoredPopoverMixin",
              "package": "@sl-design-system/popover"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sl-tooltip",
          "customElement": true,
          "events": [
            {
              "name": "popovershow",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "name": "popoverhide",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "../packages/components/tooltip/src/tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/mixins/anchored-popover.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "AnchoredPopoverMixin",
          "members": [
            {
              "kind": "field",
              "name": "#onPopoverHide",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "The arrow pointing to the anchor element."
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "'bottom'",
              "description": "The placement of the popover relative to the anchor element."
            },
            {
              "kind": "field",
              "name": "cleanupFloatingUI",
              "type": {
                "text": "() => void | undefined"
              },
              "description": "Cleanup callback for floating-ui."
            },
            {
              "kind": "method",
              "name": "positionPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "cleanupPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "#anchorElement",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListenersToAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListenersFromAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "method",
              "name": "#resolveAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredMixin",
                "module": "../packages/components/popover/src/mixins/anchored.ts"
              }
            },
            {
              "kind": "field",
              "name": "#popoverOpen",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#onDocumentClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "#onDocumentKeydown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "attribute": "open",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "receivesFocus",
              "type": {
                "text": "'auto' | undefined"
              },
              "attribute": "receives-focus",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "popoverOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "showPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "hidePopover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setup",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Setup light dismiss handlers if no top-layer and not a manual popover.",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "#cleanup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Cleanup light dismiss handlers.",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "AnchoredMixin",
              "module": "/packages/components/popover/src/mixins/anchored.js"
            },
            {
              "name": "PopoverMixin",
              "module": "/packages/components/popover/src/mixins/popover.js"
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "name": "receives-focus",
              "type": {
                "text": "'auto' | undefined"
              },
              "fieldName": "receivesFocus",
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ],
          "events": [
            {
              "name": "popovershow",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            },
            {
              "name": "popoverhide",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "PopoverMixin",
                "module": "../packages/components/popover/src/mixins/popover.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnchoredPopoverMixin",
          "declaration": {
            "name": "AnchoredPopoverMixin",
            "module": "../packages/components/popover/src/mixins/anchored-popover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/mixins/anchored.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "AnchoredMixin",
          "members": [
            {
              "kind": "field",
              "name": "#anchorElement",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "method",
              "name": "addEventListenersToAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "removeEventListenersFromAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#resolveAnchor",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnchoredMixin",
          "declaration": {
            "name": "AnchoredMixin",
            "module": "../packages/components/popover/src/mixins/anchored.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/mixins/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./anchored.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./anchored-popover.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./popover.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/mixins/popover.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "popoverMixinStyles",
          "type": {
            "text": "CSSResultGroup"
          },
          "default": "css`\n  @supports selector(:open) {\n    :host(:open) {\n      display: flex;\n      opacity: 1;\n      pointer-events: auto;\n    }\n  }\n\n  @supports not selector(:open) {\n    :host([popover-open]) {\n      display: flex;\n      opacity: 1;\n      pointer-events: auto;\n    }\n  }\n\n  :host {\n    background: none;\n    border: 0;\n    display: flex;\n    left: 0;\n    margin: 0;\n    opacity: 0;\n    overflow: visible;\n    padding: 0;\n    pointer-events: none;\n    position: fixed;\n    top: 0;\n  }\n`"
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "PopoverMixin",
          "members": [
            {
              "kind": "field",
              "name": "#popoverOpen",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#onDocumentClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#onDocumentKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "attribute": "open"
            },
            {
              "kind": "field",
              "name": "receivesFocus",
              "type": {
                "text": "'auto' | undefined"
              },
              "attribute": "receives-focus"
            },
            {
              "kind": "field",
              "name": "popoverOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "willUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hidePopover",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "positionPopover",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setup",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Setup light dismiss handlers if no top-layer and not a manual popover."
            },
            {
              "kind": "method",
              "name": "#cleanup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Cleanup light dismiss handlers."
            }
          ],
          "events": [
            {
              "name": "popovershow",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "popoverhide",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the popover is open or not.",
              "fieldName": "open"
            },
            {
              "name": "receives-focus",
              "type": {
                "text": "'auto' | undefined"
              },
              "fieldName": "receivesFocus"
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "popoverMixinStyles",
          "declaration": {
            "name": "popoverMixinStyles",
            "module": "../packages/components/popover/src/mixins/popover.ts"
          }
        },
        {
          "kind": "js",
          "name": "PopoverMixin",
          "declaration": {
            "name": "PopoverMixin",
            "module": "../packages/components/popover/src/mixins/popover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/utils/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./position-anchored-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/popover/src/utils/position-anchored-element.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "flipPlacement",
          "return": {
            "type": {
              "text": "Placement"
            }
          },
          "parameters": [
            {
              "name": "placement",
              "type": {
                "text": "Placement"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "positionAnchoredElement",
          "return": {
            "type": {
              "text": "(() => void)"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "anchor",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "PositionAnchoredElementOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Placement",
          "declaration": {
            "name": "Placement",
            "module": "../packages/components/popover/src/utils/position-anchored-element.ts"
          }
        },
        {
          "kind": "js",
          "name": "flipPlacement",
          "declaration": {
            "name": "flipPlacement",
            "module": "../packages/components/popover/src/utils/position-anchored-element.ts"
          }
        },
        {
          "kind": "js",
          "name": "positionAnchoredElement",
          "declaration": {
            "name": "positionAnchoredElement",
            "module": "../packages/components/popover/src/utils/position-anchored-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/data-source/array-data-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ArrayDataSource",
          "members": [
            {
              "kind": "field",
              "name": "#items",
              "privacy": "private",
              "type": {
                "text": "T[]"
              },
              "default": "[...items]",
              "description": "Array of filtered & sorted items."
            },
            {
              "kind": "field",
              "name": "#originalItems",
              "privacy": "private",
              "type": {
                "text": "T[]"
              },
              "description": "The original array of items as passed to the constructor.",
              "default": "[...items]"
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of items.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Size of the item collection.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "method",
              "name": "#filter",
              "return": {
                "type": {
                  "text": "DataSourceFilterFunction<T>"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "DataSourceFilterValue[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilter<T> | undefined"
              },
              "description": "The filter implementation.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "filterValues",
              "type": {
                "text": "DataSourceFilterValue[] | undefined"
              },
              "description": "The values to filter on.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSorter<T> | undefined"
              },
              "description": "The sorter implementation.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            },
            {
              "kind": "field",
              "name": "sortValue",
              "type": {
                "text": "DataSourceSortValue | undefined"
              },
              "description": "The path & direction to sort on.",
              "inheritedFrom": {
                "name": "DataSource",
                "module": "../packages/components/shared/src/data-source/data-source.ts"
              }
            }
          ],
          "events": [
            {
              "name": "sl-update",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "DataSource",
            "module": "/packages/components/shared/src/data-source/data-source.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ArrayDataSource",
          "declaration": {
            "name": "ArrayDataSource",
            "module": "../packages/components/shared/src/data-source/array-data-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/data-source/data-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DataSource",
          "members": [
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "DataSourceFilter<T> | undefined"
              },
              "description": "The filter implementation."
            },
            {
              "kind": "field",
              "name": "filterValues",
              "type": {
                "text": "DataSourceFilterValue[] | undefined"
              },
              "description": "The values to filter on."
            },
            {
              "kind": "field",
              "name": "sorter",
              "type": {
                "text": "DataSourceSorter<T> | undefined"
              },
              "description": "The sorter implementation."
            },
            {
              "kind": "field",
              "name": "sortValue",
              "type": {
                "text": "DataSourceSortValue | undefined"
              },
              "description": "The path & direction to sort on."
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "description": "The array of items."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "description": "Size of the item collection."
            }
          ],
          "superclass": {
            "name": "EventTarget",
            "module": "../packages/components/shared/src/data-source/data-source.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DataSource",
          "declaration": {
            "name": "DataSource",
            "module": "../packages/components/shared/src/data-source/data-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/data-source/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./array-data-source.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./data-source.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/events.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventsController",
          "members": [
            {
              "kind": "field",
              "name": "#host",
              "privacy": "private",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              },
              "default": "host"
            },
            {
              "kind": "field",
              "name": "#listeners",
              "privacy": "private",
              "type": {
                "text": "Array<() => void>"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "Node"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K]) => void"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "listen",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "Node"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventsController",
          "declaration": {
            "name": "EventsController",
            "module": "../packages/components/shared/src/controllers/events.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/focus-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FocusGroupController",
          "members": [
            {
              "kind": "field",
              "name": "#currentIndex",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "#direction",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#elements",
              "privacy": "private",
              "type": {
                "text": "() => T[]"
              },
              "default": "elements"
            },
            {
              "kind": "field",
              "name": "#focused",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#focusInIndex",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#listenerScope",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "elementEnterAction"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              },
              "default": "5"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "default": "host"
            },
            {
              "kind": "field",
              "name": "isFocusableElement"
            },
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleFocusin"
            },
            {
              "kind": "field",
              "name": "handleFocusout"
            },
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleKeydown"
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusGroupController",
          "declaration": {
            "name": "FocusGroupController",
            "module": "../packages/components/shared/src/controllers/focus-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./events.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./focus-group.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./roving-tabindex.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./selection.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./validation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/roving-tabindex.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RovingTabindexController",
          "members": [
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "managed",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "manageIndexesAnimationFrame",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "clearElementCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "default": "0"
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "manageTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateTabindexes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "getTabIndex",
                  "type": {
                    "text": "(el: HTMLElement) => UpdateTabIndexes"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "manage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "unmanage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "#currentIndex",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "#direction",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "#elements",
              "privacy": "private",
              "type": {
                "text": "() => T[]"
              },
              "default": "elements",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "#focused",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "#focusInIndex",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "#listenerScope",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "cachedElements",
              "type": {
                "text": "T[] | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentIndex",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "DirectionTypes"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "T[]"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "elementEnterAction",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInElement",
              "type": {
                "text": "T"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusInIndex",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "directionLength",
              "type": {
                "text": "number"
              },
              "default": "5",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "default": "host",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "isEventWithinListenerScope",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCurrentIndexCircularly",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "diff",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "hostNoLongerContainsFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "isRelatedTargetAnElement",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusin",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusout",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "acceptsEventCode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleKeydown",
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusGroupController",
                "module": "../packages/components/shared/src/controllers/focus-group.ts"
              }
            }
          ],
          "superclass": {
            "name": "FocusGroupController",
            "module": "/packages/components/shared/src/controllers/focus-group.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RovingTabindexController",
          "declaration": {
            "name": "RovingTabindexController",
            "module": "../packages/components/shared/src/controllers/roving-tabindex.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/selection.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectionController",
          "members": [
            {
              "kind": "field",
              "name": "#host",
              "privacy": "private",
              "type": {
                "text": "ReactiveControllerHost"
              },
              "default": "host"
            },
            {
              "kind": "field",
              "name": "#selectAll",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether all items are selected or not."
            },
            {
              "kind": "field",
              "name": "#selection",
              "privacy": "private",
              "default": "new Set<T>()",
              "description": "The current selection; these are either the selected items, or the unselected items,\ndepending on the value of #selectAll."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The total number of items in the selection."
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "!!options?.multiple",
              "description": "Whether more than 1 item can be selected at a time."
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "Set<T>"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "deselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "areAllSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "areSomeSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectionController",
          "declaration": {
            "name": "SelectionController",
            "module": "../packages/components/shared/src/controllers/selection.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/controllers/validation.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "validationStyles",
          "type": {
            "text": "CSSResultGroup"
          },
          "default": "css`\n  slot[part='error'] {\n    color: #c00;\n  }\n`"
        },
        {
          "kind": "class",
          "description": "",
          "name": "ValidationController",
          "members": [
            {
              "kind": "field",
              "name": "#abortController",
              "privacy": "private",
              "type": {
                "text": "AbortController | undefined"
              },
              "description": "An internal abort controller for cancelling pending async validation."
            },
            {
              "kind": "field",
              "name": "#previousAbortController",
              "privacy": "private",
              "type": {
                "text": "AbortController | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#customValidators",
              "privacy": "private",
              "type": {
                "text": "Validator[] | undefined"
              },
              "description": "Custom validators set at runtime."
            },
            {
              "kind": "field",
              "name": "#host",
              "privacy": "private",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              },
              "description": "Controller host.",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "#showErrors",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines when validation messages should be shown."
            },
            {
              "kind": "field",
              "name": "#target",
              "privacy": "private",
              "type": {
                "text": "ValidationTarget | undefined"
              },
              "description": "The element which is being validated. Either a Form Associated\nCustom Element, or an `<input>` or `<textarea>`."
            },
            {
              "kind": "field",
              "name": "#targetFn",
              "privacy": "private",
              "type": {
                "text": "() => ValidationTarget | undefined"
              },
              "description": "The target is set after the host's connectedCallback has run."
            },
            {
              "kind": "field",
              "name": "#validationComplete",
              "privacy": "private",
              "description": "Used when validation is pending."
            },
            {
              "kind": "field",
              "name": "#validationCompleteResolver",
              "privacy": "private",
              "type": {
                "text": "(value: void | PromiseLike<void>) => void | undefined"
              },
              "description": "Save a reference to the validation complete resolver"
            },
            {
              "kind": "field",
              "name": "#validationPending",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether validation is pending."
            },
            {
              "kind": "field",
              "name": "#validators",
              "privacy": "private",
              "type": {
                "text": "Validator[]"
              },
              "default": "[]",
              "description": "The custom validators. If the target is an `<input>` or `<textarea>`,\nthe target has built-in validators."
            },
            {
              "kind": "field",
              "name": "#onInvalid",
              "privacy": "private",
              "description": "Event handler for when invalid validity must be reported."
            },
            {
              "kind": "field",
              "name": "#onReset",
              "privacy": "private",
              "description": "Event handler for when the parent form is reset."
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "ValidationTarget"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "ValidationValue"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getInvalidState",
              "return": {
                "type": {
                  "text": "keyof ValidityState | void"
                }
              },
              "parameters": [
                {
                  "name": "validity",
                  "type": {
                    "text": "ValidityState"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getValidationMessageForState",
              "return": {
                "type": {
                  "text": "string | void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "keyof ValidityState"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getValidatorMessageForValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "ValidationValue"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setValidityWithOptionalTarget",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validity",
                  "type": {
                    "text": "Partial<ValidityState>"
                  }
                },
                {
                  "name": "validationMessage",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "validationStyles",
          "declaration": {
            "name": "validationStyles",
            "module": "../packages/components/shared/src/controllers/validation.ts"
          }
        },
        {
          "kind": "js",
          "name": "ValidationController",
          "declaration": {
            "name": "ValidationController",
            "module": "../packages/components/shared/src/controllers/validation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/decorators/base.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "decorateProperty",
          "parameters": [
            {
              "name": "{\n    finisher,\n    descriptor\n  }",
              "type": {
                "text": "{\n    finisher?: ((ctor: typeof ReactiveElement, property: PropertyKey) => void) | null;\n    descriptor?: (property: PropertyKey) => PropertyDescriptor;\n  }"
              }
            },
            {
              "description": "Optional finisher method; receives the element\nconstructor and property key as arguments and has no return value.",
              "name": "finisher",
              "type": {
                "text": "function"
              }
            },
            {
              "description": "Optional descriptor method; receives the\nproperty key as an argument and returns a property descriptor to define for\nthe given property.",
              "name": "descriptor",
              "type": {
                "text": "function"
              }
            }
          ],
          "description": "Helper for decorating a property that is compatible with both TypeScript\nand Babel decorators. The optional `finisher` can be used to perform work on\nthe class. The optional `descriptor` should return a PropertyDescriptor\nto install for the given property.",
          "return": {
            "type": {
              "text": "ClassElement|void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "decorateProperty",
          "declaration": {
            "name": "decorateProperty",
            "module": "../packages/components/shared/src/decorators/base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/decorators/event.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventEmitter",
          "members": [
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "EventOptions"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "variable",
          "name": "event",
          "type": {
            "text": "Event"
          }
        },
        {
          "kind": "function",
          "name": "event",
          "return": {
            "type": {
              "text": "any"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "EventOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventEmitter",
          "declaration": {
            "name": "EventEmitter",
            "module": "../packages/components/shared/src/decorators/event.ts"
          }
        },
        {
          "kind": "js",
          "name": "event",
          "declaration": {
            "name": "event",
            "module": "../packages/components/shared/src/decorators/event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/decorators/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./base.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./event.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./observe.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/decorators/observe.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "observe",
          "parameters": [
            {
              "name": "propertyName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "lifecycle",
              "default": "'update'",
              "type": {
                "text": "ObserveLifecycle"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observe",
          "declaration": {
            "name": "observe",
            "module": "../packages/components/shared/src/decorators/observe.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/mixins/form-control.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FormControlMixin",
          "members": [
            {
              "kind": "field",
              "name": "#cachedValue",
              "privacy": "private",
              "type": {
                "text": "FormControlValue | undefined"
              },
              "description": "The cached value for the form control."
            },
            {
              "kind": "field",
              "name": "#formControlElement",
              "privacy": "private",
              "type": {
                "text": "FormControlElement | undefined"
              },
              "description": "The actual element that integrates with the form; either\na Form Associated Custom Element, or an `<input>` or `<textarea>`."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formControlElement",
              "type": {
                "text": "FormControlElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement> | null"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setFormControlElement",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FormControlElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "FormControlValue"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "No interaction is possible with this control when disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the form control.",
              "fieldName": "name"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether this form control is a required field.",
              "fieldName": "required"
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlMixin",
          "declaration": {
            "name": "FormControlMixin",
            "module": "../packages/components/shared/src/mixins/form-control.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/mixins/hint.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "HintMixin",
          "members": [
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "attribute": "hint"
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changes",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHint",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "#updateHint",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#removeHint",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "hint",
              "type": {
                "text": "string | undefined"
              },
              "description": "The hint. If you need to display HTML, use the `hint` slot instead.",
              "fieldName": "hint"
            }
          ],
          "parameters": [
            {
              "name": "constructor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HintMixin",
          "declaration": {
            "name": "HintMixin",
            "module": "../packages/components/shared/src/mixins/hint.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "../packages/components/shared/src/mixins/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./form-control.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./hint.js"
          }
        }
      ]
    }
  ]
}
